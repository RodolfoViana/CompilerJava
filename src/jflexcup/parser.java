
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jul 12 22:46:05 BRT 2015
//----------------------------------------------------

package jflexcup;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import symtab.*;
import type.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jul 12 22:46:05 BRT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\007" +
    "\003\000\002\007\003\000\002\010\004\000\002\010\004" +
    "\000\002\011\003\000\002\011\005\000\002\020\004\000" +
    "\002\022\002\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\023\002\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\014\002\000" +
    "\002\014\004\000\002\136\002\000\002\014\005\000\002" +
    "\137\002\000\002\015\007\000\002\140\002\000\002\015" +
    "\011\000\002\016\005\000\002\025\002\000\002\025\003" +
    "\000\002\024\003\000\002\024\004\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\006\000\002\141" +
    "\002\000\002\030\007\000\002\142\002\000\002\030\007" +
    "\000\002\013\002\000\002\013\004\000\002\031\003\000" +
    "\002\031\006\000\002\143\002\000\002\031\006\000\002" +
    "\012\002\000\002\032\003\000\002\032\005\000\002\033" +
    "\004\000\002\144\002\000\002\035\011\000\002\145\002" +
    "\000\002\035\011\000\002\146\002\000\002\035\007\000" +
    "\002\036\002\000\002\036\003\000\002\037\003\000\002" +
    "\037\005\000\002\147\002\000\002\037\005\000\002\040" +
    "\004\000\002\041\006\000\002\041\006\000\002\041\003" +
    "\000\002\034\002\000\002\042\004\000\002\150\002\000" +
    "\002\043\010\000\002\044\007\000\002\044\006\000\002" +
    "\044\006\000\002\047\002\000\002\045\007\000\002\045" +
    "\007\000\002\045\011\000\002\045\011\000\002\046\006" +
    "\000\002\151\002\000\002\046\007\000\002\050\002\000" +
    "\002\050\003\000\002\051\003\000\002\051\004\000\002" +
    "\152\002\000\002\051\005\000\002\052\003\000\002\052" +
    "\003\000\002\053\006\000\002\153\002\000\002\053\006" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\057\003\000\002\060\004" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\102\002\000\002\103\002\000\002\104\002\000\002" +
    "\105\002\000\002\062\011\000\002\154\002\000\002\062" +
    "\010\000\002\063\014\000\002\155\002\000\002\063\014" +
    "\000\002\064\014\000\002\065\011\000\002\156\002\000" +
    "\002\065\010\000\002\066\011\000\002\114\002\000\002" +
    "\067\006\000\002\070\003\000\002\070\003\000\002\111" +
    "\002\000\002\071\003\000\002\071\003\000\002\071\006" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\071\005\000\002\071\005\000\002" +
    "\071\005\000\002\071\005\000\002\071\005\000\002\157" +
    "\002\000\002\071\007\000\002\160\002\000\002\071\006" +
    "\000\002\161\002\000\002\072\011\000\002\017\002\000" +
    "\002\017\003\000\002\073\002\000\002\073\003\000\002" +
    "\074\003\000\002\074\005\000\002\162\002\000\002\074" +
    "\005\000\002\075\006\000\002\075\006\000\002\076\003" +
    "\000\002\076\004\000\002\163\002\000\002\076\005\000" +
    "\002\077\005\000\002\100\002\000\002\100\003\000\002" +
    "\101\004\000\002\101\005\000\002\115\005\000\002\115" +
    "\005\000\002\116\006\000\002\116\010\000\002\116\010" +
    "\000\002\117\006\000\002\117\006\000\002\120\003\000" +
    "\002\120\003\000\002\120\004\000\002\110\002\000\002" +
    "\121\003\000\002\121\005\000\002\121\004\000\002\121" +
    "\004\000\002\122\003\000\002\122\005\000\002\122\005" +
    "\000\002\122\005\000\002\164\002\000\002\122\006\000" +
    "\002\165\002\000\002\122\006\000\002\166\002\000\002" +
    "\122\006\000\002\123\003\000\002\123\005\000\002\123" +
    "\005\000\002\124\003\000\002\124\005\000\002\124\005" +
    "\000\002\124\005\000\002\124\005\000\002\167\002\000" +
    "\002\124\006\000\002\170\002\000\002\124\006\000\002" +
    "\171\002\000\002\124\006\000\002\172\002\000\002\124" +
    "\006\000\002\125\003\000\002\125\005\000\002\125\005" +
    "\000\002\173\002\000\002\125\006\000\002\174\002\000" +
    "\002\125\006\000\002\106\002\000\002\126\003\000\002" +
    "\126\006\000\002\175\002\000\002\126\006\000\002\107" +
    "\002\000\002\127\003\000\002\127\006\000\002\176\002" +
    "\000\002\127\006\000\002\112\002\000\002\113\002\000" +
    "\002\130\003\000\002\130\011\000\002\177\002\000\002" +
    "\130\010\000\002\131\003\000\002\131\003\000\002\132" +
    "\006\000\002\200\002\000\002\132\006\000\002\133\003" +
    "\000\002\133\003\000\002\133\003\000\002\134\002\000" +
    "\002\134\003\000\002\135\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d7\000\034\002\uffdf\003\005\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\037\uffdf\001\002\000\004\002\u01d9\001\002\000" +
    "\030\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\037\uffdd\001\002\000" +
    "\032\002\000\024\011\025\007\026\014\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\037\uffeb\001" +
    "\002\000\036\004\uffe9\005\uffe9\006\uffe9\007\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\037" +
    "\uffe9\041\uffe9\076\uffe9\001\002\000\004\037\025\001\002" +
    "\000\036\004\uffea\005\uffea\006\uffea\007\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\037\uffea" +
    "\041\uffea\076\uffea\001\002\000\032\002\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\037\uffde\001\002\000\036\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\027\017\030\023\031\024\032\021" +
    "\033\022\034\020\035\015\037\uffe7\041\uffe7\076\uffe7\001" +
    "\002\000\036\004\uffe8\005\uffe8\006\uffe8\007\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\037" +
    "\uffe8\041\uffe8\076\uffe8\001\002\000\020\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\037\uffe0\041\uffe0\076\uffe0\001\002\000" +
    "\020\004\uffec\005\uffec\006\uffec\007\uffec\037\uffec\041\uffec" +
    "\076\uffec\001\002\000\020\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\037\uffe6\041\uffe6\076\uffe6\001\002\000\020\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\037\uffe1\041\uffe1\076\uffe1\001" +
    "\002\000\020\004\uffe3\005\uffe3\006\uffe3\007\uffe3\037\uffe3" +
    "\041\uffe3\076\uffe3\001\002\000\020\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\037\uffe2\041\uffe2\076\uffe2\001\002\000\020" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\037\uffe5\041\uffe5\076" +
    "\uffe5\001\002\000\020\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\037\uffe4\041\uffe4\076\uffe4\001\002\000\004\076\026\001" +
    "\002\000\006\016\uffdb\040\027\001\002\000\004\076\u01d4" +
    "\001\002\000\004\016\031\001\002\000\052\003\044\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\013\034\016\040\017\uffd6" +
    "\024\011\025\007\026\014\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\041\uffeb\076\uffeb\001\002" +
    "\000\032\002\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\037\uffda" +
    "\001\002\000\052\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\013\uffd1\016\uffd1\017\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\041\uffd1\076\uffd1\001\002\000\052\003\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\013\uffcd\016\uffcd\017\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\041\uffcd\076\uffcd\001\002\000" +
    "\052\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce\013\uffce" +
    "\016\uffce\017\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\041\uffce" +
    "\076\uffce\001\002\000\004\016\u01b3\001\002\000\052\003" +
    "\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\013\uffd0\016\uffd0" +
    "\017\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\041\uffd0\076\uffd0" +
    "\001\002\000\060\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007" +
    "\uffa6\013\uffa6\016\uffa6\017\uffa6\021\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\045\uffa6\047\uffa6\050\uffa6\051\uffa6\071\uffa6\072" +
    "\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\001\002" +
    "\000\006\013\161\016\160\001\002\000\004\017\156\001" +
    "\002\000\052\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\013\uffd4\016\uffd4\017\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\041\uffd4\076\uffd4\001\002\000\004\021\uffb9\001\002\000" +
    "\052\003\044\004\uffeb\005\uffeb\006\uffeb\007\uffeb\013\034" +
    "\016\040\017\uffd5\024\011\025\007\026\014\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\041\uffeb" +
    "\076\uffeb\001\002\000\016\004\053\005\051\006\064\007" +
    "\063\041\054\076\061\001\002\000\052\003\uffcf\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\013\uffcf\016\uffcf\017\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\041\uffcf\076\uffcf\001\002\000" +
    "\052\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\013\uffd2" +
    "\016\uffd2\017\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\041\uffd2" +
    "\076\uffd2\001\002\000\012\003\ufff5\010\ufff5\012\ufff5\076" +
    "\ufff5\001\002\000\012\003\ufff2\010\134\012\147\076\ufff2" +
    "\001\002\000\012\003\ufff6\010\ufff6\012\ufff6\076\ufff6\001" +
    "\002\000\004\076\141\001\002\000\010\003\ufff9\010\134" +
    "\076\ufff9\001\002\000\012\003\ufff7\010\ufff7\012\ufff7\076" +
    "\ufff7\001\002\000\006\003\107\076\110\001\002\000\006" +
    "\003\ufff8\076\ufff8\001\002\000\014\003\uffee\010\uffee\012" +
    "\uffee\021\uffab\076\uffee\001\002\000\006\003\ufff1\076\ufff1" +
    "\001\002\000\012\003\ufff3\010\ufff3\012\ufff3\076\ufff3\001" +
    "\002\000\012\003\ufff4\010\ufff4\012\ufff4\076\ufff4\001\002" +
    "\000\004\021\066\001\002\000\020\003\072\004\053\005" +
    "\051\006\064\007\063\022\uffb7\076\074\001\002\000\004" +
    "\022\105\001\002\000\006\015\103\022\uffb6\001\002\000" +
    "\006\015\uffb5\022\uffb5\001\002\000\014\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\076\uffb3\001\002\000\004\076\076\001" +
    "\002\000\064\003\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\020\uffee\021\uffee\022\uffee\023\uffee\052" +
    "\uffee\053\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee" +
    "\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee\076" +
    "\uffee\001\002\000\010\010\077\015\uffb1\022\uffb1\001\002" +
    "\000\014\010\uffc0\013\uffc0\015\uffc0\020\uffc0\022\uffc0\001" +
    "\002\000\004\011\100\001\002\000\014\010\uffbf\013\uffbf" +
    "\015\uffbf\020\uffbf\022\uffbf\001\002\000\014\004\053\005" +
    "\051\006\064\007\063\076\074\001\002\000\006\015\uffb2" +
    "\022\uffb2\001\002\000\014\004\053\005\051\006\064\007" +
    "\063\076\074\001\002\000\006\015\uffb4\022\uffb4\001\002" +
    "\000\004\016\uffaa\001\002\000\012\010\077\013\uffc5\015" +
    "\uffc5\020\uffc5\001\002\000\050\003\uffc9\004\uffc9\005\uffc9" +
    "\006\uffc9\007\uffc9\013\uffcb\015\uffc3\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\041\uffc9\076\uffc9\001\002\000\012\010\uffc0\013" +
    "\uffc0\015\uffc0\021\uffbd\001\002\000\006\013\113\015\112" +
    "\001\002\000\004\076\uffc1\001\002\000\052\003\uffcc\004" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\013\uffcc\016\uffcc\017\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\041\uffcc\076\uffcc\001\002" +
    "\000\004\076\076\001\002\000\012\010\077\013\uffc4\015" +
    "\uffc4\020\uffc4\001\002\000\004\021\117\001\002\000\020" +
    "\003\072\004\053\005\051\006\064\007\063\022\uffb7\076" +
    "\074\001\002\000\004\022\121\001\002\000\006\013\uffbc" +
    "\016\uffbc\001\002\000\004\013\133\001\002\000\004\015" +
    "\131\001\002\000\044\003\044\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\024\011\025\007\026\014\027\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\041\uffeb\076\uffeb" +
    "\001\002\000\016\004\053\005\051\006\064\007\063\041" +
    "\054\076\074\001\002\000\052\003\uffc8\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\013\uffc8\016\uffc8\017\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\041\uffc8\076\uffc8\001\002\000\004\076" +
    "\130\001\002\000\004\021\uffbd\001\002\000\004\076\076" +
    "\001\002\000\012\010\077\013\uffc2\015\uffc2\020\uffc2\001" +
    "\002\000\052\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\013\uffca\016\uffca\017\uffca\024\uffca\025\uffca\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\041\uffca\076\uffca\001\002\000\004\011\140\001\002\000" +
    "\012\003\ufff0\010\136\012\ufff0\076\ufff0\001\002\000\004" +
    "\011\137\001\002\000\060\003\uff4b\010\uff4b\011\uff4b\012" +
    "\uff4b\013\uff4b\014\uff4b\015\uff4b\022\uff4b\023\uff4b\052\uff4b" +
    "\053\uff4b\055\uff4b\056\uff4b\057\uff4b\060\uff4b\061\uff4b\062" +
    "\uff4b\063\uff4b\064\uff4b\065\uff4b\066\uff4b\067\uff4b\076\uff4b" +
    "\001\002\000\060\003\uff4c\010\uff4c\011\uff4c\012\uff4c\013" +
    "\uff4c\014\uff4c\015\uff4c\022\uff4c\023\uff4c\052\uff4c\053\uff4c" +
    "\055\uff4c\056\uff4c\057\uff4c\060\uff4c\061\uff4c\062\uff4c\063" +
    "\uff4c\064\uff4c\065\uff4c\066\uff4c\067\uff4c\076\uff4c\001\002" +
    "\000\004\021\uffbb\001\002\000\004\021\143\001\002\000" +
    "\020\003\072\004\053\005\051\006\064\007\063\022\uffb7" +
    "\076\074\001\002\000\004\022\145\001\002\000\006\013" +
    "\uffba\016\uffba\001\002\000\012\003\uffef\010\136\012\uffef" +
    "\076\uffef\001\002\000\004\076\150\001\002\000\064\003" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\052\uffed\053\uffed\055" +
    "\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed" +
    "\064\uffed\065\uffed\066\uffed\067\uffed\076\uffed\001\002\000" +
    "\052\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\013\uffd3" +
    "\016\uffd3\017\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\041\uffd3" +
    "\076\uffd3\001\002\000\004\021\153\001\002\000\020\003" +
    "\072\004\053\005\051\006\064\007\063\022\uffb7\076\074" +
    "\001\002\000\004\022\155\001\002\000\006\013\uffb8\016" +
    "\uffb8\001\002\000\104\002\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\037\uffd7\052\uffd7\053\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\066\uffd7\067\uffd7\001\002\000\052\003\uffbe\004" +
    "\uffbe\005\uffbe\006\uffbe\007\uffbe\013\uffbe\016\uffbe\017\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\041\uffbe\076\uffbe\001\002" +
    "\000\060\003\uffad\004\uffad\005\uffad\006\uffad\007\uffad\013" +
    "\uffad\016\uffad\017\uffad\021\uffad\041\uffad\042\uffad\043\uffad" +
    "\045\uffad\047\uffad\050\uffad\051\uffad\071\uffad\072\uffad\073" +
    "\uffad\074\uffad\075\uffad\076\uffad\077\uffad\001\002\000\052" +
    "\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae\013\uffae\016" +
    "\uffae\017\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\041\uffae\076" +
    "\uffae\001\002\000\060\003\214\004\053\005\051\006\064" +
    "\007\063\013\176\016\040\017\uff9e\021\170\041\216\042" +
    "\206\043\213\045\205\047\225\050\211\051\212\071\235" +
    "\072\221\073\175\074\177\075\165\076\074\077\204\001" +
    "\002\000\004\013\u01ac\001\002\000\056\010\uff6b\011\uff6b" +
    "\012\uff6b\013\uff6b\014\uff6b\015\uff6b\020\uff04\022\uff6b\023" +
    "\uff6b\052\uff6b\053\uff6b\055\uff6b\056\uff6b\057\uff6b\060\uff6b" +
    "\061\uff6b\062\uff6b\063\uff6b\064\uff6b\065\uff6b\066\uff6b\067" +
    "\uff6b\001\002\000\054\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\022\ufffb\023\ufffb\052\ufffb\053\ufffb\055" +
    "\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb" +
    "\064\ufffb\065\ufffb\066\ufffb\067\ufffb\001\002\000\060\003" +
    "\uff92\004\uff92\005\uff92\006\uff92\007\uff92\013\uff92\016\uff92" +
    "\017\uff92\021\uff92\041\uff92\042\uff92\043\uff92\045\uff92\047" +
    "\uff92\050\uff92\051\uff92\071\uff92\072\uff92\073\uff92\074\uff92" +
    "\075\uff92\076\uff92\077\uff92\001\002\000\004\020\u01a9\001" +
    "\002\000\054\003\uff70\004\uff70\005\uff70\006\uff70\007\uff70" +
    "\021\uff70\041\uff70\042\uff70\043\uff70\044\uff70\051\uff70\052" +
    "\uff70\053\uff70\054\uff70\071\uff70\072\uff70\073\uff70\074\uff70" +
    "\075\uff70\076\uff70\077\uff70\001\002\000\054\010\uff6f\011" +
    "\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f\022\uff6f\023\uff6f" +
    "\052\uff6f\053\uff6f\055\uff6f\056\uff6f\057\uff6f\060\uff6f\061" +
    "\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f\066\uff6f\067\uff6f" +
    "\001\002\000\052\011\uff71\012\uff71\013\uff71\014\uff71\015" +
    "\uff71\022\uff71\023\uff71\052\uff71\053\uff71\055\uff71\056\uff71" +
    "\057\uff71\060\uff71\061\uff71\062\uff71\063\uff71\064\uff71\065" +
    "\uff71\066\uff71\067\uff71\001\002\000\062\003\uff8c\004\uff8c" +
    "\005\uff8c\006\uff8c\007\uff8c\013\uff8c\016\uff8c\017\uff8c\021" +
    "\uff8c\041\uff8c\042\uff8c\043\uff8c\045\uff8c\046\uff8c\047\uff8c" +
    "\050\uff8c\051\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075" +
    "\uff8c\076\uff8c\077\uff8c\001\002\000\016\003\ufff2\010\320" +
    "\012\322\020\uff05\021\321\076\ufff2\001\002\000\054\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\022\ufffd" +
    "\023\ufffd\052\ufffd\053\ufffd\055\ufffd\056\ufffd\057\ufffd\060" +
    "\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd" +
    "\067\ufffd\001\002\000\062\003\uff88\004\uff88\005\uff88\006" +
    "\uff88\007\uff88\013\uff88\016\uff88\017\uff88\021\uff88\041\uff88" +
    "\042\uff88\043\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051" +
    "\uff88\071\uff88\072\uff88\073\uff88\074\uff88\075\uff88\076\uff88" +
    "\077\uff88\001\002\000\054\010\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\022\ufffc\023\ufffc\052\ufffc\053\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\001\002\000\062" +
    "\003\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b\013\uff8b\016" +
    "\uff8b\017\uff8b\021\uff8b\041\uff8b\042\uff8b\043\uff8b\045\uff8b" +
    "\046\uff8b\047\uff8b\050\uff8b\051\uff8b\071\uff8b\072\uff8b\073" +
    "\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\001\002\000\010" +
    "\003\ufff1\012\u012c\076\ufff1\001\002\000\004\013\uff86\001" +
    "\002\000\004\012\u0127\001\002\000\054\010\ufffa\011\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\015\ufffa\022\ufffa\023\ufffa\052" +
    "\ufffa\053\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\001" +
    "\002\000\006\003\u0169\021\u016a\001\002\000\054\010\uff6e" +
    "\011\uff6e\012\uff6e\013\uff6e\014\uff6e\015\uff6e\022\uff6e\023" +
    "\uff6e\052\uff6e\053\uff6e\055\uff6e\056\uff6e\057\uff6e\060\uff6e" +
    "\061\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e\066\uff6e\067" +
    "\uff6e\001\002\000\004\017\u0168\001\002\000\060\003\uff97" +
    "\004\uff97\005\uff97\006\uff97\007\uff97\013\uff97\016\uff97\017" +
    "\uff97\021\uff97\041\uff97\042\uff97\043\uff97\045\uff97\047\uff97" +
    "\050\uff97\051\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075" +
    "\uff97\076\uff97\077\uff97\001\002\000\056\003\uff74\004\uff74" +
    "\005\uff74\006\uff74\007\uff74\013\uff74\021\uff74\041\uff74\042" +
    "\uff74\043\uff74\044\uff74\051\uff74\052\uff74\053\uff74\054\uff74" +
    "\071\uff74\072\uff74\073\uff74\074\uff74\075\uff74\076\uff74\077" +
    "\uff74\001\002\000\014\004\053\005\051\006\064\007\063" +
    "\076\074\001\002\000\004\012\u0149\001\002\000\064\003" +
    "\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a\012\uff61\013\uff9a" +
    "\016\uff9a\017\u0146\020\uff07\021\uff9a\041\uff9a\042\uff9a\043" +
    "\uff9a\045\uff9a\047\uff9a\050\uff9a\051\uff9a\071\uff9a\072\uff9a" +
    "\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\001\002\000" +
    "\062\003\uff89\004\uff89\005\uff89\006\uff89\007\uff89\013\uff89" +
    "\016\uff89\017\uff89\021\uff89\041\uff89\042\uff89\043\uff89\045" +
    "\uff89\046\uff89\047\uff89\050\uff89\051\uff89\071\uff89\072\uff89" +
    "\073\uff89\074\uff89\075\uff89\076\uff89\077\uff89\001\002\000" +
    "\004\012\u0144\001\002\000\012\003\ufff9\010\134\012\u0124" +
    "\076\ufff9\001\002\000\010\010\uff6c\012\uff6c\013\uff84\001" +
    "\002\000\054\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\022\ufffe\023\ufffe\052\ufffe\053\ufffe\055\ufffe\056" +
    "\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe" +
    "\065\ufffe\066\ufffe\067\ufffe\001\002\000\054\010\u0141\011" +
    "\uff72\012\uff72\013\uff72\014\uff72\015\uff72\022\uff72\023\uff72" +
    "\052\uff72\053\uff72\055\uff72\056\uff72\057\uff72\060\uff72\061" +
    "\uff72\062\uff72\063\uff72\064\uff72\065\uff72\066\uff72\067\uff72" +
    "\001\002\000\060\003\uff90\004\uff90\005\uff90\006\uff90\007" +
    "\uff90\013\uff90\016\uff90\017\uff90\021\uff90\041\uff90\042\uff90" +
    "\043\uff90\045\uff90\047\uff90\050\uff90\051\uff90\071\uff90\072" +
    "\uff90\073\uff90\074\uff90\075\uff90\076\uff90\077\uff90\001\002" +
    "\000\010\010\uff6a\012\uff6a\013\uff85\001\002\000\006\003" +
    "\u0135\021\u0136\001\002\000\060\003\uff9c\004\uff9c\005\uff9c" +
    "\006\uff9c\007\uff9c\013\uff9c\016\uff9c\017\uff9c\021\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\045\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\077" +
    "\uff9c\001\002\000\060\003\uff98\004\uff98\005\uff98\006\uff98" +
    "\007\uff98\013\uff98\016\uff98\017\uff98\021\uff98\041\uff98\042" +
    "\uff98\043\uff98\045\uff98\047\uff98\050\uff98\051\uff98\071\uff98" +
    "\072\uff98\073\uff98\074\uff98\075\uff98\076\uff98\077\uff98\001" +
    "\002\000\060\003\uff93\004\uff93\005\uff93\006\uff93\007\uff93" +
    "\013\uff93\016\uff93\017\uff93\021\uff93\041\uff93\042\uff93\043" +
    "\uff93\045\uff93\047\uff93\050\uff93\051\uff93\071\uff93\072\uff93" +
    "\073\uff93\074\uff93\075\uff93\076\uff93\077\uff93\001\002\000" +
    "\062\003\uff8a\004\uff8a\005\uff8a\006\uff8a\007\uff8a\013\uff8a" +
    "\016\uff8a\017\uff8a\021\uff8a\041\uff8a\042\uff8a\043\uff8a\045" +
    "\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\071\uff8a\072\uff8a" +
    "\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a\001\002\000" +
    "\060\003\u0133\004\053\005\051\006\064\007\063\013\176" +
    "\016\040\017\uff9d\021\170\041\216\042\206\043\213\045" +
    "\205\047\225\050\211\051\212\071\235\072\221\073\175" +
    "\074\177\075\165\076\074\077\204\001\002\000\060\003" +
    "\uff91\004\uff91\005\uff91\006\uff91\007\uff91\013\uff91\016\uff91" +
    "\017\uff91\021\uff91\041\uff91\042\uff91\043\uff91\045\uff91\047" +
    "\uff91\050\uff91\051\uff91\071\uff91\072\uff91\073\uff91\074\uff91" +
    "\075\uff91\076\uff91\077\uff91\001\002\000\056\010\uff69\011" +
    "\uff69\012\uff69\013\uff69\014\uff69\015\uff69\020\uff03\022\uff69" +
    "\023\uff69\052\uff69\053\uff69\055\uff69\056\uff69\057\uff69\060" +
    "\uff69\061\uff69\062\uff69\063\uff69\064\uff69\065\uff69\066\uff69" +
    "\067\uff69\001\002\000\054\010\uffff\011\uffff\012\uffff\013" +
    "\uffff\014\uffff\015\uffff\022\uffff\023\uffff\052\uffff\053\uffff" +
    "\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063" +
    "\uffff\064\uffff\065\uffff\066\uffff\067\uffff\001\002\000\006" +
    "\003\237\076\076\001\002\000\006\013\uff95\015\uffc3\001" +
    "\002\000\010\013\uffc7\015\112\020\241\001\002\000\054" +
    "\003\257\004\053\005\051\006\064\007\063\021\170\041" +
    "\216\042\206\043\213\044\270\051\212\052\255\053\246" +
    "\054\250\071\235\072\221\073\175\074\177\075\165\076" +
    "\074\077\204\001\002\000\004\013\243\001\002\000\060" +
    "\003\uff96\004\uff96\005\uff96\006\uff96\007\uff96\013\uff96\016" +
    "\uff96\017\uff96\021\uff96\041\uff96\042\uff96\043\uff96\045\uff96" +
    "\047\uff96\050\uff96\051\uff96\071\uff96\072\uff96\073\uff96\074" +
    "\uff96\075\uff96\076\uff96\077\uff96\001\002\000\042\011\uff2e" +
    "\013\uff2e\015\uff2e\022\uff2e\023\uff2e\052\352\053\353\057" +
    "\uff2e\060\uff2e\061\uff2e\062\uff2e\063\uff2e\064\uff2e\065\uff2e" +
    "\066\uff2e\067\uff2e\001\002\000\022\011\uff14\013\uff14\015" +
    "\uff14\022\uff14\023\uff14\065\u0109\066\uff14\067\uff14\001\002" +
    "\000\054\003\311\004\053\005\051\006\064\007\063\021" +
    "\170\041\216\042\206\043\213\044\270\051\212\052\255" +
    "\053\246\054\250\071\235\072\221\073\175\074\177\075" +
    "\165\076\074\077\204\001\002\000\060\010\320\011\uff42" +
    "\012\322\013\uff42\014\uff42\015\uff42\020\uff05\021\321\022" +
    "\uff42\023\uff42\052\uff42\053\uff42\055\uff42\056\uff42\057\uff42" +
    "\060\uff42\061\uff42\062\uff42\063\uff42\064\uff42\065\uff42\066" +
    "\uff42\067\uff42\001\002\000\054\003\uff40\004\uff40\005\uff40" +
    "\006\uff40\007\uff40\021\uff40\041\uff40\042\uff40\043\uff40\044" +
    "\uff40\051\uff40\052\uff40\053\uff40\054\uff40\071\uff40\072\uff40" +
    "\073\uff40\074\uff40\075\uff40\076\uff40\077\uff40\001\002\000" +
    "\026\011\uff19\013\uff19\015\uff19\022\uff19\023\uff19\063\u0103" +
    "\064\u0102\065\uff19\066\uff19\067\uff19\001\002\000\004\012" +
    "\u012c\001\002\000\014\011\uff09\013\uff09\015\uff09\022\uff09" +
    "\023\uff09\001\002\000\052\011\uff43\012\u0127\013\uff43\014" +
    "\uff43\015\uff43\022\uff43\023\uff43\052\uff43\053\uff43\055\uff43" +
    "\056\uff43\057\uff43\060\uff43\061\uff43\062\uff43\063\uff43\064" +
    "\uff43\065\uff43\066\uff43\067\uff43\001\002\000\054\003\311" +
    "\004\053\005\051\006\064\007\063\021\170\041\216\042" +
    "\206\043\213\044\270\051\212\052\255\053\246\054\250" +
    "\071\235\072\221\073\175\074\177\075\165\076\074\077" +
    "\204\001\002\000\050\011\uff3b\013\uff3b\014\uff3b\015\uff3b" +
    "\022\uff3b\023\uff3b\052\uff3b\053\uff3b\055\uff3b\056\uff3b\057" +
    "\uff3b\060\uff3b\061\uff3b\062\uff3b\063\uff3b\064\uff3b\065\uff3b" +
    "\066\uff3b\067\uff3b\001\002\000\036\012\uff61\014\uff37\020" +
    "\uff07\055\uff35\056\uff33\057\uff29\060\uff27\061\uff25\062\uff23" +
    "\063\uff1e\064\uff1c\065\uff17\066\uff12\067\uff0c\001\002\000" +
    "\014\011\uff0a\013\uff0a\015\uff0a\022\uff0a\023\uff0a\001\002" +
    "\000\050\011\uff3f\013\uff3f\014\uff3f\015\uff3f\022\uff3f\023" +
    "\uff3f\052\uff3f\053\uff3f\055\uff3f\056\uff3f\057\uff3f\060\uff3f" +
    "\061\uff3f\062\uff3f\063\uff3f\064\uff3f\065\uff3f\066\uff3f\067" +
    "\uff3f\001\002\000\006\010\134\012\u0124\001\002\000\020" +
    "\011\uff0e\013\uff0e\015\uff0e\022\uff0e\023\uff0e\066\u0111\067" +
    "\u011d\001\002\000\054\010\uff6c\011\uff6c\012\uff6c\013\uff6c" +
    "\014\uff6c\015\uff6c\022\uff6c\023\uff6c\052\uff6c\053\uff6c\055" +
    "\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c\063\uff6c" +
    "\064\uff6c\065\uff6c\066\uff6c\067\uff6c\001\002\000\004\013" +
    "\uffc6\001\002\000\054\010\uff6a\011\uff6a\012\uff6a\013\uff6a" +
    "\014\uff6a\015\uff6a\022\uff6a\023\uff6a\052\uff6a\053\uff6a\055" +
    "\uff6a\056\uff6a\057\uff6a\060\uff6a\061\uff6a\062\uff6a\063\uff6a" +
    "\064\uff6a\065\uff6a\066\uff6a\067\uff6a\001\002\000\050\011" +
    "\uff31\013\uff31\014\356\015\uff31\022\uff31\023\uff31\052\uff31" +
    "\053\uff31\055\357\056\355\057\uff31\060\uff31\061\uff31\062" +
    "\uff31\063\uff31\064\uff31\065\uff31\066\uff31\067\uff31\001\002" +
    "\000\004\076\074\001\002\000\036\011\uff21\013\uff21\015" +
    "\uff21\022\uff21\023\uff21\057\272\060\274\061\275\062\273" +
    "\063\uff21\064\uff21\065\uff21\066\uff21\067\uff21\001\002\000" +
    "\054\003\301\004\053\005\051\006\064\007\063\021\170" +
    "\041\216\042\206\043\213\044\270\051\212\052\255\053" +
    "\246\054\250\071\235\072\221\073\175\074\177\075\165" +
    "\076\074\077\204\001\002\000\054\003\301\004\053\005" +
    "\051\006\064\007\063\021\170\041\216\042\206\043\213" +
    "\044\270\051\212\052\255\053\246\054\250\071\235\072" +
    "\221\073\175\074\177\075\165\076\074\077\204\001\002" +
    "\000\054\003\301\004\053\005\051\006\064\007\063\021" +
    "\170\041\216\042\206\043\213\044\270\051\212\052\255" +
    "\053\246\054\250\071\235\072\221\073\175\074\177\075" +
    "\165\076\074\077\204\001\002\000\054\003\301\004\053" +
    "\005\051\006\064\007\063\021\170\041\216\042\206\043" +
    "\213\044\270\051\212\052\255\053\246\054\250\071\235" +
    "\072\221\073\175\074\177\075\165\076\074\077\204\001" +
    "\002\000\054\010\uff6b\011\uff6b\012\uff6b\013\uff6b\014\uff6b" +
    "\015\uff6b\022\uff6b\023\uff6b\052\uff6b\053\uff6b\055\uff6b\056" +
    "\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b\063\uff6b\064\uff6b" +
    "\065\uff6b\066\uff6b\067\uff6b\001\002\000\042\011\uff2b\013" +
    "\uff2b\015\uff2b\022\uff2b\023\uff2b\052\352\053\353\057\uff2b" +
    "\060\uff2b\061\uff2b\062\uff2b\063\uff2b\064\uff2b\065\uff2b\066" +
    "\uff2b\067\uff2b\001\002\000\056\010\320\011\uff42\012\322" +
    "\013\uff42\014\uff42\015\uff42\021\321\022\uff42\023\uff42\052" +
    "\uff42\053\uff42\055\uff42\056\uff42\057\uff42\060\uff42\061\uff42" +
    "\062\uff42\063\uff42\064\uff42\065\uff42\066\uff42\067\uff42\001" +
    "\002\000\012\012\uff61\014\uff37\055\uff35\056\uff33\001\002" +
    "\000\054\010\uff69\011\uff69\012\uff69\013\uff69\014\uff69\015" +
    "\uff69\022\uff69\023\uff69\052\uff69\053\uff69\055\uff69\056\uff69" +
    "\057\uff69\060\uff69\061\uff69\062\uff69\063\uff69\064\uff69\065" +
    "\uff69\066\uff69\067\uff69\001\002\000\004\014\316\001\002" +
    "\000\004\012\314\001\002\000\004\056\312\001\002\000" +
    "\004\055\307\001\002\000\054\003\311\004\053\005\051" +
    "\006\064\007\063\021\170\041\216\042\206\043\213\044" +
    "\270\051\212\052\255\053\246\054\250\071\235\072\221" +
    "\073\175\074\177\075\165\076\074\077\204\001\002\000" +
    "\050\011\uff34\013\uff34\014\uff34\015\uff34\022\uff34\023\uff34" +
    "\052\uff34\053\uff34\055\uff34\056\uff34\057\uff34\060\uff34\061" +
    "\uff34\062\uff34\063\uff34\064\uff34\065\uff34\066\uff34\067\uff34" +
    "\001\002\000\004\012\uff61\001\002\000\054\003\311\004" +
    "\053\005\051\006\064\007\063\021\170\041\216\042\206" +
    "\043\213\044\270\051\212\052\255\053\246\054\250\071" +
    "\235\072\221\073\175\074\177\075\165\076\074\077\204" +
    "\001\002\000\050\011\uff32\013\uff32\014\uff32\015\uff32\022" +
    "\uff32\023\uff32\052\uff32\053\uff32\055\uff32\056\uff32\057\uff32" +
    "\060\uff32\061\uff32\062\uff32\063\uff32\064\uff32\065\uff32\066" +
    "\uff32\067\uff32\001\002\000\004\042\315\001\002\000\054" +
    "\010\uff60\011\uff60\012\uff60\013\uff60\014\uff60\015\uff60\022" +
    "\uff60\023\uff60\052\uff60\053\uff60\055\uff60\056\uff60\057\uff60" +
    "\060\uff60\061\uff60\062\uff60\063\uff60\064\uff60\065\uff60\066" +
    "\uff60\067\uff60\001\002\000\054\003\311\004\053\005\051" +
    "\006\064\007\063\021\170\041\216\042\206\043\213\044" +
    "\270\051\212\052\255\053\246\054\250\071\235\072\221" +
    "\073\175\074\177\075\165\076\074\077\204\001\002\000" +
    "\050\011\uff36\013\uff36\014\uff36\015\uff36\022\uff36\023\uff36" +
    "\052\uff36\053\uff36\055\uff36\056\uff36\057\uff36\060\uff36\061" +
    "\uff36\062\uff36\063\uff36\064\uff36\065\uff36\066\uff36\067\uff36" +
    "\001\002\000\056\003\257\004\053\005\051\006\064\007" +
    "\063\011\140\021\170\041\216\042\206\043\213\044\270" +
    "\051\212\052\255\053\246\054\250\071\235\072\221\073" +
    "\175\074\177\075\165\076\074\077\204\001\002\000\056" +
    "\003\327\004\053\005\051\006\064\007\063\021\170\022" +
    "\uff5b\041\216\042\206\043\213\044\270\051\212\052\255" +
    "\053\246\054\250\071\235\072\221\073\175\074\177\075" +
    "\165\076\074\077\204\001\002\000\010\037\324\042\323" +
    "\076\150\001\002\000\054\010\uff64\011\uff64\012\uff64\013" +
    "\uff64\014\uff64\015\uff64\022\uff64\023\uff64\052\uff64\053\uff64" +
    "\055\uff64\056\uff64\057\uff64\060\uff64\061\uff64\062\uff64\063" +
    "\uff64\064\uff64\065\uff64\066\uff64\067\uff64\001\002\000\054" +
    "\010\uff65\011\uff65\012\uff65\013\uff65\014\uff65\015\uff65\022" +
    "\uff65\023\uff65\052\uff65\053\uff65\055\uff65\056\uff65\057\uff65" +
    "\060\uff65\061\uff65\062\uff65\063\uff65\064\uff65\065\uff65\066" +
    "\uff65\067\uff65\001\002\000\004\022\u0116\001\002\000\006" +
    "\015\uff59\022\uff59\001\002\000\110\003\uff57\004\uff57\005" +
    "\uff57\006\uff57\007\uff57\012\uff61\014\uff37\020\uff07\021\uff57" +
    "\041\uff57\042\uff57\043\uff57\044\uff57\051\uff57\052\uff57\053" +
    "\uff57\054\uff57\055\uff35\056\uff33\057\uff29\060\uff27\061\uff25" +
    "\062\uff23\063\uff1e\064\uff1c\065\uff17\066\uff12\067\uff0c\071" +
    "\uff57\072\uff57\073\uff57\074\uff57\075\uff57\076\uff57\077\uff57" +
    "\001\002\000\006\015\332\022\uff5a\001\002\000\014\011" +
    "\uff00\013\uff00\015\uff00\022\uff00\023\uff00\001\002\000\054" +
    "\003\257\004\053\005\051\006\064\007\063\021\170\041" +
    "\216\042\206\043\213\044\270\051\212\052\255\053\246" +
    "\054\250\071\235\072\221\073\175\074\177\075\165\076" +
    "\074\077\204\001\002\000\006\015\uff58\022\uff58\001\002" +
    "\000\004\020\u0114\001\002\000\004\067\u010c\001\002\000" +
    "\004\066\u0106\001\002\000\004\065\377\001\002\000\004" +
    "\063\375\001\002\000\004\064\372\001\002\000\004\062" +
    "\370\001\002\000\004\061\366\001\002\000\004\060\364" +
    "\001\002\000\004\057\350\001\002\000\054\003\257\004" +
    "\053\005\051\006\064\007\063\021\170\041\216\042\206" +
    "\043\213\044\270\051\212\052\255\053\246\054\250\071" +
    "\235\072\221\073\175\074\177\075\165\076\074\077\204" +
    "\001\002\000\006\015\uff56\022\uff56\001\002\000\054\003" +
    "\301\004\053\005\051\006\064\007\063\021\170\041\216" +
    "\042\206\043\213\044\270\051\212\052\255\053\246\054" +
    "\250\071\235\072\221\073\175\074\177\075\165\076\074" +
    "\077\204\001\002\000\042\011\uff28\013\uff28\015\uff28\022" +
    "\uff28\023\uff28\052\352\053\353\057\uff28\060\uff28\061\uff28" +
    "\062\uff28\063\uff28\064\uff28\065\uff28\066\uff28\067\uff28\001" +
    "\002\000\054\003\301\004\053\005\051\006\064\007\063" +
    "\021\170\041\216\042\206\043\213\044\270\051\212\052" +
    "\255\053\246\054\250\071\235\072\221\073\175\074\177" +
    "\075\165\076\074\077\204\001\002\000\054\003\301\004" +
    "\053\005\051\006\064\007\063\021\170\041\216\042\206" +
    "\043\213\044\270\051\212\052\255\053\246\054\250\071" +
    "\235\072\221\073\175\074\177\075\165\076\074\077\204" +
    "\001\002\000\050\011\uff2f\013\uff2f\014\356\015\uff2f\022" +
    "\uff2f\023\uff2f\052\uff2f\053\uff2f\055\357\056\355\057\uff2f" +
    "\060\uff2f\061\uff2f\062\uff2f\063\uff2f\064\uff2f\065\uff2f\066" +
    "\uff2f\067\uff2f\001\002\000\054\003\311\004\053\005\051" +
    "\006\064\007\063\021\170\041\216\042\206\043\213\044" +
    "\270\051\212\052\255\053\246\054\250\071\235\072\221" +
    "\073\175\074\177\075\165\076\074\077\204\001\002\000" +
    "\054\003\311\004\053\005\051\006\064\007\063\021\170" +
    "\041\216\042\206\043\213\044\270\051\212\052\255\053" +
    "\246\054\250\071\235\072\221\073\175\074\177\075\165" +
    "\076\074\077\204\001\002\000\054\003\311\004\053\005" +
    "\051\006\064\007\063\021\170\041\216\042\206\043\213" +
    "\044\270\051\212\052\255\053\246\054\250\071\235\072" +
    "\221\073\175\074\177\075\165\076\074\077\204\001\002" +
    "\000\050\011\uff39\013\uff39\014\uff39\015\uff39\022\uff39\023" +
    "\uff39\052\uff39\053\uff39\055\uff39\056\uff39\057\uff39\060\uff39" +
    "\061\uff39\062\uff39\063\uff39\064\uff39\065\uff39\066\uff39\067" +
    "\uff39\001\002\000\050\011\uff3a\013\uff3a\014\uff3a\015\uff3a" +
    "\022\uff3a\023\uff3a\052\uff3a\053\uff3a\055\uff3a\056\uff3a\057" +
    "\uff3a\060\uff3a\061\uff3a\062\uff3a\063\uff3a\064\uff3a\065\uff3a" +
    "\066\uff3a\067\uff3a\001\002\000\050\011\uff38\013\uff38\014" +
    "\uff38\015\uff38\022\uff38\023\uff38\052\uff38\053\uff38\055\uff38" +
    "\056\uff38\057\uff38\060\uff38\061\uff38\062\uff38\063\uff38\064" +
    "\uff38\065\uff38\066\uff38\067\uff38\001\002\000\050\011\uff30" +
    "\013\uff30\014\356\015\uff30\022\uff30\023\uff30\052\uff30\053" +
    "\uff30\055\357\056\355\057\uff30\060\uff30\061\uff30\062\uff30" +
    "\063\uff30\064\uff30\065\uff30\066\uff30\067\uff30\001\002\000" +
    "\054\003\301\004\053\005\051\006\064\007\063\021\170" +
    "\041\216\042\206\043\213\044\270\051\212\052\255\053" +
    "\246\054\250\071\235\072\221\073\175\074\177\075\165" +
    "\076\074\077\204\001\002\000\042\011\uff26\013\uff26\015" +
    "\uff26\022\uff26\023\uff26\052\352\053\353\057\uff26\060\uff26" +
    "\061\uff26\062\uff26\063\uff26\064\uff26\065\uff26\066\uff26\067" +
    "\uff26\001\002\000\054\003\301\004\053\005\051\006\064" +
    "\007\063\021\170\041\216\042\206\043\213\044\270\051" +
    "\212\052\255\053\246\054\250\071\235\072\221\073\175" +
    "\074\177\075\165\076\074\077\204\001\002\000\042\011" +
    "\uff24\013\uff24\015\uff24\022\uff24\023\uff24\052\352\053\353" +
    "\057\uff24\060\uff24\061\uff24\062\uff24\063\uff24\064\uff24\065" +
    "\uff24\066\uff24\067\uff24\001\002\000\054\003\301\004\053" +
    "\005\051\006\064\007\063\021\170\041\216\042\206\043" +
    "\213\044\270\051\212\052\255\053\246\054\250\071\235" +
    "\072\221\073\175\074\177\075\165\076\074\077\204\001" +
    "\002\000\042\011\uff22\013\uff22\015\uff22\022\uff22\023\uff22" +
    "\052\352\053\353\057\uff22\060\uff22\061\uff22\062\uff22\063" +
    "\uff22\064\uff22\065\uff22\066\uff22\067\uff22\001\002\000\054" +
    "\003\373\004\053\005\051\006\064\007\063\021\170\041" +
    "\216\042\206\043\213\044\270\051\212\052\255\053\246" +
    "\054\250\071\235\072\221\073\175\074\177\075\165\076" +
    "\074\077\204\001\002\000\022\012\uff61\014\uff37\055\uff35" +
    "\056\uff33\057\uff29\060\uff27\061\uff25\062\uff23\001\002\000" +
    "\036\011\uff1b\013\uff1b\015\uff1b\022\uff1b\023\uff1b\057\272" +
    "\060\274\061\275\062\273\063\uff1b\064\uff1b\065\uff1b\066" +
    "\uff1b\067\uff1b\001\002\000\054\003\373\004\053\005\051" +
    "\006\064\007\063\021\170\041\216\042\206\043\213\044" +
    "\270\051\212\052\255\053\246\054\250\071\235\072\221" +
    "\073\175\074\177\075\165\076\074\077\204\001\002\000" +
    "\036\011\uff1d\013\uff1d\015\uff1d\022\uff1d\023\uff1d\057\272" +
    "\060\274\061\275\062\273\063\uff1d\064\uff1d\065\uff1d\066" +
    "\uff1d\067\uff1d\001\002\000\054\003\u0101\004\053\005\051" +
    "\006\064\007\063\021\170\041\216\042\206\043\213\044" +
    "\270\051\212\052\255\053\246\054\250\071\235\072\221" +
    "\073\175\074\177\075\165\076\074\077\204\001\002\000" +
    "\026\011\uff16\013\uff16\015\uff16\022\uff16\023\uff16\063\u0103" +
    "\064\u0102\065\uff16\066\uff16\067\uff16\001\002\000\026\012" +
    "\uff61\014\uff37\055\uff35\056\uff33\057\uff29\060\uff27\061\uff25" +
    "\062\uff23\063\uff1e\064\uff1c\001\002\000\054\003\373\004" +
    "\053\005\051\006\064\007\063\021\170\041\216\042\206" +
    "\043\213\044\270\051\212\052\255\053\246\054\250\071" +
    "\235\072\221\073\175\074\177\075\165\076\074\077\204" +
    "\001\002\000\054\003\373\004\053\005\051\006\064\007" +
    "\063\021\170\041\216\042\206\043\213\044\270\051\212" +
    "\052\255\053\246\054\250\071\235\072\221\073\175\074" +
    "\177\075\165\076\074\077\204\001\002\000\036\011\uff20" +
    "\013\uff20\015\uff20\022\uff20\023\uff20\057\272\060\274\061" +
    "\275\062\273\063\uff20\064\uff20\065\uff20\066\uff20\067\uff20" +
    "\001\002\000\036\011\uff1f\013\uff1f\015\uff1f\022\uff1f\023" +
    "\uff1f\057\272\060\274\061\275\062\273\063\uff1f\064\uff1f" +
    "\065\uff1f\066\uff1f\067\uff1f\001\002\000\054\003\u0108\004" +
    "\053\005\051\006\064\007\063\021\170\041\216\042\206" +
    "\043\213\044\270\051\212\052\255\053\246\054\250\071" +
    "\235\072\221\073\175\074\177\075\165\076\074\077\204" +
    "\001\002\000\022\011\uff11\013\uff11\015\uff11\022\uff11\023" +
    "\uff11\065\u0109\066\uff11\067\uff11\001\002\000\030\012\uff61" +
    "\014\uff37\055\uff35\056\uff33\057\uff29\060\uff27\061\uff25\062" +
    "\uff23\063\uff1e\064\uff1c\065\uff17\001\002\000\054\003\uff1a" +
    "\004\uff1a\005\uff1a\006\uff1a\007\uff1a\021\uff1a\041\uff1a\042" +
    "\uff1a\043\uff1a\044\uff1a\051\uff1a\052\uff1a\053\uff1a\054\uff1a" +
    "\071\uff1a\072\uff1a\073\uff1a\074\uff1a\075\uff1a\076\uff1a\077" +
    "\uff1a\001\002\000\054\003\u0101\004\053\005\051\006\064" +
    "\007\063\021\170\041\216\042\206\043\213\044\270\051" +
    "\212\052\255\053\246\054\250\071\235\072\221\073\175" +
    "\074\177\075\165\076\074\077\204\001\002\000\026\011" +
    "\uff18\013\uff18\015\uff18\022\uff18\023\uff18\063\u0103\064\u0102" +
    "\065\uff18\066\uff18\067\uff18\001\002\000\054\003\257\004" +
    "\053\005\051\006\064\007\063\021\170\041\216\042\206" +
    "\043\213\044\270\051\212\052\255\053\246\054\250\071" +
    "\235\072\221\073\175\074\177\075\165\076\074\077\204" +
    "\001\002\000\004\023\u010e\001\002\000\054\003\u010f\004" +
    "\053\005\051\006\064\007\063\021\170\041\216\042\206" +
    "\043\213\044\270\051\212\052\255\053\246\054\250\071" +
    "\235\072\221\073\175\074\177\075\165\076\074\077\204" +
    "\001\002\000\032\012\uff61\014\uff37\055\uff35\056\uff33\057" +
    "\uff29\060\uff27\061\uff25\062\uff23\063\uff1e\064\uff1c\065\uff17" +
    "\066\uff12\001\002\000\016\011\uff0b\013\uff0b\015\uff0b\022" +
    "\uff0b\023\uff0b\066\u0111\001\002\000\054\003\uff15\004\uff15" +
    "\005\uff15\006\uff15\007\uff15\021\uff15\041\uff15\042\uff15\043" +
    "\uff15\044\uff15\051\uff15\052\uff15\053\uff15\054\uff15\071\uff15" +
    "\072\uff15\073\uff15\074\uff15\075\uff15\076\uff15\077\uff15\001" +
    "\002\000\054\003\u0108\004\053\005\051\006\064\007\063" +
    "\021\170\041\216\042\206\043\213\044\270\051\212\052" +
    "\255\053\246\054\250\071\235\072\221\073\175\074\177" +
    "\075\165\076\074\077\204\001\002\000\022\011\uff13\013" +
    "\uff13\015\uff13\022\uff13\023\uff13\065\u0109\066\uff13\067\uff13" +
    "\001\002\000\054\003\257\004\053\005\051\006\064\007" +
    "\063\021\170\041\216\042\206\043\213\044\270\051\212" +
    "\052\255\053\246\054\250\071\235\072\221\073\175\074" +
    "\177\075\165\076\074\077\204\001\002\000\014\011\uff06" +
    "\013\uff06\015\uff06\022\uff06\023\uff06\001\002\000\054\010" +
    "\uff48\011\uff48\012\uff48\013\uff48\014\uff48\015\uff48\022\uff48" +
    "\023\uff48\052\uff48\053\uff48\055\uff48\056\uff48\057\uff48\060" +
    "\uff48\061\uff48\062\uff48\063\uff48\064\uff48\065\uff48\066\uff48" +
    "\067\uff48\001\002\000\004\011\u0118\001\002\000\056\010" +
    "\uff45\011\uff45\012\uff45\013\uff45\014\uff45\015\uff45\020\uff45" +
    "\022\uff45\023\uff45\052\uff45\053\uff45\055\uff45\056\uff45\057" +
    "\uff45\060\uff45\061\uff45\062\uff45\063\uff45\064\uff45\065\uff45" +
    "\066\uff45\067\uff45\001\002\000\042\011\uff2c\013\uff2c\015" +
    "\uff2c\022\uff2c\023\uff2c\052\352\053\353\057\uff2c\060\uff2c" +
    "\061\uff2c\062\uff2c\063\uff2c\064\uff2c\065\uff2c\066\uff2c\067" +
    "\uff2c\001\002\000\042\011\uff2a\013\uff2a\015\uff2a\022\uff2a" +
    "\023\uff2a\052\352\053\353\057\uff2a\060\uff2a\061\uff2a\062" +
    "\uff2a\063\uff2a\064\uff2a\065\uff2a\066\uff2a\067\uff2a\001\002" +
    "\000\042\011\uff2d\013\uff2d\015\uff2d\022\uff2d\023\uff2d\052" +
    "\352\053\353\057\uff2d\060\uff2d\061\uff2d\062\uff2d\063\uff2d" +
    "\064\uff2d\065\uff2d\066\uff2d\067\uff2d\001\002\000\052\011" +
    "\uff41\012\147\013\uff41\014\uff41\015\uff41\022\uff41\023\uff41" +
    "\052\uff41\053\uff41\055\uff41\056\uff41\057\uff41\060\uff41\061" +
    "\uff41\062\uff41\063\uff41\064\uff41\065\uff41\066\uff41\067\uff41" +
    "\001\002\000\054\003\uff10\004\uff10\005\uff10\006\uff10\007" +
    "\uff10\021\uff10\041\uff10\042\uff10\043\uff10\044\uff10\051\uff10" +
    "\052\uff10\053\uff10\054\uff10\071\uff10\072\uff10\073\uff10\074" +
    "\uff10\075\uff10\076\uff10\077\uff10\001\002\000\054\003\257" +
    "\004\053\005\051\006\064\007\063\021\170\041\216\042" +
    "\206\043\213\044\270\051\212\052\255\053\246\054\250" +
    "\071\235\072\221\073\175\074\177\075\165\076\074\077" +
    "\204\001\002\000\004\023\u0120\001\002\000\054\003\uff0f" +
    "\004\uff0f\005\uff0f\006\uff0f\007\uff0f\021\uff0f\041\uff0f\042" +
    "\uff0f\043\uff0f\044\uff0f\051\uff0f\052\uff0f\053\uff0f\054\uff0f" +
    "\071\uff0f\072\uff0f\073\uff0f\074\uff0f\075\uff0f\076\uff0f\077" +
    "\uff0f\001\002\000\054\003\u0122\004\053\005\051\006\064" +
    "\007\063\021\170\041\216\042\206\043\213\044\270\051" +
    "\212\052\255\053\246\054\250\071\235\072\221\073\175" +
    "\074\177\075\165\076\074\077\204\001\002\000\034\012" +
    "\uff61\014\uff37\055\uff35\056\uff33\057\uff29\060\uff27\061\uff25" +
    "\062\uff23\063\uff1e\064\uff1c\065\uff17\066\uff12\067\uff0c\001" +
    "\002\000\014\011\uff0d\013\uff0d\015\uff0d\022\uff0d\023\uff0d" +
    "\001\002\000\004\037\u0125\001\002\000\054\010\uff68\011" +
    "\uff68\012\uff68\013\uff68\014\uff68\015\uff68\022\uff68\023\uff68" +
    "\052\uff68\053\uff68\055\uff68\056\uff68\057\uff68\060\uff68\061" +
    "\uff68\062\uff68\063\uff68\064\uff68\065\uff68\066\uff68\067\uff68" +
    "\001\002\000\050\011\uff3d\013\uff3d\014\uff3d\015\uff3d\022" +
    "\uff3d\023\uff3d\052\uff3d\053\uff3d\055\uff3d\056\uff3d\057\uff3d" +
    "\060\uff3d\061\uff3d\062\uff3d\063\uff3d\064\uff3d\065\uff3d\066" +
    "\uff3d\067\uff3d\001\002\000\004\076\u0128\001\002\000\060" +
    "\010\uff4a\011\uff4a\012\uff4a\013\uff4a\014\uff4a\015\uff4a\020" +
    "\uff4a\021\u0129\022\uff4a\023\uff4a\052\uff4a\053\uff4a\055\uff4a" +
    "\056\uff4a\057\uff4a\060\uff4a\061\uff4a\062\uff4a\063\uff4a\064" +
    "\uff4a\065\uff4a\066\uff4a\067\uff4a\001\002\000\056\003\327" +
    "\004\053\005\051\006\064\007\063\021\170\022\uff5b\041" +
    "\216\042\206\043\213\044\270\051\212\052\255\053\246" +
    "\054\250\071\235\072\221\073\175\074\177\075\165\076" +
    "\074\077\204\001\002\000\004\022\u012b\001\002\000\054" +
    "\010\uff47\011\uff47\012\uff47\013\uff47\014\uff47\015\uff47\022" +
    "\uff47\023\uff47\052\uff47\053\uff47\055\uff47\056\uff47\057\uff47" +
    "\060\uff47\061\uff47\062\uff47\063\uff47\064\uff47\065\uff47\066" +
    "\uff47\067\uff47\001\002\000\004\037\u012d\001\002\000\054" +
    "\010\uff66\011\uff66\012\uff66\013\uff66\014\uff66\015\uff66\022" +
    "\uff66\023\uff66\052\uff66\053\uff66\055\uff66\056\uff66\057\uff66" +
    "\060\uff66\061\uff66\062\uff66\063\uff66\064\uff66\065\uff66\066" +
    "\uff66\067\uff66\001\002\000\054\003\311\004\053\005\051" +
    "\006\064\007\063\021\170\041\216\042\206\043\213\044" +
    "\270\051\212\052\255\053\246\054\250\071\235\072\221" +
    "\073\175\074\177\075\165\076\074\077\204\001\002\000" +
    "\050\011\uff3e\013\uff3e\014\uff3e\015\uff3e\022\uff3e\023\uff3e" +
    "\052\uff3e\053\uff3e\055\uff3e\056\uff3e\057\uff3e\060\uff3e\061" +
    "\uff3e\062\uff3e\063\uff3e\064\uff3e\065\uff3e\066\uff3e\067\uff3e" +
    "\001\002\000\050\011\uff3c\013\uff3c\014\uff3c\015\uff3c\022" +
    "\uff3c\023\uff3c\052\uff3c\053\uff3c\055\uff3c\056\uff3c\057\uff3c" +
    "\060\uff3c\061\uff3c\062\uff3c\063\uff3c\064\uff3c\065\uff3c\066" +
    "\uff3c\067\uff3c\001\002\000\004\013\u0132\001\002\000\060" +
    "\003\uff94\004\uff94\005\uff94\006\uff94\007\uff94\013\uff94\016" +
    "\uff94\017\uff94\021\uff94\041\uff94\042\uff94\043\uff94\045\uff94" +
    "\047\uff94\050\uff94\051\uff94\071\uff94\072\uff94\073\uff94\074" +
    "\uff94\075\uff94\076\uff94\077\uff94\001\002\000\006\012\uff61" +
    "\020\uff07\001\002\000\060\003\uff9b\004\uff9b\005\uff9b\006" +
    "\uff9b\007\uff9b\013\uff9b\016\uff9b\017\uff9b\021\uff9b\041\uff9b" +
    "\042\uff9b\043\uff9b\045\uff9b\047\uff9b\050\uff9b\051\uff9b\071" +
    "\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b" +
    "\001\002\000\004\022\uff77\001\002\000\054\003\uff80\004" +
    "\uff80\005\uff80\006\uff80\007\uff80\021\uff80\041\uff80\042\uff80" +
    "\043\uff80\044\uff80\051\uff80\052\uff80\053\uff80\054\uff80\071" +
    "\uff80\072\uff80\073\uff80\074\uff80\075\uff80\076\uff80\077\uff80" +
    "\001\002\000\054\003\257\004\053\005\051\006\064\007" +
    "\063\021\170\041\216\042\206\043\213\044\270\051\212" +
    "\052\255\053\246\054\250\071\235\072\221\073\175\074" +
    "\177\075\165\076\074\077\204\001\002\000\004\022\uff82" +
    "\001\002\000\004\022\u013a\001\002\000\056\003\u0133\004" +
    "\053\005\051\006\064\007\063\013\176\016\040\021\170" +
    "\041\216\042\206\043\213\045\205\047\225\050\211\051" +
    "\212\071\235\072\221\073\175\074\177\075\165\076\074" +
    "\077\204\001\002\000\012\010\320\012\322\020\uff05\021" +
    "\321\001\002\000\060\003\uff78\004\uff78\005\uff78\006\uff78" +
    "\007\uff78\013\uff78\016\uff78\017\uff78\021\uff78\041\uff78\042" +
    "\uff78\043\uff78\045\uff78\047\uff78\050\uff78\051\uff78\071\uff78" +
    "\072\uff78\073\uff78\074\uff78\075\uff78\076\uff78\077\uff78\001" +
    "\002\000\004\022\uff82\001\002\000\004\022\u013f\001\002" +
    "\000\056\003\u0133\004\053\005\051\006\064\007\063\013" +
    "\176\016\040\021\170\041\216\042\206\043\213\045\205" +
    "\047\225\050\211\051\212\071\235\072\221\073\175\074" +
    "\177\075\165\076\074\077\204\001\002\000\060\003\uff76" +
    "\004\uff76\005\uff76\006\uff76\007\uff76\013\uff76\016\uff76\017" +
    "\uff76\021\uff76\041\uff76\042\uff76\043\uff76\045\uff76\047\uff76" +
    "\050\uff76\051\uff76\071\uff76\072\uff76\073\uff76\074\uff76\075" +
    "\uff76\076\uff76\077\uff76\001\002\000\054\003\257\004\053" +
    "\005\051\006\064\007\063\021\170\041\216\042\206\043" +
    "\213\044\270\051\212\052\255\053\246\054\250\071\235" +
    "\072\221\073\175\074\177\075\165\076\074\077\204\001" +
    "\002\000\004\011\u0143\001\002\000\056\010\uff44\011\uff44" +
    "\012\uff44\013\uff44\014\uff44\015\uff44\020\uff44\022\uff44\023" +
    "\uff44\052\uff44\053\uff44\055\uff44\056\uff44\057\uff44\060\uff44" +
    "\061\uff44\062\uff44\063\uff44\064\uff44\065\uff44\066\uff44\067" +
    "\uff44\001\002\000\004\037\u0145\001\002\000\054\010\uff67" +
    "\011\uff67\012\uff67\013\uff67\014\uff67\015\uff67\022\uff67\023" +
    "\uff67\052\uff67\053\uff67\055\uff67\056\uff67\057\uff67\060\uff67" +
    "\061\uff67\062\uff67\063\uff67\064\uff67\065\uff67\066\uff67\067" +
    "\uff67\001\002\000\052\003\uffaf\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\013\uffaf\016\uffaf\017\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\041\uffaf\076\uffaf\001\002\000\056\003\u0133\004" +
    "\053\005\051\006\064\007\063\013\176\016\040\021\170" +
    "\041\216\042\206\043\213\045\205\047\225\050\211\051" +
    "\212\071\235\072\221\073\175\074\177\075\165\076\074" +
    "\077\204\001\002\000\060\003\uff99\004\uff99\005\uff99\006" +
    "\uff99\007\uff99\013\uff99\016\uff99\017\uff99\021\uff99\041\uff99" +
    "\042\uff99\043\uff99\045\uff99\047\uff99\050\uff99\051\uff99\071" +
    "\uff99\072\uff99\073\uff99\074\uff99\075\uff99\076\uff99\077\uff99" +
    "\001\002\000\004\076\u014a\001\002\000\060\010\uff49\011" +
    "\uff49\012\uff49\013\uff49\014\uff49\015\uff49\020\uff49\021\u014b" +
    "\022\uff49\023\uff49\052\uff49\053\uff49\055\uff49\056\uff49\057" +
    "\uff49\060\uff49\061\uff49\062\uff49\063\uff49\064\uff49\065\uff49" +
    "\066\uff49\067\uff49\001\002\000\056\003\327\004\053\005" +
    "\051\006\064\007\063\021\170\022\uff5b\041\216\042\206" +
    "\043\213\044\270\051\212\052\255\053\246\054\250\071" +
    "\235\072\221\073\175\074\177\075\165\076\074\077\204" +
    "\001\002\000\004\022\u014d\001\002\000\054\010\uff46\011" +
    "\uff46\012\uff46\013\uff46\014\uff46\015\uff46\022\uff46\023\uff46" +
    "\052\uff46\053\uff46\055\uff46\056\uff46\057\uff46\060\uff46\061" +
    "\uff46\062\uff46\063\uff46\064\uff46\065\uff46\066\uff46\067\uff46" +
    "\001\002\000\012\003\u0150\010\u0153\012\147\021\uff5f\001" +
    "\002\000\006\003\u0150\010\u0153\001\002\000\004\010\uff51" +
    "\001\002\000\054\010\uff53\011\uff53\012\uff53\013\uff53\014" +
    "\uff53\015\uff53\022\uff53\023\uff53\052\uff53\053\uff53\055\uff53" +
    "\056\uff53\057\uff53\060\uff53\061\uff53\062\uff53\063\uff53\064" +
    "\uff53\065\uff53\066\uff53\067\uff53\001\002\000\054\010\u0158" +
    "\011\uff4e\012\uff4e\013\uff4e\014\uff4e\015\uff4e\022\uff4e\023" +
    "\uff4e\052\uff4e\053\uff4e\055\uff4e\056\uff4e\057\uff4e\060\uff4e" +
    "\061\uff4e\062\uff4e\063\uff4e\064\uff4e\065\uff4e\066\uff4e\067" +
    "\uff4e\001\002\000\054\003\257\004\053\005\051\006\064" +
    "\007\063\021\170\041\216\042\206\043\213\044\270\051" +
    "\212\052\255\053\246\054\250\071\235\072\221\073\175" +
    "\074\177\075\165\076\074\077\204\001\002\000\004\011" +
    "\u0155\001\002\000\054\010\uff4f\011\uff4f\012\uff4f\013\uff4f" +
    "\014\uff4f\015\uff4f\022\uff4f\023\uff4f\052\uff4f\053\uff4f\055" +
    "\uff4f\056\uff4f\057\uff4f\060\uff4f\061\uff4f\062\uff4f\063\uff4f" +
    "\064\uff4f\065\uff4f\066\uff4f\067\uff4f\001\002\000\052\011" +
    "\uff55\012\uff55\013\uff55\014\uff55\015\uff55\022\uff55\023\uff55" +
    "\052\uff55\053\uff55\055\uff55\056\uff55\057\uff55\060\uff55\061" +
    "\uff55\062\uff55\063\uff55\064\uff55\065\uff55\066\uff55\067\uff55" +
    "\001\002\000\054\010\uff52\011\uff52\012\uff52\013\uff52\014" +
    "\uff52\015\uff52\022\uff52\023\uff52\052\uff52\053\uff52\055\uff52" +
    "\056\uff52\057\uff52\060\uff52\061\uff52\062\uff52\063\uff52\064" +
    "\uff52\065\uff52\066\uff52\067\uff52\001\002\000\056\003\257" +
    "\004\053\005\051\006\064\007\063\011\140\021\170\041" +
    "\216\042\206\043\213\044\270\051\212\052\255\053\246" +
    "\054\250\071\235\072\221\073\175\074\177\075\165\076" +
    "\074\077\204\001\002\000\054\010\136\011\uff4d\012\uff4d" +
    "\013\uff4d\014\uff4d\015\uff4d\022\uff4d\023\uff4d\052\uff4d\053" +
    "\uff4d\055\uff4d\056\uff4d\057\uff4d\060\uff4d\061\uff4d\062\uff4d" +
    "\063\uff4d\064\uff4d\065\uff4d\066\uff4d\067\uff4d\001\002\000" +
    "\004\010\u0153\001\002\000\054\010\uff50\011\uff50\012\uff50" +
    "\013\uff50\014\uff50\015\uff50\022\uff50\023\uff50\052\uff50\053" +
    "\uff50\055\uff50\056\uff50\057\uff50\060\uff50\061\uff50\062\uff50" +
    "\063\uff50\064\uff50\065\uff50\066\uff50\067\uff50\001\002\000" +
    "\004\021\u015f\001\002\000\054\010\u0158\011\uff4e\012\uff4e" +
    "\013\uff4e\014\uff4e\015\uff4e\022\uff4e\023\uff4e\052\uff4e\053" +
    "\uff4e\055\uff4e\056\uff4e\057\uff4e\060\uff4e\061\uff4e\062\uff4e" +
    "\063\uff4e\064\uff4e\065\uff4e\066\uff4e\067\uff4e\001\002\000" +
    "\052\011\uff54\012\uff54\013\uff54\014\uff54\015\uff54\022\uff54" +
    "\023\uff54\052\uff54\053\uff54\055\uff54\056\uff54\057\uff54\060" +
    "\uff54\061\uff54\062\uff54\063\uff54\064\uff54\065\uff54\066\uff54" +
    "\067\uff54\001\002\000\056\003\327\004\053\005\051\006" +
    "\064\007\063\021\170\022\uff5b\041\216\042\206\043\213" +
    "\044\270\051\212\052\255\053\246\054\250\071\235\072" +
    "\221\073\175\074\177\075\165\076\074\077\204\001\002" +
    "\000\004\022\u0161\001\002\000\056\010\uff5d\011\uff5d\012" +
    "\uff5d\013\uff5d\014\uff5d\015\uff5d\016\031\022\uff5d\023\uff5d" +
    "\052\uff5d\053\uff5d\055\uff5d\056\uff5d\057\uff5d\060\uff5d\061" +
    "\uff5d\062\uff5d\063\uff5d\064\uff5d\065\uff5d\066\uff5d\067\uff5d" +
    "\001\002\000\054\010\uff5e\011\uff5e\012\uff5e\013\uff5e\014" +
    "\uff5e\015\uff5e\022\uff5e\023\uff5e\052\uff5e\053\uff5e\055\uff5e" +
    "\056\uff5e\057\uff5e\060\uff5e\061\uff5e\062\uff5e\063\uff5e\064" +
    "\uff5e\065\uff5e\066\uff5e\067\uff5e\001\002\000\054\010\uff5c" +
    "\011\uff5c\012\uff5c\013\uff5c\014\uff5c\015\uff5c\022\uff5c\023" +
    "\uff5c\052\uff5c\053\uff5c\055\uff5c\056\uff5c\057\uff5c\060\uff5c" +
    "\061\uff5c\062\uff5c\063\uff5c\064\uff5c\065\uff5c\066\uff5c\067" +
    "\uff5c\001\002\000\056\003\257\004\053\005\051\006\064" +
    "\007\063\013\uff02\021\170\041\216\042\206\043\213\044" +
    "\270\051\212\052\255\053\246\054\250\071\235\072\221" +
    "\073\175\074\177\075\165\076\074\077\204\001\002\000" +
    "\004\013\uff01\001\002\000\004\013\u0167\001\002\000\062" +
    "\003\uff73\004\uff73\005\uff73\006\uff73\007\uff73\013\uff73\016" +
    "\uff73\017\uff73\021\uff73\041\uff73\042\uff73\043\uff73\045\uff73" +
    "\046\uff73\047\uff73\050\uff73\051\uff73\071\uff73\072\uff73\073" +
    "\uff73\074\uff73\075\uff73\076\uff73\077\uff73\001\002\000\052" +
    "\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\013\uffb0\016" +
    "\uffb0\017\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\041\uffb0\076" +
    "\uffb0\001\002\000\004\022\uff7e\001\002\000\054\003\uff83" +
    "\004\uff83\005\uff83\006\uff83\007\uff83\021\uff83\041\uff83\042" +
    "\uff83\043\uff83\044\uff83\051\uff83\052\uff83\053\uff83\054\uff83" +
    "\071\uff83\072\uff83\073\uff83\074\uff83\075\uff83\076\uff83\077" +
    "\uff83\001\002\000\054\003\u016d\004\053\005\051\006\064" +
    "\007\063\021\170\041\216\042\206\043\213\044\270\051" +
    "\212\052\255\053\246\054\250\071\235\072\221\073\175" +
    "\074\177\075\165\076\074\077\204\001\002\000\004\022" +
    "\uff82\001\002\000\040\012\uff61\014\uff37\020\uff07\022\uff7b" +
    "\055\uff35\056\uff33\057\uff29\060\uff27\061\uff25\062\uff23\063" +
    "\uff1e\064\uff1c\065\uff17\066\uff12\067\uff0c\001\002\000\004" +
    "\022\uff82\001\002\000\004\022\u0170\001\002\000\056\003" +
    "\u0133\004\053\005\051\006\064\007\063\013\176\016\040" +
    "\021\170\041\216\042\206\043\213\045\u0173\047\u0174\050" +
    "\211\051\212\071\235\072\221\073\175\074\177\075\165" +
    "\076\074\077\204\001\002\000\004\046\uff8e\001\002\000" +
    "\004\046\u0186\001\002\000\004\021\u017d\001\002\000\004" +
    "\021\u0177\001\002\000\004\046\uff8d\001\002\000\004\046" +
    "\uff8f\001\002\000\054\003\uff80\004\uff80\005\uff80\006\uff80" +
    "\007\uff80\021\uff80\041\uff80\042\uff80\043\uff80\044\uff80\051" +
    "\uff80\052\uff80\053\uff80\054\uff80\071\uff80\072\uff80\073\uff80" +
    "\074\uff80\075\uff80\076\uff80\077\uff80\001\002\000\054\003" +
    "\257\004\053\005\051\006\064\007\063\021\170\041\216" +
    "\042\206\043\213\044\270\051\212\052\255\053\246\054" +
    "\250\071\235\072\221\073\175\074\177\075\165\076\074" +
    "\077\204\001\002\000\004\022\uff82\001\002\000\004\022" +
    "\u017b\001\002\000\056\003\u0133\004\053\005\051\006\064" +
    "\007\063\013\176\016\040\021\170\041\216\042\206\043" +
    "\213\045\u0173\047\u0174\050\211\051\212\071\235\072\221" +
    "\073\175\074\177\075\165\076\074\077\204\001\002\000" +
    "\004\046\uff75\001\002\000\054\003\uff83\004\uff83\005\uff83" +
    "\006\uff83\007\uff83\021\uff83\041\uff83\042\uff83\043\uff83\044" +
    "\uff83\051\uff83\052\uff83\053\uff83\054\uff83\071\uff83\072\uff83" +
    "\073\uff83\074\uff83\075\uff83\076\uff83\077\uff83\001\002\000" +
    "\054\003\257\004\053\005\051\006\064\007\063\021\170" +
    "\041\216\042\206\043\213\044\270\051\212\052\255\053" +
    "\246\054\250\071\235\072\221\073\175\074\177\075\165" +
    "\076\074\077\204\001\002\000\004\022\uff82\001\002\000" +
    "\004\022\u0181\001\002\000\056\003\u0133\004\053\005\051" +
    "\006\064\007\063\013\176\016\040\021\170\041\216\042" +
    "\206\043\213\045\u0173\047\u0174\050\211\051\212\071\235" +
    "\072\221\073\175\074\177\075\165\076\074\077\204\001" +
    "\002\000\004\046\uff81\001\002\000\004\046\u0184\001\002" +
    "\000\056\003\u0133\004\053\005\051\006\064\007\063\013" +
    "\176\016\040\021\170\041\216\042\206\043\213\045\u0173" +
    "\047\u0174\050\211\051\212\071\235\072\221\073\175\074" +
    "\177\075\165\076\074\077\204\001\002\000\004\046\uff79" +
    "\001\002\000\056\003\u0133\004\053\005\051\006\064\007" +
    "\063\013\176\016\040\021\170\041\216\042\206\043\213" +
    "\045\205\047\225\050\211\051\212\071\235\072\221\073" +
    "\175\074\177\075\165\076\074\077\204\001\002\000\060" +
    "\003\uff7a\004\uff7a\005\uff7a\006\uff7a\007\uff7a\013\uff7a\016" +
    "\uff7a\017\uff7a\021\uff7a\041\uff7a\042\uff7a\043\uff7a\045\uff7a" +
    "\047\uff7a\050\uff7a\051\uff7a\071\uff7a\072\uff7a\073\uff7a\074" +
    "\uff7a\075\uff7a\076\uff7a\077\uff7a\001\002\000\004\022\u0189" +
    "\001\002\000\056\003\u0133\004\053\005\051\006\064\007" +
    "\063\013\176\016\040\021\170\041\216\042\206\043\213" +
    "\045\u018b\047\u018d\050\211\051\212\071\235\072\221\073" +
    "\175\074\177\075\165\076\074\077\204\001\002\000\004" +
    "\046\uff81\001\002\000\006\003\u0169\021\u0194\001\002\000" +
    "\060\003\uff7f\004\uff7f\005\uff7f\006\uff7f\007\uff7f\013\uff7f" +
    "\016\uff7f\017\uff7f\021\uff7f\041\uff7f\042\uff7f\043\uff7f\045" +
    "\uff7f\047\uff7f\050\uff7f\051\uff7f\071\uff7f\072\uff7f\073\uff7f" +
    "\074\uff7f\075\uff7f\076\uff7f\077\uff7f\001\002\000\006\003" +
    "\u0135\021\u018f\001\002\000\062\003\uff93\004\uff93\005\uff93" +
    "\006\uff93\007\uff93\013\uff93\016\uff93\017\uff93\021\uff93\041" +
    "\uff93\042\uff93\043\uff93\045\uff93\046\uff8f\047\uff93\050\uff93" +
    "\051\uff93\071\uff93\072\uff93\073\uff93\074\uff93\075\uff93\076" +
    "\uff93\077\uff93\001\002\000\054\003\uff80\004\uff80\005\uff80" +
    "\006\uff80\007\uff80\021\uff80\041\uff80\042\uff80\043\uff80\044" +
    "\uff80\051\uff80\052\uff80\053\uff80\054\uff80\071\uff80\072\uff80" +
    "\073\uff80\074\uff80\075\uff80\076\uff80\077\uff80\001\002\000" +
    "\054\003\257\004\053\005\051\006\064\007\063\021\170" +
    "\041\216\042\206\043\213\044\270\051\212\052\255\053" +
    "\246\054\250\071\235\072\221\073\175\074\177\075\165" +
    "\076\074\077\204\001\002\000\004\022\uff82\001\002\000" +
    "\004\022\u0193\001\002\000\056\003\u0133\004\053\005\051" +
    "\006\064\007\063\013\176\016\040\021\170\041\216\042" +
    "\206\043\213\045\u018b\047\u018d\050\211\051\212\071\235" +
    "\072\221\073\175\074\177\075\165\076\074\077\204\001" +
    "\002\000\054\003\uff83\004\uff83\005\uff83\006\uff83\007\uff83" +
    "\021\uff83\041\uff83\042\uff83\043\uff83\044\uff83\051\uff83\052" +
    "\uff83\053\uff83\054\uff83\071\uff83\072\uff83\073\uff83\074\uff83" +
    "\075\uff83\076\uff83\077\uff83\001\002\000\054\003\u016d\004" +
    "\053\005\051\006\064\007\063\021\170\041\216\042\206" +
    "\043\213\044\270\051\212\052\255\053\246\054\250\071" +
    "\235\072\221\073\175\074\177\075\165\076\074\077\204" +
    "\001\002\000\004\022\uff82\001\002\000\004\022\u0198\001" +
    "\002\000\056\003\u0133\004\053\005\051\006\064\007\063" +
    "\013\176\016\040\021\170\041\216\042\206\043\213\045" +
    "\u018b\047\u018d\050\211\051\212\071\235\072\221\073\175" +
    "\074\177\075\165\076\074\077\204\001\002\000\004\046" +
    "\uff81\001\002\000\004\046\u019b\001\002\000\056\003\u0133" +
    "\004\053\005\051\006\064\007\063\013\176\016\040\021" +
    "\170\041\216\042\206\043\213\045\u018b\047\u018d\050\211" +
    "\051\212\071\235\072\221\073\175\074\177\075\165\076" +
    "\074\077\204\001\002\000\060\003\uff7c\004\uff7c\005\uff7c" +
    "\006\uff7c\007\uff7c\013\uff7c\016\uff7c\017\uff7c\021\uff7c\041" +
    "\uff7c\042\uff7c\043\uff7c\045\uff7c\047\uff7c\050\uff7c\051\uff7c" +
    "\071\uff7c\072\uff7c\073\uff7c\074\uff7c\075\uff7c\076\uff7c\077" +
    "\uff7c\001\002\000\004\046\u019e\001\002\000\056\003\u0133" +
    "\004\053\005\051\006\064\007\063\013\176\016\040\021" +
    "\170\041\216\042\206\043\213\045\205\047\225\050\211" +
    "\051\212\071\235\072\221\073\175\074\177\075\165\076" +
    "\074\077\204\001\002\000\004\022\uff82\001\002\000\004" +
    "\022\u01a1\001\002\000\056\003\u0133\004\053\005\051\006" +
    "\064\007\063\013\176\016\040\021\170\041\216\042\206" +
    "\043\213\045\205\047\225\050\211\051\212\071\235\072" +
    "\221\073\175\074\177\075\165\076\074\077\204\001\002" +
    "\000\060\003\uff7d\004\uff7d\005\uff7d\006\uff7d\007\uff7d\013" +
    "\uff7d\016\uff7d\017\uff7d\021\uff7d\041\uff7d\042\uff7d\043\uff7d" +
    "\045\uff7d\047\uff7d\050\uff7d\051\uff7d\071\uff7d\072\uff7d\073" +
    "\uff7d\074\uff7d\075\uff7d\076\uff7d\077\uff7d\001\002\000\054" +
    "\003\u01a5\004\053\005\051\006\064\007\063\021\170\041" +
    "\216\042\206\043\213\044\270\051\212\052\255\053\246" +
    "\054\250\071\235\072\221\073\175\074\177\075\165\076" +
    "\074\077\204\001\002\000\004\022\u01a8\001\002\000\040" +
    "\012\uff61\014\uff37\020\uff07\022\uff63\055\uff35\056\uff33\057" +
    "\uff29\060\uff27\061\uff25\062\uff23\063\uff1e\064\uff1c\065\uff17" +
    "\066\uff12\067\uff0c\001\002\000\004\022\u01a7\001\002\000" +
    "\054\010\uff62\011\uff62\012\uff62\013\uff62\014\uff62\015\uff62" +
    "\022\uff62\023\uff62\052\uff62\053\uff62\055\uff62\056\uff62\057" +
    "\uff62\060\uff62\061\uff62\062\uff62\063\uff62\064\uff62\065\uff62" +
    "\066\uff62\067\uff62\001\002\000\054\010\uff6d\011\uff6d\012" +
    "\uff6d\013\uff6d\014\uff6d\015\uff6d\022\uff6d\023\uff6d\052\uff6d" +
    "\053\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062" +
    "\uff6d\063\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d\001\002" +
    "\000\054\003\uff74\004\uff74\005\uff74\006\uff74\007\uff74\021" +
    "\uff74\041\uff74\042\uff74\043\uff74\044\uff74\051\uff74\052\uff74" +
    "\053\uff74\054\uff74\071\uff74\072\uff74\073\uff74\074\uff74\075" +
    "\uff74\076\uff74\077\uff74\001\002\000\054\003\257\004\053" +
    "\005\051\006\064\007\063\021\170\041\216\042\206\043" +
    "\213\044\270\051\212\052\255\053\246\054\250\071\235" +
    "\072\221\073\175\074\177\075\165\076\074\077\204\001" +
    "\002\000\014\011\uff08\013\uff08\015\uff08\022\uff08\023\uff08" +
    "\001\002\000\062\003\uff87\004\uff87\005\uff87\006\uff87\007" +
    "\uff87\013\uff87\016\uff87\017\uff87\021\uff87\041\uff87\042\uff87" +
    "\043\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\071" +
    "\uff87\072\uff87\073\uff87\074\uff87\075\uff87\076\uff87\077\uff87" +
    "\001\002\000\060\003\u01af\004\053\005\051\006\064\007" +
    "\063\013\176\016\040\017\uff9e\021\170\041\216\042\206" +
    "\043\213\045\205\047\225\050\211\051\212\071\235\072" +
    "\221\073\175\074\177\075\165\076\074\077\204\001\002" +
    "\000\004\017\u01b2\001\002\000\064\003\uff9a\004\uff9a\005" +
    "\uff9a\006\uff9a\007\uff9a\012\uff61\013\uff9a\016\uff9a\017\uffa0" +
    "\020\uff07\021\uff9a\041\uff9a\042\uff9a\043\uff9a\045\uff9a\047" +
    "\uff9a\050\uff9a\051\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a" +
    "\075\uff9a\076\uff9a\077\uff9a\001\002\000\004\017\u01b1\001" +
    "\002\000\106\003\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f" +
    "\013\uff9f\016\uff9f\017\uff9f\021\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\041\uff9f\042\uff9f\043\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f" +
    "\075\uff9f\076\uff9f\077\uff9f\001\002\000\106\003\uffa1\004" +
    "\uffa1\005\uffa1\006\uffa1\007\uffa1\013\uffa1\016\uffa1\017\uffa1" +
    "\021\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031" +
    "\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\071" +
    "\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1" +
    "\001\002\000\060\003\uffad\004\uffad\005\uffad\006\uffad\007" +
    "\uffad\013\uffad\016\uffad\017\uffad\021\uffad\041\uffad\042\uffad" +
    "\043\uffad\045\uffad\047\uffad\050\uffad\051\uffad\071\uffad\072" +
    "\uffad\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad\001\002" +
    "\000\052\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac\013" +
    "\uffac\016\uffac\017\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\041" +
    "\uffac\076\uffac\001\002\000\060\003\u01bb\004\053\005\051" +
    "\006\064\007\063\013\176\016\040\017\uff9e\021\170\041" +
    "\216\042\u01b8\043\u01ba\045\205\047\225\050\211\051\212" +
    "\071\235\072\221\073\175\074\177\075\165\076\074\077" +
    "\204\001\002\000\060\003\u01d2\004\053\005\051\006\064" +
    "\007\063\013\176\016\040\017\uff9e\021\170\041\216\042" +
    "\206\043\213\045\205\047\225\050\211\051\212\071\235" +
    "\072\221\073\175\074\177\075\165\076\074\077\204\001" +
    "\002\000\004\012\u01c6\001\002\000\010\010\uff6e\012\uff6e" +
    "\021\u01c2\001\002\000\004\017\u01c1\001\002\000\006\012" +
    "\u0149\021\u01bd\001\002\000\064\003\uff9a\004\uff9a\005\uff9a" +
    "\006\uff9a\007\uff9a\012\uff61\013\uff9a\016\uff9a\017\u01bc\020" +
    "\uff07\021\uff9a\041\uff9a\042\uff9a\043\uff9a\045\uff9a\047\uff9a" +
    "\050\uff9a\051\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075" +
    "\uff9a\076\uff9a\077\uff9a\001\002\000\052\003\uffa7\004\uffa7" +
    "\005\uffa7\006\uffa7\007\uffa7\013\uffa7\016\uffa7\017\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\041\uffa7\076\uffa7\001\002\000" +
    "\056\003\327\004\053\005\051\006\064\007\063\021\170" +
    "\022\uff5b\041\216\042\206\043\213\044\270\051\212\052" +
    "\255\053\246\054\250\071\235\072\221\073\175\074\177" +
    "\075\165\076\074\077\204\001\002\000\004\022\u01bf\001" +
    "\002\000\004\013\u01c0\001\002\000\060\003\uffa4\004\uffa4" +
    "\005\uffa4\006\uffa4\007\uffa4\013\uffa4\016\uffa4\017\uffa4\021" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\045\uffa4\047\uffa4\050\uffa4" +
    "\051\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076" +
    "\uffa4\077\uffa4\001\002\000\052\003\uffa8\004\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\013\uffa8\016\uffa8\017\uffa8\024\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\035\uffa8\041\uffa8\076\uffa8\001\002\000\056\003" +
    "\327\004\053\005\051\006\064\007\063\021\170\022\uff5b" +
    "\041\216\042\206\043\213\044\270\051\212\052\255\053" +
    "\246\054\250\071\235\072\221\073\175\074\177\075\165" +
    "\076\074\077\204\001\002\000\004\022\u01c4\001\002\000" +
    "\004\013\u01c5\001\002\000\060\003\uffa5\004\uffa5\005\uffa5" +
    "\006\uffa5\007\uffa5\013\uffa5\016\uffa5\017\uffa5\021\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\045\uffa5\047\uffa5\050\uffa5\051\uffa5" +
    "\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077" +
    "\uffa5\001\002\000\010\042\u01c8\043\u01c7\076\u0128\001\002" +
    "\000\004\021\u01cd\001\002\000\004\021\u01c9\001\002\000" +
    "\056\003\327\004\053\005\051\006\064\007\063\021\170" +
    "\022\uff5b\041\216\042\206\043\213\044\270\051\212\052" +
    "\255\053\246\054\250\071\235\072\221\073\175\074\177" +
    "\075\165\076\074\077\204\001\002\000\004\022\u01cb\001" +
    "\002\000\004\013\u01cc\001\002\000\060\003\uffa3\004\uffa3" +
    "\005\uffa3\006\uffa3\007\uffa3\013\uffa3\016\uffa3\017\uffa3\021" +
    "\uffa3\041\uffa3\042\uffa3\043\uffa3\045\uffa3\047\uffa3\050\uffa3" +
    "\051\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076" +
    "\uffa3\077\uffa3\001\002\000\056\003\327\004\053\005\051" +
    "\006\064\007\063\021\170\022\uff5b\041\216\042\206\043" +
    "\213\044\270\051\212\052\255\053\246\054\250\071\235" +
    "\072\221\073\175\074\177\075\165\076\074\077\204\001" +
    "\002\000\004\022\u01cf\001\002\000\004\013\u01d0\001\002" +
    "\000\060\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2\013" +
    "\uffa2\016\uffa2\017\uffa2\021\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\045\uffa2\047\uffa2\050\uffa2\051\uffa2\071\uffa2\072\uffa2\073" +
    "\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\001\002\000\004" +
    "\017\u01d3\001\002\000\062\003\uff9a\004\uff9a\005\uff9a\006" +
    "\uff9a\007\uff9a\012\uff61\013\uff9a\016\uff9a\020\uff07\021\uff9a" +
    "\041\uff9a\042\uff9a\043\uff9a\045\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a" +
    "\077\uff9a\001\002\000\052\003\uffa9\004\uffa9\005\uffa9\006" +
    "\uffa9\007\uffa9\013\uffa9\016\uffa9\017\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\041\uffa9\076\uffa9\001\002\000\004\016\uffd9" +
    "\001\002\000\004\016\031\001\002\000\032\002\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\037\uffd8\001\002\000\030\024" +
    "\011\025\007\026\014\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\037\uffeb\001\002\000\032\002" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\037\uffdc\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d7\000\006\002\003\014\005\001\001\000\002\001" +
    "\001\000\004\136\u01d6\001\001\000\010\015\011\020\007" +
    "\022\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\137\027\001\001\000\002\001\001\000\004" +
    "\016\031\001\001\000\032\020\045\022\012\024\044\025" +
    "\041\026\042\027\047\030\046\033\034\035\040\042\032" +
    "\043\035\046\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\u01b3" +
    "\001\001\000\002\001\001\000\004\047\u01ac\001\001\000" +
    "\004\041\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\146\151\001\001\000\026\020\045\022\012\026" +
    "\150\027\047\030\046\033\034\035\040\042\032\043\035" +
    "\046\036\001\001\000\016\004\056\005\054\006\055\007" +
    "\057\010\061\011\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\101\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\134\001\001" +
    "\000\002\001\001\000\006\031\110\032\105\001\001\000" +
    "\002\001\001\000\004\150\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\072\005\054\006\055\007\057\010\061\011\051" +
    "\036\066\037\067\040\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\147\100\001\001" +
    "\000\004\032\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\072\005\054\006\055\007\057\010\061\011" +
    "\051\040\101\001\001\000\002\001\001\000\020\004\072" +
    "\005\054\006\055\007\057\010\061\011\051\040\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\141\121\142\123\143\122\001\001\000\004\144" +
    "\115\001\001\000\002\001\001\000\004\012\113\001\001" +
    "\000\002\001\001\000\004\032\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\072\005\054\006\055" +
    "\007\057\010\061\011\051\036\117\037\067\040\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\124\022\012\033\125\035" +
    "\040\001\001\000\016\004\126\005\054\006\055\007\057" +
    "\010\061\011\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\144\115\001\001\000\004\032\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\145\141\001\001\000\002\001\001\000" +
    "\024\004\072\005\054\006\055\007\057\010\061\011\051" +
    "\036\143\037\067\040\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\072\005\054\006\055\007\057\010\061\011\051\036\153" +
    "\037\067\040\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\161" +
    "\001\001\000\002\001\001\000\076\003\170\004\235\005" +
    "\216\006\055\007\057\010\200\011\173\046\172\050\206" +
    "\051\231\052\225\053\226\054\207\056\227\057\177\060" +
    "\230\061\162\062\165\063\232\065\222\067\214\070\202" +
    "\071\221\072\217\075\171\115\163\116\223\117\233\132" +
    "\201\133\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\111\u01a2\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\114\u0163\001\001\000" +
    "\010\005\u014e\006\055\011\u014d\001\001\000\002\001\001" +
    "\000\010\152\u0146\160\303\200\333\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\101\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\072\003\170\004\235\005\216\006\055\007\057\010\200" +
    "\011\173\046\172\052\u0133\053\226\054\207\056\227\057" +
    "\177\060\230\061\162\062\165\063\232\065\222\067\214" +
    "\070\202\071\221\072\217\075\171\115\163\116\223\117" +
    "\233\132\201\133\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\237\032\105\001" +
    "\001\000\006\143\122\153\u0130\001\001\000\004\013\241" +
    "\001\001\000\062\003\170\005\261\006\055\010\251\011" +
    "\246\070\253\071\221\072\263\075\171\115\163\116\265" +
    "\117\233\120\260\121\255\122\266\123\243\124\270\125" +
    "\250\126\244\127\262\130\257\131\264\132\252\133\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\170\005\261\006\055" +
    "\010\251\011\277\070\253\071\221\072\263\075\171\115" +
    "\275\116\265\117\301\120\260\121\u012f\001\001\000\004" +
    "\101\145\001\001\000\004\110\u012d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\170\005\261\006\055\010\251\011\277\070" +
    "\253\071\221\072\263\075\171\115\275\116\265\117\301" +
    "\120\260\121\u0125\001\001\000\002\001\001\000\036\160" +
    "\303\164\302\165\305\166\304\167\344\170\343\171\342" +
    "\172\341\173\337\174\340\175\336\176\335\177\334\200" +
    "\333\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u011b\001\001\000\002\001\001\000\042\003\170\005" +
    "\261\006\055\010\251\011\277\070\253\071\221\072\263" +
    "\075\171\115\275\116\265\117\301\120\260\121\255\122" +
    "\266\123\u011a\001\001\000\042\003\170\005\261\006\055" +
    "\010\251\011\277\070\253\071\221\072\263\075\171\115" +
    "\275\116\265\117\301\120\260\121\255\122\266\123\u0119" +
    "\001\001\000\042\003\170\005\261\006\055\010\251\011" +
    "\277\070\253\071\221\072\263\075\171\115\275\116\265" +
    "\117\301\120\260\121\255\122\266\123\u0118\001\001\000" +
    "\042\003\170\005\261\006\055\010\251\011\277\070\253" +
    "\071\221\072\263\075\171\115\275\116\265\117\301\120" +
    "\260\121\255\122\266\123\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\145\001\001\000\012\160" +
    "\303\164\302\165\305\166\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\170\005\261\006\055\010\251" +
    "\011\277\070\253\071\221\072\263\075\171\115\275\116" +
    "\265\117\301\120\260\121\307\001\001\000\002\001\001" +
    "\000\004\160\303\001\001\000\036\003\170\005\261\006" +
    "\055\010\251\011\277\070\253\071\221\072\263\075\171" +
    "\115\275\116\265\117\301\120\260\121\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\170\005\261\006\055\010\251\011\277\070\253\071" +
    "\221\072\263\075\171\115\275\116\265\117\301\120\260" +
    "\121\316\001\001\000\002\001\001\000\064\003\170\005" +
    "\261\006\055\010\251\011\246\070\253\071\221\072\263" +
    "\075\171\115\163\116\265\117\233\120\260\121\255\122" +
    "\266\123\243\124\270\125\250\126\244\127\262\130\257" +
    "\131\330\132\252\133\166\135\u0116\001\001\000\070\003" +
    "\170\005\261\006\055\010\251\011\246\070\253\071\221" +
    "\072\263\073\324\074\327\075\171\115\163\116\265\117" +
    "\233\120\260\121\255\122\266\123\243\124\270\125\250" +
    "\126\244\127\262\130\257\131\330\132\252\133\166\135" +
    "\325\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\160" +
    "\303\162\345\164\302\165\305\166\304\167\344\170\343" +
    "\171\342\172\341\173\337\174\340\175\336\176\335\177" +
    "\334\200\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\003\170\005\261\006\055\010\251\011\246\070" +
    "\253\071\221\072\263\075\171\115\163\116\265\117\233" +
    "\120\260\121\255\122\266\123\243\124\270\125\250\126" +
    "\244\127\262\130\257\131\330\132\252\133\166\135\332" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\003\170\005\261" +
    "\006\055\010\251\011\246\070\253\071\221\072\263\075" +
    "\171\115\163\116\265\117\233\120\260\121\255\122\266" +
    "\123\243\124\270\125\250\126\244\127\262\130\257\131" +
    "\330\132\252\133\166\135\346\001\001\000\002\001\001" +
    "\000\042\003\170\005\261\006\055\010\251\011\277\070" +
    "\253\071\221\072\263\075\171\115\275\116\265\117\301" +
    "\120\260\121\255\122\266\123\350\001\001\000\002\001" +
    "\001\000\040\003\170\005\261\006\055\010\251\011\277" +
    "\070\253\071\221\072\263\075\171\115\275\116\265\117" +
    "\301\120\260\121\255\122\362\001\001\000\040\003\170" +
    "\005\261\006\055\010\251\011\277\070\253\071\221\072" +
    "\263\075\171\115\275\116\265\117\301\120\260\121\255" +
    "\122\353\001\001\000\002\001\001\000\036\003\170\005" +
    "\261\006\055\010\251\011\277\070\253\071\221\072\263" +
    "\075\171\115\275\116\265\117\301\120\260\121\361\001" +
    "\001\000\036\003\170\005\261\006\055\010\251\011\277" +
    "\070\253\071\221\072\263\075\171\115\275\116\265\117" +
    "\301\120\260\121\360\001\001\000\036\003\170\005\261" +
    "\006\055\010\251\011\277\070\253\071\221\072\263\075" +
    "\171\115\275\116\265\117\301\120\260\121\357\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\170\005\261\006\055\010\251" +
    "\011\277\070\253\071\221\072\263\075\171\115\275\116" +
    "\265\117\301\120\260\121\255\122\266\123\364\001\001" +
    "\000\002\001\001\000\042\003\170\005\261\006\055\010" +
    "\251\011\277\070\253\071\221\072\263\075\171\115\275" +
    "\116\265\117\301\120\260\121\255\122\266\123\366\001" +
    "\001\000\002\001\001\000\042\003\170\005\261\006\055" +
    "\010\251\011\277\070\253\071\221\072\263\075\171\115" +
    "\275\116\265\117\301\120\260\121\255\122\266\123\370" +
    "\001\001\000\002\001\001\000\044\003\170\005\261\006" +
    "\055\010\251\011\277\070\253\071\221\072\263\075\171" +
    "\115\275\116\265\117\301\120\260\121\255\122\266\123" +
    "\243\124\373\001\001\000\022\160\303\164\302\165\305" +
    "\166\304\167\344\170\343\171\342\172\341\001\001\000" +
    "\002\001\001\000\044\003\170\005\261\006\055\010\251" +
    "\011\277\070\253\071\221\072\263\075\171\115\275\116" +
    "\265\117\301\120\260\121\255\122\266\123\243\124\375" +
    "\001\001\000\002\001\001\000\046\003\170\005\261\006" +
    "\055\010\251\011\277\070\253\071\221\072\263\075\171" +
    "\115\275\116\265\117\301\120\260\121\255\122\266\123" +
    "\243\124\270\125\377\001\001\000\002\001\001\000\026" +
    "\160\303\164\302\165\305\166\304\167\344\170\343\171" +
    "\342\172\341\173\337\174\340\001\001\000\044\003\170" +
    "\005\261\006\055\010\251\011\277\070\253\071\221\072" +
    "\263\075\171\115\275\116\265\117\301\120\260\121\255" +
    "\122\266\123\243\124\u0104\001\001\000\044\003\170\005" +
    "\261\006\055\010\251\011\277\070\253\071\221\072\263" +
    "\075\171\115\275\116\265\117\301\120\260\121\255\122" +
    "\266\123\243\124\u0103\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\170\005\261\006\055\010\251\011" +
    "\277\070\253\071\221\072\263\075\171\115\275\116\265" +
    "\117\301\120\260\121\255\122\266\123\243\124\270\125" +
    "\250\126\u0106\001\001\000\002\001\001\000\030\160\303" +
    "\164\302\165\305\166\304\167\344\170\343\171\342\172" +
    "\341\173\337\174\340\175\336\001\001\000\004\106\u0109" +
    "\001\001\000\046\003\170\005\261\006\055\010\251\011" +
    "\277\070\253\071\221\072\263\075\171\115\275\116\265" +
    "\117\301\120\260\121\255\122\266\123\243\124\270\125" +
    "\u010a\001\001\000\002\001\001\000\064\003\170\005\261" +
    "\006\055\010\251\011\246\070\253\071\221\072\263\075" +
    "\171\115\163\116\265\117\233\120\260\121\255\122\266" +
    "\123\243\124\270\125\250\126\244\127\262\130\257\131" +
    "\330\132\252\133\166\135\u010c\001\001\000\002\001\001" +
    "\000\052\003\170\005\261\006\055\010\251\011\277\070" +
    "\253\071\221\072\263\075\171\115\275\116\265\117\301" +
    "\120\260\121\255\122\266\123\243\124\270\125\250\126" +
    "\244\127\u010f\001\001\000\032\160\303\164\302\165\305" +
    "\166\304\167\344\170\343\171\342\172\341\173\337\174" +
    "\340\175\336\176\335\001\001\000\002\001\001\000\004" +
    "\107\u0111\001\001\000\050\003\170\005\261\006\055\010" +
    "\251\011\277\070\253\071\221\072\263\075\171\115\275" +
    "\116\265\117\301\120\260\121\255\122\266\123\243\124" +
    "\270\125\250\126\u0112\001\001\000\002\001\001\000\062" +
    "\003\170\005\261\006\055\010\251\011\246\070\253\071" +
    "\221\072\263\075\171\115\163\116\265\117\233\120\260" +
    "\121\255\122\266\123\243\124\270\125\250\126\244\127" +
    "\262\130\257\131\u0114\132\252\133\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\112\u011d\001\001\000\064\003" +
    "\170\005\261\006\055\010\251\011\246\070\253\071\221" +
    "\072\263\075\171\115\163\116\265\117\233\120\260\121" +
    "\255\122\266\123\243\124\270\125\250\126\244\127\262" +
    "\130\257\131\330\132\252\133\166\135\u011e\001\001\000" +
    "\002\001\001\000\004\113\u0120\001\001\000\054\003\170" +
    "\005\261\006\055\010\251\011\277\070\253\071\221\072" +
    "\263\075\171\115\275\116\265\117\301\120\260\121\255" +
    "\122\266\123\243\124\270\125\250\126\244\127\262\130" +
    "\u0122\001\001\000\034\160\303\164\302\165\305\166\304" +
    "\167\344\170\343\171\342\172\341\173\337\174\340\175" +
    "\336\176\335\177\334\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\003\170\005\261\006\055" +
    "\010\251\011\246\070\253\071\221\072\263\073\u0129\074" +
    "\327\075\171\115\163\116\265\117\233\120\260\121\255" +
    "\122\266\123\243\124\270\125\250\126\244\127\262\130" +
    "\257\131\330\132\252\133\166\135\325\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\170\005\261\006\055\010\251\011\277" +
    "\070\253\071\221\072\263\075\171\115\275\116\265\117" +
    "\301\120\260\121\u012e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\160" +
    "\303\200\333\001\001\000\002\001\001\000\004\156\u013c" +
    "\001\001\000\004\105\u0136\001\001\000\064\003\170\005" +
    "\261\006\055\010\251\011\246\070\253\071\221\072\263" +
    "\075\171\115\163\116\265\117\233\120\260\121\255\122" +
    "\266\123\243\124\270\125\250\126\244\127\262\130\257" +
    "\131\330\132\252\133\166\135\u0137\001\001\000\004\103" +
    "\u0138\001\001\000\002\001\001\000\062\003\170\005\261" +
    "\006\055\010\251\011\u013a\046\172\054\u013b\056\227\057" +
    "\177\060\230\061\162\062\165\063\232\065\222\067\214" +
    "\070\202\071\221\072\217\075\171\115\163\116\223\117" +
    "\233\132\201\133\166\001\001\000\004\101\145\001\001" +
    "\000\002\001\001\000\004\103\u013d\001\001\000\002\001" +
    "\001\000\062\003\170\005\261\006\055\010\251\011\u013a" +
    "\046\172\054\u013f\056\227\057\177\060\230\061\162\062" +
    "\165\063\232\065\222\067\214\070\202\071\221\072\217" +
    "\075\171\115\163\116\223\117\233\132\201\133\166\001" +
    "\001\000\002\001\001\000\064\003\170\005\261\006\055" +
    "\010\251\011\246\070\253\071\221\072\263\075\171\115" +
    "\163\116\265\117\233\120\260\121\255\122\266\123\243" +
    "\124\270\125\250\126\244\127\262\130\257\131\330\132" +
    "\252\133\166\135\u0141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\072\003\170\004\235\005\216\006\055\007\057" +
    "\010\200\011\173\046\172\052\u0147\053\226\054\207\056" +
    "\227\057\177\060\230\061\162\062\165\063\232\065\222" +
    "\067\214\070\202\071\221\072\217\075\171\115\163\116" +
    "\223\117\233\132\201\133\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\003\170\005" +
    "\261\006\055\010\251\011\246\070\253\071\221\072\263" +
    "\073\u014b\074\327\075\171\115\163\116\265\117\233\120" +
    "\260\121\255\122\266\123\243\124\270\125\250\126\244" +
    "\127\262\130\257\131\330\132\252\133\166\135\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\076\u015c" +
    "\077\u0150\161\u015b\001\001\000\006\076\u0151\077\u0150\001" +
    "\001\000\004\163\u0159\001\001\000\002\001\001\000\010" +
    "\077\u0156\100\u0155\101\u0158\001\001\000\064\003\170\005" +
    "\261\006\055\010\251\011\246\070\253\071\221\072\263" +
    "\075\171\115\163\116\265\117\233\120\260\121\255\122" +
    "\266\123\243\124\270\125\250\126\244\127\262\130\257" +
    "\131\330\132\252\133\166\135\u0153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\003\170\005\261\006\055\010\251\011\246\070" +
    "\253\071\221\072\263\075\171\115\163\116\265\117\233" +
    "\120\260\121\255\122\266\123\243\124\270\125\250\126" +
    "\244\127\262\130\257\131\330\132\252\133\166\135\u0153" +
    "\001\001\000\002\001\001\000\004\077\u015a\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\077\u0156\100\u015d" +
    "\101\u0158\001\001\000\002\001\001\000\070\003\170\005" +
    "\261\006\055\010\251\011\246\070\253\071\221\072\263" +
    "\073\u015f\074\327\075\171\115\163\116\265\117\233\120" +
    "\260\121\255\122\266\123\243\124\270\125\250\126\244" +
    "\127\262\130\257\131\330\132\252\133\166\135\325\001" +
    "\001\000\002\001\001\000\006\016\u0162\017\u0161\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\003\170\005" +
    "\261\006\055\010\251\011\246\070\253\071\221\072\263" +
    "\075\171\115\163\116\265\117\233\120\260\121\255\122" +
    "\266\123\243\124\270\125\250\126\244\127\262\130\257" +
    "\131\330\132\252\133\166\134\u0165\135\u0164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\154\u019e\001\001\000\004\102\u016a\001" +
    "\001\000\064\003\170\005\261\006\055\010\251\011\246" +
    "\070\253\071\221\072\263\075\171\115\163\116\265\117" +
    "\233\120\260\121\255\122\266\123\243\124\270\125\250" +
    "\126\244\127\262\130\257\131\330\132\252\133\166\135" +
    "\u016b\001\001\000\004\103\u0187\001\001\000\040\155\u016d" +
    "\160\303\164\302\165\305\166\304\167\344\170\343\171" +
    "\342\172\341\173\337\174\340\175\336\176\335\177\334" +
    "\200\333\001\001\000\004\103\u016e\001\001\000\002\001" +
    "\001\000\060\003\170\005\261\006\055\010\251\011\u013a" +
    "\046\172\055\u0171\056\u0175\057\177\060\230\061\162\064" +
    "\u0170\066\u0174\067\214\070\202\071\221\072\217\075\171" +
    "\115\163\116\223\117\233\132\201\133\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\105" +
    "\u0177\001\001\000\064\003\170\005\261\006\055\010\251" +
    "\011\246\070\253\071\221\072\263\075\171\115\163\116" +
    "\265\117\233\120\260\121\255\122\266\123\243\124\270" +
    "\125\250\126\244\127\262\130\257\131\330\132\252\133" +
    "\166\135\u0178\001\001\000\004\103\u0179\001\001\000\002" +
    "\001\001\000\060\003\170\005\261\006\055\010\251\011" +
    "\u013a\046\172\055\u017b\056\u0175\057\177\060\230\061\162" +
    "\064\u0170\066\u0174\067\214\070\202\071\221\072\217\075" +
    "\171\115\163\116\223\117\233\132\201\133\166\001\001" +
    "\000\002\001\001\000\004\102\u017d\001\001\000\064\003" +
    "\170\005\261\006\055\010\251\011\246\070\253\071\221" +
    "\072\263\075\171\115\163\116\265\117\233\120\260\121" +
    "\255\122\266\123\243\124\270\125\250\126\244\127\262" +
    "\130\257\131\330\132\252\133\166\135\u017e\001\001\000" +
    "\004\103\u017f\001\001\000\002\001\001\000\060\003\170" +
    "\005\261\006\055\010\251\011\u013a\046\172\055\u0181\056" +
    "\u0175\057\177\060\230\061\162\064\u0170\066\u0174\067\214" +
    "\070\202\071\221\072\217\075\171\115\163\116\223\117" +
    "\233\132\201\133\166\001\001\000\004\104\u0182\001\001" +
    "\000\002\001\001\000\060\003\170\005\261\006\055\010" +
    "\251\011\u013a\046\172\055\u0184\056\u0175\057\177\060\230" +
    "\061\162\064\u0170\066\u0174\067\214\070\202\071\221\072" +
    "\217\075\171\115\163\116\223\117\233\132\201\133\166" +
    "\001\001\000\002\001\001\000\062\003\170\005\261\006" +
    "\055\010\251\011\u013a\046\172\054\u0186\056\227\057\177" +
    "\060\230\061\162\062\165\063\232\065\222\067\214\070" +
    "\202\071\221\072\217\075\171\115\163\116\223\117\233" +
    "\132\201\133\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\003\170\005\261\006\055\010\251\011\u013a" +
    "\046\172\054\u018b\055\u0189\056\u018d\057\177\060\230\061" +
    "\162\062\165\063\232\064\u0170\065\222\066\u0174\067\214" +
    "\070\202\071\221\072\217\075\171\115\163\116\223\117" +
    "\233\132\201\133\166\001\001\000\004\104\u019c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\105\u018f\001\001\000\064\003\170" +
    "\005\261\006\055\010\251\011\246\070\253\071\221\072" +
    "\263\075\171\115\163\116\265\117\233\120\260\121\255" +
    "\122\266\123\243\124\270\125\250\126\244\127\262\130" +
    "\257\131\330\132\252\133\166\135\u0190\001\001\000\004" +
    "\103\u0191\001\001\000\002\001\001\000\070\003\170\005" +
    "\261\006\055\010\251\011\u013a\046\172\054\u013b\055\u017b" +
    "\056\u018d\057\177\060\230\061\162\062\165\063\232\064" +
    "\u0170\065\222\066\u0174\067\214\070\202\071\221\072\217" +
    "\075\171\115\163\116\223\117\233\132\201\133\166\001" +
    "\001\000\004\102\u0194\001\001\000\064\003\170\005\261" +
    "\006\055\010\251\011\246\070\253\071\221\072\263\075" +
    "\171\115\163\116\265\117\233\120\260\121\255\122\266" +
    "\123\243\124\270\125\250\126\244\127\262\130\257\131" +
    "\330\132\252\133\166\135\u0195\001\001\000\004\103\u0196" +
    "\001\001\000\002\001\001\000\070\003\170\005\261\006" +
    "\055\010\251\011\u013a\046\172\054\u018b\055\u0198\056\u018d" +
    "\057\177\060\230\061\162\062\165\063\232\064\u0170\065" +
    "\222\066\u0174\067\214\070\202\071\221\072\217\075\171" +
    "\115\163\116\223\117\233\132\201\133\166\001\001\000" +
    "\004\104\u0199\001\001\000\002\001\001\000\070\003\170" +
    "\005\261\006\055\010\251\011\u013a\046\172\054\u019b\055" +
    "\u0184\056\u018d\057\177\060\230\061\162\062\165\063\232" +
    "\064\u0170\065\222\066\u0174\067\214\070\202\071\221\072" +
    "\217\075\171\115\163\116\223\117\233\132\201\133\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\170\005\261\006\055\010\251\011\u013a\046\172\054\u019b" +
    "\056\227\057\177\060\230\061\162\062\165\063\232\065" +
    "\222\067\214\070\202\071\221\072\217\075\171\115\163" +
    "\116\223\117\233\132\201\133\166\001\001\000\004\103" +
    "\u019f\001\001\000\002\001\001\000\062\003\170\005\261" +
    "\006\055\010\251\011\u013a\046\172\054\u01a1\056\227\057" +
    "\177\060\230\061\162\062\165\063\232\065\222\067\214" +
    "\070\202\071\221\072\217\075\171\115\163\116\223\117" +
    "\233\132\201\133\166\001\001\000\002\001\001\000\064" +
    "\003\170\005\261\006\055\010\251\011\246\070\253\071" +
    "\221\072\263\075\171\115\163\116\265\117\233\120\260" +
    "\121\255\122\266\123\243\124\270\125\250\126\244\127" +
    "\262\130\257\131\330\132\252\133\166\135\u01a3\001\001" +
    "\000\002\001\001\000\040\157\u01a5\160\303\164\302\165" +
    "\305\166\304\167\344\170\343\171\342\172\341\173\337" +
    "\174\340\175\336\176\335\177\334\200\333\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\114\u01a9\001\001\000\062\003\170\005\261\006\055\010" +
    "\251\011\246\070\253\071\221\072\263\075\171\115\163" +
    "\116\265\117\233\120\260\121\255\122\266\123\243\124" +
    "\270\125\250\126\244\127\262\130\257\131\u01aa\132\252" +
    "\133\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\003\170\004\235\005\216\006\055\007\057\010\200" +
    "\011\173\046\172\050\u01ad\051\231\052\225\053\226\054" +
    "\207\056\227\057\177\060\230\061\162\062\165\063\232" +
    "\065\222\067\214\070\202\071\221\072\217\075\171\115" +
    "\163\116\223\117\233\132\201\133\166\001\001\000\002" +
    "\001\001\000\012\151\u01af\152\u0146\160\303\200\333\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\u01b4\001\001\000\002\001\001\000\100\003" +
    "\170\004\235\005\216\006\055\007\057\010\200\011\173" +
    "\045\u01b5\046\172\050\u01b8\051\231\052\225\053\226\054" +
    "\207\056\227\057\177\060\230\061\162\062\165\063\232" +
    "\065\222\067\214\070\u01b6\071\221\072\217\075\171\115" +
    "\163\116\223\117\233\132\201\133\166\001\001\000\076" +
    "\003\170\004\235\005\216\006\055\007\057\010\200\011" +
    "\173\046\172\050\u01d0\051\231\052\225\053\226\054\207" +
    "\056\227\057\177\060\230\061\162\062\165\063\232\065" +
    "\222\067\214\070\202\071\221\072\217\075\171\115\163" +
    "\116\223\117\233\132\201\133\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\152\u0146\160\303\200\333\001\001\000\002\001" +
    "\001\000\070\003\170\005\261\006\055\010\251\011\246" +
    "\070\253\071\221\072\263\073\u01bd\074\327\075\171\115" +
    "\163\116\265\117\233\120\260\121\255\122\266\123\243" +
    "\124\270\125\250\126\244\127\262\130\257\131\330\132" +
    "\252\133\166\135\325\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\003" +
    "\170\005\261\006\055\010\251\011\246\070\253\071\221" +
    "\072\263\073\u01c2\074\327\075\171\115\163\116\265\117" +
    "\233\120\260\121\255\122\266\123\243\124\270\125\250" +
    "\126\244\127\262\130\257\131\330\132\252\133\166\135" +
    "\325\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\003\170\005\261\006\055\010\251\011\246" +
    "\070\253\071\221\072\263\073\u01c9\074\327\075\171\115" +
    "\163\116\265\117\233\120\260\121\255\122\266\123\243" +
    "\124\270\125\250\126\244\127\262\130\257\131\330\132" +
    "\252\133\166\135\325\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\003\170\005\261\006" +
    "\055\010\251\011\246\070\253\071\221\072\263\073\u01cd" +
    "\074\327\075\171\115\163\116\265\117\233\120\260\121" +
    "\255\122\266\123\243\124\270\125\250\126\244\127\262" +
    "\130\257\131\330\132\252\133\166\135\325\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\152\u0146\160\303\200\333\001\001\000" +
    "\002\001\001\000\004\140\u01d4\001\001\000\004\016\u01d5" +
    "\001\001\000\002\001\001\000\010\015\u01d7\020\007\022" +
    "\012\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	if(first) {	Type.initTypes();
			Env.initFirst();
	}
	if(second) Env.initSecond();

    }

 

  public static Scanner s;
  public static int errors = 0;
  public static int warnings = 0;
  public static boolean first = true, second = false;
  public static StringBuffer code = new StringBuffer();
  public static String objLoc = "null";

  public static void main(String argv[]) {

    for (int i = 0; i < argv.length; i++) {
      try { System.out.println("\n... Creating Symbol-Table for \""+argv[i]+"\" ...\n");
	  	s = new Scanner(new FileReader(argv[i]));
        	parser p = new parser(s);
        	p.parse();
        	System.out.println("Number of errors = " + errors + ".");
        	System.out.println("Number of warnings = " + warnings + ".");
		Type.printTypes();
	  	first = false;
	  	second = true;
        	System.out.println("\n... Generating intermediate code for \""+argv[i]+"\" ...\n");
		code.append("		; ModuleID = '"+argv[i]+".ll'\n\n");
		code.append("target datalayout = \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-s0:0:64-f80:32:32\"\n");
		code.append("target triple = \"i686-pc-linux-gnu\"\n\n");
		code.append("		; Global values\n");
		Set glob = Env.getGlobals().entrySet();
  		Iterator it = glob.iterator();
		while(it.hasNext()) { Map.Entry entry = (Map.Entry)it.next();
					    String key = (String)entry.getKey();
					    String value = (String)entry.getValue();
					    if (value.equals("struct")) code.append(key+"\n");
					    else { int lth = key.length() + 1;
						     code.append(value+" = internal constant ["+lth+" x i8] "+" c\""+key+"\\00\"\n");
					    }
		}
		code.append("\n");
		code.append("		; External declarations\n");
		code.append("declare i32 @printf(i8*, ...)\n");
		code.append("declare i32 @scanf(i8*, ...)\n\n");
        	s = new Scanner(new FileReader(argv[i]));
	  	p = new parser(s);
        	p.parse();
        	System.out.println("Number of errors = " + errors + ".");
        	System.out.println("Number of warnings = " + warnings + ".");
		Type.printTypes();
	  	if (errors == 0) try { FileOutputStream  fStream;
   					     PrintWriter  myStream;
   			      	     fStream = new FileOutputStream(argv[i]+".ll");
   					     myStream = new PrintWriter(fStream);
   					     myStream.println(code); 
   					     myStream.flush();
   					     myStream.close();
        				     System.out.println("\nCode written to \""+argv[i]+".ll\".");
				     }
				     catch (IOException e) { e.printStackTrace(System.out);
        			    				     System.exit(1);
      			     }
		else System.out.println("\nNo code produced.");
		System.out.println("--------------------------------------- (parser)");
      }
      catch (Exception e) { e.printStackTrace(System.out);
        			    System.exit(1);
      }
    }
  }
  
  public void report_error(String message, Object info) {
    if (info instanceof String){
	errors++; 
      System.err.println("  "+ errors + "==> " + info + " "+ message + 
					"\n       Parsing resumed from 2nd token before" + s.yytext()+"\n");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }

  public void sem_error(String lexeme, String message) {
	errors++;
     	System.err.println("Error "+ s.yytext() + " : Semantic error");
      System.err.println("  "+ errors + "==> " + message + ": "+ lexeme + "\n");
  }

  public void warning(String lexeme, String message) {
	warnings++;
     	System.err.println("Warning "+ s.yytext());
      System.err.println("  "+ warnings + "==> " + message + ": "+ lexeme + "\n");
  } 
  
  public void report_fatal_error(String message, Object info) {
    	report_error(message, info);
    	throw new RuntimeException("Fatal Syntax Error");
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



	class Sname {
	  public String name;
	  public Symb cs;
	  public Symb rs;

	  Sname(String n, Symb c, Symb r) {
		name = n;
		cs = c;
		rs = r;
	  }

	  public String toString(){
		return "Sname["+name+", "+cs+", "+rs+"]";
	  }
	}

	class Exp {
	  public Type type;
	  public String locT;
	  public String locN;
	  public Labels lab;

	  Exp(Type t, String lt, String ln) {
		type = t;
		locT = lt;
		locN = ln;
	  }

	  Exp(Type t, Labels l) {
		type = t;
		lab = l;
	  }

	  Exp(Type t, String lt, String ln, Labels l) {
		type = t;
		locT = lt;
		locN = ln;
		lab = l;
	  }

  	  public void load () {
		if(locN.startsWith("getelementptr")) { parser.code.append("	"+Tmp.nv()+" = "+locN+"\n");
								   locN = Tmp.lv();
		}
		if(locT.endsWith("*") && !locT.startsWith("%struct")) { parser.code.append("	"+Tmp.nv()+" = load "+locT+" "+locN+"\n");
					   	 					  locT = locT.replaceFirst("\\*", "");
					   	 					  locN = Tmp.lv();
		}
  	  }

  	  public String widen(Type w) {
		if(type == w) return locN;
 		if(type.isInteger() && w.isFloating()) parser.code.append("	"+Tmp.nv()+" = sitofp i32 "+locN+" to double\n");
 		if(type.isCharacter() && w.isFloating()) parser.code.append("	"+Tmp.nv()+" = sitofp i8 "+locN+" to double\n");
 		if(type.isCharacter() && w.isInteger()) parser.code.append("	"+Tmp.nv()+" = sext i8 "+locN+" to i32\n");
		return Tmp.lv();
  	  }

	}

	class ParamList {
	  public Type type;
	  public List list;

	  ParamList(Type t, List l) {
		type = t;
		list = l;
	  }
	}

	class Labels {
	  public String lBegin;
	  public String lTrue;
	  public String lFalse;
	  public String lNext;
	  public boolean bvalue;
	  public boolean bvDone;

	  Labels() {
		lBegin = Tmp.nl();
		lTrue = Tmp.nl();
		lFalse = Tmp.nl();
		lNext = Tmp.nl();
		bvalue = false;
		bvDone = false;
	  }
	}

	class Vars {
	  public Env e;
	  public List vl;

	  Vars(Env ee, List l) {
		e = ee;
		vl = l;
	  }
	}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expression ::= assignment_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expression_opt ::= expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_opt",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expression_opt ::= 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_opt",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // left_hand_side ::= array_access 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("left_hand_side",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // left_hand_side ::= field_access 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("left_hand_side",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // left_hand_side ::= name 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   		 			   	 RESULT = new Exp(Type.errortype(), "", "");
			   			     }
			   			     else { String locN = sn.cs.getLocN();
								if(locN.startsWith("getelementptr")) { String cn = Name.getCurrentClass().getName();
														   parser.code.append("		; left_hand_side\n");
														   locN = locN.replaceFirst("struct.+\\*", "struct."+cn+"*");
														   parser.code.append("	"+Tmp.nv()+" = "+locN+"\n");
														   locN = Tmp.lv();
					   	 								   RESULT = new Exp(sn.cs.getType(), sn.cs.getLocT(), Tmp.lv());
							      }
								else RESULT = new Exp(sn.cs.getType(), sn.cs.getLocT(), sn.cs.getLocN());
						     }

			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("left_hand_side",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // assignment ::= error NT$34 EQ assignment_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // NT$34 ::= 
            {
              Exp RESULT =null;
 parser.report_error("left_hand_side","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$34",126, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // assignment ::= left_hand_side EQ M14 assignment_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(e1.type.isArray()) { if(e1.type != e2.type) { parser.sem_error(""+e1.type+", "+e2.type, "INCOMPATIBLE TYPES");
				    						    	   			    RESULT = new Exp(Type.errortype(), "", "");
			   			   	  			   }
										   else { Symb s = Env.get(e1.locN.replaceFirst("%", ""));
											    s.putLocT(e2.locT);
											    s.putLocN(e2.locN);
										   }
						   }
						   else if(e1.type != e2.type) if(e1.type.isNumber() && e2.type.isNumber()) { Type t = Type.max(e1.type, e2.type);
															 				if(e2.type != t) { parser.code.append("		; assignment\n");
																						 e2.load();
									  						 							 String l2 = e2.widen(t);
							    	  														 parser.code.append("	store "+t.getCode()+" "+l2+", "+e1.locT+" "+e1.locN+"\n");
							    	  														 RESULT = new Exp(e1.type, e1.locT, e1.locN, l);
																			}
							  				 								else { parser.sem_error(""+e1.type+", "+e2.type, "LEFT-HAND TYPE SHORTER THAN RIGHT-END TYPE");
				    						    	   	  								 RESULT = new Exp(Type.errortype(), "", "");
			   			   	  				 								}
											 }
							  				 else { parser.sem_error(""+e1.type+", "+e2.type, "INCOMPATIBLE TYPES");
				    						    	   	  RESULT = new Exp(Type.errortype(), "", "");
			   			   	  				 }
			   			   	  else { parser.code.append("		; assignment\n");
							    	   if(e2.type.isBool() && !e2.lab.bvDone) { parser.code.append(e2.lab.lTrue+":	; l_True\n");
											   			   	  parser.code.append("	br label %"+e2.lab.lNext+"\n");
											   			   	  parser.code.append(e2.lab.lFalse+":	; l_False\n");
											   			  	  parser.code.append("	br label %"+e2.lab.lNext+"\n");
											   			  	  parser.code.append(e2.lab.lNext+":	; l_Next\n");
											  			   	  parser.code.append("	"+Tmp.nv()+" = phi i1 [true, %"+e2.lab.lTrue+"] ,[false, %"+e2.lab.lFalse+"]\n");
											   			   	  e2.locT = "i1";
											   			  	  e2.locN = Tmp.lv();
							    	   }
								   e2.load();
							    	   parser.code.append("	store "+e2.locT+" "+e2.locN+", "+e1.locT+" "+e1.locN+"\n");
							    	   RESULT = new Exp(e1.type, e1.locT, e1.locN, l);
						   	 }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // assignment_expression ::= assignment 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // assignment_expression ::= conditional_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // conditional_expression ::= error NT$33 QUESTION expression COLON conditional_or_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // NT$33 ::= 
            {
              Exp RESULT =null;
 parser.report_error("conditional_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",125, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // conditional_expression ::= conditional_or_expression QUESTION M12 expression COLON M13 conditional_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isBool();
						     if(!b1) { parser.sem_error(""+e1.type, "NOT A BOOLEAN");
								   RESULT = new Exp(Type.errortype(), "", "");
						     }
			   			     else if(e2.type != e3.type) if(e2.type.isNumber() && e3.type.isNumber()) { e2.load();
							    											 	  e3.load();
									  									 	  Type t = Type.max(e2.type, e3.type);
									  									 	  String l2 = e2.widen(t);
									  									 	  String l3 = e3.widen(t);
												  							  parser.code.append("	br label %"+e1.lab.lNext+"\n");
						     						  							  parser.code.append(e1.lab.lNext+": 	; l_Next\n");
												  							  parser.code.append("	"+Tmp.nv()+" = phi "+t.getCode()+" ["+l2+", %"+e1.lab.lTrue+"] ,["+l3+", %"+e1.lab.lFalse+"]\n");
											       							  RESULT = new Exp(t, t.getCode(), Tmp.lv());
						     					   }
							    				   else { parser.sem_error(""+e2.type+", "+e3.type, "INCOMPATIBLE TYPES");
								     				    RESULT = new Exp(Type.errortype(), "", "");
						     	    				   }
				    		          else { e3.load();
								     parser.code.append("	br label %"+e1.lab.lNext+"\n");
						     		     parser.code.append(e1.lab.lNext+": 	; l_Next\n");
								     parser.code.append("	"+Tmp.nv()+" = phi "+e2.locT+" ["+e2.locN+", %"+e1.lab.lTrue+"] ,["+e3.locN+", %"+e1.lab.lFalse+"]\n");
								     RESULT = new Exp(e2.type, e2.type.getCode(), Tmp.lv());
						     	    }	   
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // conditional_expression ::= conditional_or_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // M13 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Exp e1 = (Exp)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
						     Exp e2 = (Exp)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
						     e2.load();
						     parser.code.append("	br label %"+e1.lab.lNext+"\n");
						     parser.code.append(e1.lab.lFalse+": 	; l_False\n");
						     RESULT = e1.lab;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M13",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // M12 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Exp e = (Exp)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
						     parser.code.append("		; conditional_expression\n");
						     if (e.lab.bvalue) { e.load();
										 parser.code.append("	br i1 "+e.locN+", label %"+e.lab.lTrue+", label %"+e.lab.lFalse+"\n");
						     }
						     parser.code.append(e.lab.lTrue+": 	; l_True\n");
						     RESULT = e.lab; 
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M12",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // conditional_or_expression ::= error NT$32 OROR conditional_and_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // NT$32 ::= 
            {
              Exp RESULT =null;
 parser.report_error("conditional_or_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",124, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // conditional_or_expression ::= conditional_or_expression OROR M9 conditional_and_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isBool();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A BOOLEAN");
			   			     boolean b2 = e2.type.isBool();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A BOOLEAN");
				    		     if(b1 && b2) RESULT = e2;	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // conditional_or_expression ::= conditional_and_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // M9 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
						     parser.code.append("		; conditional_or_expression\n");
						     parser.code.append(l.lFalse+":	; l_False\n");
						     l.lFalse = Tmp.nl();
			   	    		     RESULT = l;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M9",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // conditional_and_expression ::= error NT$31 ANDAND equality_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // NT$31 ::= 
            {
              Exp RESULT =null;
 parser.report_error("conditional_and_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",123, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // conditional_and_expression ::= conditional_and_expression ANDAND M8 equality_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isBool();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A BOOLEAN");
			   			     boolean b2 = e2.type.isBool();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A BOOLEAN");
				    		     if(b1 && b2) RESULT = e2;	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // conditional_and_expression ::= equality_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // M8 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
						     parser.code.append("		; conditional_and_expression\n");
						     parser.code.append(l.lTrue+":	; l_True\n");
						     l.lTrue = Tmp.nl();
			   	    		     RESULT = l;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M8",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // equality_expression ::= error NT$30 NOTEQ relational_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // NT$30 ::= 
            {
              Exp RESULT =null;
 parser.report_error("equality_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",122, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // equality_expression ::= error NT$29 EQEQ relational_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // NT$29 ::= 
            {
              Exp RESULT =null;
 parser.report_error("equality_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",121, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // equality_expression ::= equality_expression NOTEQ relational_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(e1.type != e2.type) if(e1.type.isNumber() && e2.type.isNumber()) { parser.code.append("		; equality_NOTEQ_expression\n");
							    											 Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
							    											 e1.load();
							    											 e2.load();
									  									 Type t = Type.max(e1.type, e2.type);
									  									 String l1 = e1.widen(t);
									  									 String l2 = e2.widen(t);
							    											 parser.code.append("	"+Tmp.nv()+" = icmp ne "+t.getCode()+" "+l1+", "+l2+"\n");
							    											 parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
							    											 RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
							  			  }
							  			  else { parser.sem_error(""+e1.type+", "+e2.type, "INCOMPATIBLE TYPES");
				    						    	   RESULT = new Exp(Type.errortype(), "", "");
			   			   	  			  }
 						   else { parser.code.append("		; equality_NOTEQ_expression\n");
							    Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
							    e1.load();
							    e2.load(); 
							    parser.code.append("	"+Tmp.nv()+" = icmp ne "+e1.locT+" "+e1.locN+", "+e2.locN+"\n");
							    parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
							    RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						   }	   
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // equality_expression ::= equality_expression EQEQ relational_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(e1.type != e2.type) if(e1.type.isNumber() && e2.type.isNumber()) { parser.code.append("		; equality_EQEQ_expression\n");
							    											 Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
							    											 e1.load();
							    											 e2.load();
									  									 Type t = Type.max(e1.type, e2.type);
									  									 String l1 = e1.widen(t);
									  									 String l2 = e2.widen(t);
							    											 parser.code.append("	"+Tmp.nv()+" = icmp eq "+t.getCode()+" "+l1+", "+l2+"\n");
							    											 parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
							    											 RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
							  			  }
							  			  else { parser.sem_error(""+e1.type+", "+e2.type, "INCOMPATIBLE TYPES");
				    						    	   RESULT = new Exp(Type.errortype(), "", "");
			   			   	  			  }
 						   else { parser.code.append("		; equality_EQEQ_expression\n");
							    Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
							    e1.load();
							    e2.load();
							    parser.code.append("	"+Tmp.nv()+" = icmp eq "+e1.locT+" "+e1.locN+", "+e2.locN+"\n");
							    parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
							    RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						   }	   	   
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // equality_expression ::= relational_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // relational_expression ::= error NT$28 GTEQ additive_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // NT$28 ::= 
            {
              Exp RESULT =null;
 parser.report_error("relational_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // relational_expression ::= error NT$27 LTEQ additive_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // NT$27 ::= 
            {
              Exp RESULT =null;
 parser.report_error("relational_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",119, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // relational_expression ::= error NT$26 GT additive_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // NT$26 ::= 
            {
              Exp RESULT =null;
 parser.report_error("relational_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // relational_expression ::= error NT$25 LT additive_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // NT$25 ::= 
            {
              Exp RESULT =null;
 parser.report_error("relational_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",117, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // relational_expression ::= relational_expression GTEQ additive_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; relational_GTEQ_expression\n");
									  Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
									  e1.load();
									  e2.load();
							  		  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+Tmp.nv()+" = icmp sge "+t.getCode()+" "+l1+", "+l2+"\n");
									  parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
									  RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						     }	   	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // relational_expression ::= relational_expression LTEQ additive_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; relational_LTEQ_expression\n");
									  Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
									  e1.load();
									  e2.load();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+Tmp.nv()+" = icmp sle "+t.getCode()+" "+l1+", "+l2+"\n");
									  parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
									  RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						     }	   	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // relational_expression ::= relational_expression GT additive_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; relational_GT_expression\n");
									  Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
									  e1.load();
									  e2.load();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+Tmp.nv()+" = icmp sgt "+t.getCode()+" "+l1+", "+l2+"\n");
									  parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
									  RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						     }	   	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // relational_expression ::= relational_expression LT additive_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; relational_LT_expression\n");
									  Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
									  e1.load();
									  e2.load();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+Tmp.nv()+" = icmp slt "+t.getCode()+" "+l1+", "+l2+"\n");
									  parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
									  RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						     }	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // relational_expression ::= additive_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; additive_MINUS_expression\n");
									  e1.load();
									  e2.load();
									  String loc = ""+Tmp.nv();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+loc+" = sub "+t.getCode()+" "+l1+", "+l2+"\n");
									  RESULT = new Exp(t, t.getCode(), loc);
						     }	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; additive_PLUS_expression\n");
									  e1.load();
									  e2.load();
									  String loc = ""+Tmp.nv();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+loc+" = add "+t.getCode()+" "+l1+", "+l2+"\n");
									  RESULT = new Exp(t, t.getCode(), loc);
						     }	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // additive_expression ::= multiplicative_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // multiplicative_expression ::= error NT$24 MOD unary_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$24 ::= 
            {
              Exp RESULT =null;
 parser.report_error("multiplicative_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // multiplicative_expression ::= error NT$23 DIV unary_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$23 ::= 
            {
              Exp RESULT =null;
 parser.report_error("multiplicative_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",115, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // multiplicative_expression ::= error NT$22 MULT unary_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NT$22 ::= 
            {
              Exp RESULT =null;
 parser.report_error("multiplicative_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",114, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // multiplicative_expression ::= multiplicative_expression MOD unary_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isInteger();
						     if(!b1) parser.sem_error(""+e1.type, "NOT AN INTEGER");
			   			     boolean b2 = e2.type.isInteger();
						     if(!b2) parser.sem_error(""+e2.type, "NOT AN INTEGER");
				    		     if(b1 && b2) { parser.code.append("		; multiplicative_MOD_expression\n");
									  e1.load();
									  e2.load();
									  String loc = ""+Tmp.nv();
									  parser.code.append("	"+loc+" = srem i32 "+e1.locN+", "+e2.locN+"\n");					  
									  RESULT = new Exp(e1.type, "i32", loc);
						     }   	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // multiplicative_expression ::= multiplicative_expression DIV unary_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; multiplicative_DIV_expression\n");
									  e1.load();
									  e2.load();
									  String loc = ""+Tmp.nv();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  if(t.isFloating()) parser.code.append("	"+loc+" = fdiv "+t.getCode()+" "+l1+", "+l2+"\n");
									  else parser.code.append("	"+loc+" = sdiv "+t.getCode()+" "+l1+", "+l2+"\n");					  
									  RESULT = new Exp(t, t.getCode(), loc);
						     }   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // multiplicative_expression ::= multiplicative_expression MULT unary_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; multiplicative_MULT_expression\n");
									  e1.load();
									  e2.load();
									  String loc = ""+Tmp.nv();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+loc+" = mul "+t.getCode()+" "+l1+", "+l2+"\n");						  
									  RESULT = new Exp(t, t.getCode(), loc);
						     }	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // multiplicative_expression ::= unary_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // unary_expression ::= MINUS unary_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { if(!e.type.isNumber()) { parser.sem_error(""+e.type, "NOT A NUMBER");
				    		   			     	    RESULT = new Exp(Type.errortype(), "", "");
						   }	   
			   			   parser.code.append("		; unary_minus_expression\n");
						   e.load();
						   String loc = ""+Tmp.nv();
						   parser.code.append("	"+loc+" = sub "+e.locT+" 0"+", "+e.locN+"\n");
						   Type t = e.type;
						   RESULT = new Exp(t, t.getCode(), loc);
			   }						    
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // unary_expression ::= PLUS unary_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(!e.type.isNumber()) { parser.sem_error(""+e.type, "NOT A NUMBER");
				    		   			     	    RESULT = new Exp(Type.errortype(), "", "");
						   }	   
			   			   else  RESULT = e;						    
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // unary_expression ::= NOT M10 unary_expression 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(!e.type.isBool()) { parser.sem_error(""+e.type, "NOT A BOOLEAN");
				    		   			   	  RESULT = new Exp(Type.errortype(), "", "");
						   }	   
			   			   else { String s = l.lTrue;
			   			     	    l.lTrue = l.lFalse;
			   			     	    l.lFalse = s;
 							    RESULT = new Exp(Type.bool(), l);
						   }						    
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // unary_expression ::= postfix_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // M10 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { parser.code.append("		; unary_NOT_expression\n");
			   			     RESULT = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M10",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // postfix_expression ::= AT name 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   		     RESULT = new Exp(Type.errortype(), "", "");
			   }
			   else RESULT = new Exp(Type.reference(sn.cs.getType()), sn.cs.getLocT(), sn.cs.getLocN()+"&"); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // postfix_expression ::= name 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   		     RESULT = new Exp(Type.errortype(), "", "");
			   }
			   else { if((parser.second) && (sn.cs.getType() == Type.bool())) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;									    
											    	     		  if(!l.bvalue) parser.code.append("	br i1 "+sn.cs.getLocN()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
											    	     		  RESULT = new Exp(Type.bool(), sn.cs.getLocT(), sn.cs.getLocN(), l);
			   	    }
				    else RESULT = new Exp(sn.cs.getType(), sn.cs.getLocT(), sn.cs.getLocN()); 
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // postfix_expression ::= primary 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // array_access ::= primary_no_new_array LBRACK expression RBRACK 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(!e2.type.isInteger()) { parser.sem_error(""+e2.type, "NOT AN INTEGER");
				    		            RESULT = new Exp(Type.errortype(), "", "");
			   } 
			   else RESULT = e1;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_access",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // array_access ::= name LBRACK expression RBRACK 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) { if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   	      			   	 RESULT = new Exp(Type.errortype(), "", "");
			   			     }
			   			     else { Type t1 = sn.cs.getType();
				    				if(!t1.isArray()) { parser.sem_error(""+t1, "NOT AN ARRAY");
				    		 	   	    			  RESULT = new Exp(Type.errortype(), "", "");
			   	    				}
				   	    			else if(!e.type.isInteger()) { parser.sem_error(""+e.type, "NOT AN INTEGER");
				    		       	   		 			 RESULT = new Exp(Type.errortype(), "", "");
					  	   		     } 
					  	   		     else { parser.code.append("		; array_access\n");
										String locT = sn.cs.getLocT();
										String locN = sn.cs.getLocN();
										if(locT.endsWith("**")) { parser.code.append("	"+Tmp.nv()+" = load "+locT+" "+locN+"\n");
														  locT = locT.replaceFirst("\\*", "");
														  locN = Tmp.lv();
					   	 								  sn.cs.putLocT(locT);
					   	 								  sn.cs.putLocN(locN);
										}
										e.load();
										String index = Tmp.lv();
										if(locT.endsWith("]*")) parser.code.append("	"+Tmp.nv()+" = getelementptr "+locT+" "+locN+", i32 0, i32 "+index+"\n");
										else parser.code.append("	"+Tmp.nv()+" = getelementptr "+locT+" "+locN+", i32 "+index+"\n");
										Type t = ((Array)t1).getBase();
										RESULT = new Exp(t, t.getCode()+"*", Tmp.lv());
								     }
			   			     }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_access",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // method_invocation ::= SUPER DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList e = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_invocation",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // method_invocation ::= primary DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList eL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) if(!e1.type.isReference()) { parser.sem_error(""+e1.type, "NOT A REFERENCE");
				    		 	   			   	  RESULT = new Exp(Type.errortype(), "", "");
			   			   }
			   			   else { Type name = ((Reference)e1.type).getReferred();
			   	   			    if (!name.isName()) { parser.sem_error(""+e1.type, "NOT A CLASS");
				    		       	 			  RESULT = new Exp(Type.errortype(), "", "");
			   	   			    }
			   	   			    else { Name c = (Name)name;
								     Symb sn = Env.get(n, c.getEnv()); 
			   			     		     if(sn == null) { parser.sem_error(n,"UNKNOWN NAME"); 
									       	    RESULT = new Exp(Type.errortype(), "", "");
								     }
			   			     		     else if (!sn.isPublic() && !Name.getCurrentClass().isSubclass(sn.getOwner())) { parser.sem_error(n, "ILLEGAL ACCESS TO PRIVATE ATTRIBUTE");
				    					 				     			     	      		  		 RESULT = new Exp(Type.errortype(), "", "");
						  	     		    }
						  	     		    else { String cName = c.getName(); 
										     ListIterator l = eL.list.listIterator();
								 		     parser.code.append("		; method_invocation\n");
										     parser.code.append("	"+Tmp.nv()+" = load "+e1.locT+" "+e1.locN+"\n");
										     String obj_ptr = Tmp.lv();
										     while (l.hasNext()) { Exp e = (Exp)l.next();
												   		   if(e.locT.contains("*")) if(e.locN.endsWith("&")) e.locN = e.locN.replace('&', ' ').trim(); 
											    				     	    		    else if(e.type.isArray()) { String t = ((Array)e.type).getBase().getCode()+"*";
																				   	  		  parser.code.append("	"+Tmp.nv()+" = bitcast "+e.locT+" "+e.locN+" to "+t+"\n");
 	    																			   	  		  e.locT = t;
																				   	  		  e.locN = Tmp.lv();
																    	   		   }
																    	   		   else if(!e.locT.startsWith("i8* getelementptr")) { if(e.locN.startsWith("getelementptr")) { parser.code.append("	"+Tmp.nv()+" = "+e.locN+"\n");
														   																		   	  		  e.locN = Tmp.lv();
																									    	   		   }
																									  	   		   parser.code.append("	"+Tmp.nv()+" = load "+e.locT+" "+e.locN+"\n");
																			         				     	  	   		   e.locT = e.locT.replaceFirst("\\*", "");
																								     	  	   		   e.locN = Tmp.lv();
											    						   	  	   }
								     		    } 
										    Type t1 = sn.getType();
				    				     		    if(!t1.isMethod()) { parser.sem_error(""+t1, "NOT A METHOD");
				    		             			   	  		 RESULT = new Exp(Type.errortype(), "", "");
			   	    				     		    }
								     		    else { Type t3 = ((Method)t1).getRange();
											     if(t3 == Type.voidtype()) parser.code.append("	call void @"+cName+"_"+n+"("); 
											     else parser.code.append("	"+Tmp.nv()+" = call "+t3.getCode()+" @"+cName+"_"+n+"(");
								     		    	     l = eL.list.listIterator();
								     		 	     parser.code.append("%struct."+cName+"* "+obj_ptr);											
								  			     while(l.hasNext()) { Exp e = (Exp)l.next();
											   			 	  parser.code.append(", "+e.locT+" "+e.locN);
								 			     }
								 		  	     Type t5 = ((Method)t1).getDomain();
										 	     if(t5 != eL.type) { parser.sem_error(""+t5+", "+eL.type, "INCOMPATIBLE ARGUMENT IN METHOD INVOCATION "+n);
				    				             	  				 RESULT = new Exp(Type.errortype(), "", "");
			   	  	   						     }
											     else { parser.code.append(")\n");
											  	      Labels lab = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
									 	  	   	      RESULT = new Exp(t3, t3.getCode(), Tmp.lv(), lab);
								     		  	     }
										    }
									   }								     
			   			          }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_invocation",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // method_invocation ::= name LPAREN argument_list_opt RPAREN 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList eL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second)
					  parse: { if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   	      			   	 RESULT = new Exp(Type.errortype(), "", "");
			   			     }
			   			     else { Name c = sn.cs.getOwner();
								String cName = null;
								if(c != null) cName = c.getName(); 
								ListIterator l = eL.list.listIterator();
								parser.code.append("		; method_invocation\n");
								while (l.hasNext()) { Exp e = (Exp)l.next();
											    if(e.locT.contains("*")) if(e.locN.endsWith("&")) e.locN = e.locN.replace('&', ' ').trim(); 
											    				     else if(e.type.isArray()) { String t = ((Array)e.type).getBase().getCode()+"*";
																				   parser.code.append("	"+Tmp.nv()+" = bitcast "+e.locT+" "+e.locN+" to "+t+"\n");
 	    																			   e.locT = t;
																				   e.locN = Tmp.lv();
																    }
																    else if(!e.locT.startsWith("i8* getelementptr")) { if(e.locN.startsWith("getelementptr")) { parser.code.append("	"+Tmp.nv()+" = "+e.locN+"\n");
														   																		   e.locN = Tmp.lv();
																									    }
																									  parser.code.append("	"+Tmp.nv()+" = load "+e.locT+" "+e.locN+"\n");
																			         				     	  e.locT = e.locT.replaceFirst("\\*", "");
																								     	  e.locN = Tmp.lv();
											    						   }
								}
								if(sn.name.equals("printf")) parser.code.append("	"+Tmp.nv()+" = call i32 (i8*, ...)* @printf(");
						   		else if(sn.name.equals("scanf")) parser.code.append("	"+Tmp.nv()+" = call i32 (i8*, ...)* @scanf(");
							  	     else { Type t1 = sn.cs.getType();
				    						if(!t1.isMethod()) { parser.sem_error(""+t1, "NOT A METHOD");
				    		             			   		   RESULT = new Exp(Type.errortype(), "", "");
													   break parse;
			   	    						}
										else { Type t3 = ((Method)t1).getRange();
											 if(t3 == Type.voidtype()) parser.code.append("	call void @"+cName+"_"+sn.name+"("); 
											 else parser.code.append("	"+Tmp.nv()+" = call "+t3.getCode()+" @"+cName+"_"+sn.name+"(");
 										}
								     }
								l = eL.list.listIterator();
								if(sn.name.equals("scanf") || sn.name.equals("printf")) { Exp e = (Exp)l.next();
											   						    parser.code.append(e.locT+" "+e.locN);
								}
								else { if(sn.cs == Env.get(sn.name)) if(Method.getCurrentName().equals("main")) parser.objLoc = "null";
														 else parser.objLoc = "%this";
									 parser.code.append("%struct."+cName+"* "+parser.objLoc);
								}											
								while(l.hasNext()) { Exp e = (Exp)l.next();
											   parser.code.append(", "+e.locT+" "+e.locN);
								}
			   	    				if(sn.name.equals("printf")||sn.name.equals("scanf")){ parser.code.append(")\n");
																	 RESULT = new Exp(Type.integer(), "", "");										  	 						 
								}
 								else { 
									 Type t1 = sn.cs.getType();
									 Type t5 = ((Method)t1).getDomain();
									 if(t5 != eL.type) { parser.sem_error(""+t5+", "+eL.type, "INCOMPATIBLE ARGUMENT IN METHOD INVOCATION "+sn.name);
				    				             	  	   RESULT = new Exp(Type.errortype(), "", "");
			   	  	   				 }
					   				 else { parser.code.append(")\n");
										  Type t4 = ((Method)t1).getRange();
										  Labels lab = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
									 	  RESULT = new Exp(t4, t4.getCode(), Tmp.lv(), lab);
									 }
								}
			   			     }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_invocation",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // field_access ::= SUPER DOT IDENTIFIER 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { Name c = Name.getCurrentClass();
						     String sn = c.getSuper();						     
 			   			     if(sn == null){ parser.sem_error(""+c,"NOT A SUBCLASS");
				    	     				   RESULT = new Exp(Type.errortype(), "", "");
			   			     }
						     else {	Symb ss = Env.get(sn);
								Name sc = (Name)ss.getType();
						    		Symb s = Env.get(n, sc.getEnv());
			   			     		if(s == null){ parser.sem_error(n,"UNKNOWN NAME");
				    	     				  	   RESULT = new Exp(Type.errortype(), "", "");
			   			     		} 
				  			      else RESULT = new Exp(s.getType(), "", "");
						     }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_access",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // field_access ::= primary DOT IDENTIFIER 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { if(!e.type.isReference()) { parser.sem_error(""+e.type, "NOT A REFERENCE");
				    					 	    	   RESULT = new Exp(Type.errortype(), "", "");
						     }
				  		     else { Type r = ((Reference)e.type).getReferred();
								if(!r.isName()) { parser.sem_error(""+r, "NOT A CLASS");
				    					 	      RESULT = new Exp(Type.errortype(), "", "");
						     		}
								else { Symb s = Env.get(n, ((Name)r).getEnv()); 
			   			     			 if(s == null){ parser.sem_error(n,"UNKNOWN NAME");
				    	     				  		    RESULT = new Exp(Type.errortype(), "", "");
			   			     			 } 
			   			     			 else if(!s.isPublic() && !Name.getCurrentClass().isSubclass(s.getOwner())) { parser.sem_error(n, "ILLEGAL ACCESS TO PRIVATE FIELD");
				    					 				     	     				 	     			RESULT = new Exp(Type.errortype(), "", "");
						  	    			}
				  			    			else RESULT = new Exp(s.getType(), "", "");
						     		}								
						     }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_access",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // dims ::= dims LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dims",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // dims ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dims",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // dims_opt ::= dims 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dims_opt",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // dims_opt ::= 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dims_opt",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // dim_expr ::= LBRACK expression RBRACK 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_expr",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // dim_exprs ::= error NT$21 dim_expr 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_exprs",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$21 ::= 
            {
              Exp RESULT =null;
 parser.report_error("dim_expr","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",113, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // dim_exprs ::= dim_exprs dim_expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_exprs",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // dim_exprs ::= dim_expr 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_exprs",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // array_creation_expression ::= NEW name dim_exprs dims_opt 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) if(!e2.type.isInteger()) { parser.sem_error(""+e2.type, "NOT AN INTEGER");
				    			 			 	RESULT = new Exp(Type.errortype(), "", "");
		   	   			   }
			   			   else { if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   			 			  	RESULT = new Exp(Type.errortype(), "", "");
			   	    			    }
			   	    			    else try { int s = Integer.parseInt(e2.locN);
									   Type t1 = Type.reference(sn.cs.getType());
								  	   parser.code.append("		; array_creation\n");									
  								  	   parser.code.append("	"+Tmp.nv()+" = malloc ["+e2.locN+" x "+t1.getCode()+"]\n");
								  	   Type t = Type.array(s, t1);
								  	   String c = "["+s+" x "+t1.getCode()+"]*";
							    	  	   RESULT = new Exp(t, c, Tmp.lv());
						   	  	   }
							  	   catch (Exception e) { parser.sem_error(""+e2.locN, "NOT AN INTEGER_LITERAL");
				    			 			 		 RESULT = new Exp(Type.errortype(), "", "");
							  	   }
			   			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_creation_expression",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // array_creation_expression ::= NEW primitive_type dim_exprs dims_opt 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) if(!e2.type.isInteger()) { parser.sem_error(""+e2.type, "NOT AN INTEGER");
				    			 			 	RESULT = new Exp(Type.errortype(), "", "");
		   				   }
			   			   else try { int s = Integer.parseInt(e2.locN);
								  parser.code.append("		; array_creation\n");									
  								  parser.code.append("	"+Tmp.nv()+" = malloc ["+e2.locN+" x "+t1.getCode()+"]\n");
								  Type t = Type.array(s, t1);
								  String c = "["+s+" x "+t1.getCode()+"]*";
							    	  RESULT = new Exp(t, c, Tmp.lv());
						   	  }
							  catch (Exception e) { parser.sem_error(""+e2.locN, "NOT AN INTEGER_LITERAL");
				    			 			 	RESULT = new Exp(Type.errortype(), "", "");
							  }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_creation_expression",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // argument_list ::= error NT$20 expression 
            {
              ParamList RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (ParamList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$20 ::= 
            {
              ParamList RESULT =null;
 parser.report_error("argument_list","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // argument_list ::= argument_list COMMA expression 
            {
              ParamList RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamList eL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { eL.list.add(e);
			   			     eL.type = Type.product(eL.type, e.type);
			   			     RESULT = eL;
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // argument_list ::= expression 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { List l = new ArrayList();
			   			     l.add(e);
			   			     RESULT = new ParamList(e.type, l);
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // argument_list_opt ::= argument_list 
            {
              ParamList RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList eL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) RESULT = eL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list_opt",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // argument_list_opt ::= 
            {
              ParamList RESULT =null;
		 if(parser.second) RESULT = new ParamList(Type.voidtype(), new ArrayList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list_opt",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // class_body_opt ::= class_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_opt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // class_body_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_opt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // class_instance_creation_expression ::= NEW name NT$19 LPAREN argument_list_opt RPAREN class_body_opt 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamList e2 = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(parser.second) { if(sn.rs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   		     			       RESULT = new Exp(Type.errortype(), "", "");
			   			     }
			   			     else { String objptr = Tmp.lv();
								ListIterator l = e2.list.listIterator();
								parser.code.append("		; constructor_invocation\n");
								while (l.hasNext()) { Exp e = (Exp)l.next();
											    if(e.locT.contains("*")) if(e.locN.endsWith("&")) e.locN = e.locN.replace('&', ' ').trim(); 
											    				     else if(e.type.isArray()) { String t = ((Array)e.type).getBase().getCode()+"*";
																				   parser.code.append("	"+Tmp.nv()+" = bitcast "+e.locT+" "+e.locN+" to "+t+"\n");
 	    																			   e.locT = t;
																				   e.locN = Tmp.lv();
																    }
																    else if(!e.locT.startsWith("i8* getelementptr")) { parser.code.append("	"+Tmp.nv()+" = load "+e.locT+" "+e.locN+"\n");
																			         				     	    e.locT = e.locT.replaceFirst("\\*", "");
																								     	    e.locN = Tmp.lv();
											    						   }
								}
								Type t = sn.rs.getType();
				    		     		if (!t.isName()) { parser.sem_error(""+t, "NOT A CLASS");
				    		           				 RESULT = new Exp(Type.errortype(), "", "");
			   	    		     		}
			   	    		     		else { Env e = ((Name)t).getEnv();
			   	    	     		      	 Symb s1 = Env.get(sn.name, e);
					     				 Type t1 = s1.getType();
			   	    	     				 if(!t1.isConstructor()) { parser.sem_error(""+t1, "NOT A CONSTRUCTOR");
				    			    	     		 		  	   RESULT = new Exp(Type.errortype(), "", "");
			   	    	     			       }
			          	     				 else if(((Constructor)t1).getDomain() != e2.type) { parser.sem_error(""+e2.type, "INCOMPATIBLE ARGUMENT IN CONSTRUCTOR INVOCATION "+sn.name);
				    					 				  		     	    RESULT = new Exp(Type.errortype(), "", "");
			   	  	   	    		     		}
					   	    		            else if(!s1.isPublic() && !Name.getCurrentClass().isSubclass(sn.rs.getOwner())) { parser.sem_error(sn.name, "ILLEGAL ACCESS TO PRIVATE CONSTRUCTOR");
				    					 				     			     	      			          RESULT = new Exp(Type.errortype(), "", "");
						  	   		    	     }
						  	   		    	     else { parser.code.append("	call void @"+sn.name+"("+"%struct."+sn.name+"* "+objptr);
										     		l = e2.list.listIterator();
										     		while(l.hasNext()) { Exp pe = (Exp)l.next();
											    		 	 	   parser.code.append(", "+pe.locT+" "+pe.locN);
										     		}
										     		parser.code.append(")\n");
												RESULT = new Exp(((Constructor)t1).getRange(), "%struct."+sn.name+"*", objptr);
									    	    }
			 	    		     		     }
			   			     }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_instance_creation_expression",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$19 ::= 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(parser.second) if(sn.rs != null) { Type t = sn.rs.getType();
				    					     if(t.isName()) { Env e = ((Name)t).getEnv();
			   	    	     		      				    Symb s1 = Env.get(sn.name, e);
					     							    Type t1 = s1.getType();
			   	    	     							    if(t1.isConstructor()) { parser.code.append("		; class_instance_creation_expression\n");																 
																     parser.code.append("	"+Tmp.nv()+" = malloc %struct."+sn.name+"\n");																     
												    } 
									     }
									   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",111, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // primary_no_new_array ::= error NT$18 DOT THIS 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$18 ::= 
            {
              Exp RESULT =null;
 parser.report_error("primary_no_new_array","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // primary_no_new_array ::= LPAREN M11 error NT$17 RPAREN 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$17 ::= 
            {
              Exp RESULT =null;
 parser.report_error("primary_no_new_array","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // primary_no_new_array ::= name DOT THIS 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // primary_no_new_array ::= name DOT CLASS 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // primary_no_new_array ::= array_type DOT CLASS 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // primary_no_new_array ::= VOID DOT CLASS 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // primary_no_new_array ::= primitive_type DOT CLASS 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // primary_no_new_array ::= array_access 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // primary_no_new_array ::= method_invocation 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if((parser.second) && (e.type == Type.bool())) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;									    
											    if(!l.bvalue) parser.code.append("	br i1 "+e.locN+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
											    l.bvDone = true;
											    RESULT = new Exp(Type.bool(), e.locT, e.locN, l);
			   }
			   else RESULT = e; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // primary_no_new_array ::= field_access 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // primary_no_new_array ::= class_instance_creation_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // primary_no_new_array ::= LPAREN M11 expression RPAREN 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if((parser.second) && (e.type == Type.bool()) && (l!= null)) RESULT = new Exp(Type.bool(), e.locT, e.locN, l);
			   else RESULT = e; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // primary_no_new_array ::= THIS 
            {
              Exp RESULT =null;
		 RESULT = new Exp(Type.reference(Name.getCurrentClass()), "", ""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // primary_no_new_array ::= literal 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if((parser.second) && (e.type == Type.bool())) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;									    
											    if(!l.bvalue) if (e.locN.equals("true")) parser.code.append("	br label %"+l.lTrue+"\n");
											    			else parser.code.append("	br label %"+l.lFalse+"\n"); 
											    RESULT = new Exp(Type.bool(), e.locT, e.locN, l);
			   }
			   else RESULT = e; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // M11 ::= 
            {
              Labels RESULT =null;
		 if (parser.second) RESULT = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M11",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // primary ::= array_creation_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // primary ::= primary_no_new_array 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // return_statement ::= RETURN M14 expression_opt SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) { Type r = Method.getCurrent().getRange();
						     if(e.type != r) if(e.type.isNumber() && r.isNumber()) { Type mt = Type.max(e.type, r);
																 String t = mt.getCode();
															 	 if(e.type != mt) { parser.code.append("		; return_statement\n");
																			  e.load();
									  						 				  String l = e.widen(mt);
																			  parser.code.append("	store "+t+" "+l+", "+t+"*"+" %tmp\n");
																			  parser.code.append("	"+Tmp.nv()+" = load "+t+"*"+" %tmp\n");
																			  parser.code.append("	store "+t+" "+Tmp.lv()+", "+t+"*"+" %retval\n");
																			  parser.code.append("	br label %return\n");
																 }
							  				 					 else  parser.sem_error(""+r+", "+e.type, "RANGE TYPE SHORTER THAN RETURNED TYPE");
									   }
							  		   else  parser.sem_error(""+r+", "+e.type, "INCOMPATIBLE TYPES");
						     else { String t = e.type.getCode();
								parser.code.append("		; return_statement\n");
								e.load();
								parser.code.append("	store "+e.locT+" "+e.locN+", "+t+"*"+" %tmp\n");
								parser.code.append("	"+Tmp.nv()+" = load "+t+"*"+" %tmp\n");
								parser.code.append("	store "+t+" "+Tmp.lv()+", "+t+"*"+" %retval\n");
								parser.code.append("	br label %return\n");	
						     }
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // M14 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = new Labels();
						     l.bvalue = true;
						     RESULT = l;
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M14",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // while_statement_no_short_if ::= WHILE LPAREN M7 expression M5 RPAREN statement_no_short_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   else { parser.code.append("	br label %"+l.lBegin+"\n");
							    parser.code.append(l.lFalse+":	; lFalse\n");
						   }	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement_no_short_if",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // while_statement ::= WHILE error NT$16 M5 RPAREN statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$16 ::= 
            {
              Object RESULT =null;
 parser.report_error("expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // while_statement ::= WHILE LPAREN M7 expression M5 RPAREN statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   else { parser.code.append("	br label %"+l.lBegin+"\n");
							    parser.code.append(l.lFalse+":	; l_False\n");
						   }	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // if_then_else_statement_no_short_if ::= IF LPAREN M4 expression M5 RPAREN statement_no_short_if M6 ELSE statement_no_short_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   else { parser.code.append("	br label %"+l.lNext+"\n");
							    parser.code.append(l.lNext+":	; l_Next\n");
						   }	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_else_statement_no_short_if",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // if_then_else_statement ::= IF LPAREN M4 error NT$15 M5 RPAREN statement_no_short_if ELSE statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_else_statement",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$15 ::= 
            {
              Object RESULT =null;
 parser.report_error("expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // if_then_else_statement ::= IF LPAREN M4 expression M5 RPAREN statement_no_short_if M6 ELSE statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   else { parser.code.append("	br label %"+l.lNext+"\n");
							    parser.code.append(l.lNext+":	; l_Next\n");
						   }	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_else_statement",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // if_then_statement ::= IF error NT$14 M5 RPAREN statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_statement",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$14 ::= 
            {
              Object RESULT =null;
 parser.report_error("if_then_statement","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // if_then_statement ::= IF LPAREN M4 expression M5 RPAREN statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   else { parser.code.append("	br label %"+l.lFalse+"\n");
							    parser.code.append(l.lFalse+":	; l_False\n");
						   }	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_statement",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // M7 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = new Labels();
			    			     parser.code.append("	br label %"+l.lBegin+"\n");
			    			     parser.code.append(l.lBegin+":	; l_Begin\n");
						     RESULT = l;
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M7",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // M6 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
			    			     parser.code.append("	br label %"+l.lNext+"\n");
			    			     parser.code.append(l.lFalse+":	; l_False\n");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M6",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // M5 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			    			     parser.code.append(l.lTrue+":	; l_True\n");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M5",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // M4 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) RESULT = new Labels(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M4",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // statement_expression ::= class_instance_creation_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // statement_expression ::= method_invocation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // statement_expression ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression_statement ::= statement_expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_statement",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // empty_statement ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty_statement",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // statement_without_trailing_substatement ::= return_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_without_trailing_substatement",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // statement_without_trailing_substatement ::= expression_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_without_trailing_substatement",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // statement_without_trailing_substatement ::= empty_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_without_trailing_substatement",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // statement_without_trailing_substatement ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_without_trailing_substatement",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // statement_no_short_if ::= while_statement_no_short_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_short_if",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // statement_no_short_if ::= if_then_else_statement_no_short_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_short_if",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // statement_no_short_if ::= statement_without_trailing_substatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_short_if",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // statement ::= if_then_else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // statement ::= if_then_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // statement ::= statement_without_trailing_substatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // local_variable_declaration_statement ::= type error NT$13 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_variable_declaration_statement",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$13 ::= 
            {
              Object RESULT =null;
 parser.report_error("local_variable_declaration_statement","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // local_variable_declaration_statement ::= type variable_declarators assign_opt SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_variable_declaration_statement",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // block_statement ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // block_statement ::= local_variable_declaration_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // block_statements ::= error NT$12 block_statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statements",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$12 ::= 
            {
              Object RESULT =null;
 parser.report_error("block_statements","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // block_statements ::= block_statements block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statements",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // block_statements ::= block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statements",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // block_statements_opt ::= block_statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statements_opt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // block_statements_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statements_opt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // block ::= LBRACE M2 error NT$11 RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$11 ::= 
            {
              Object RESULT =null;
 parser.report_error("block","WRONG");
			   System.out.println(" BLOCK EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
 			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // block ::= LBRACE M2 block_statements_opt RBRACE 
            {
              Object RESULT =null;
		 System.out.println(" BLOCK EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // explicit_constructor_invocation ::= primary DOT SUPER LPAREN argument_list_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("explicit_constructor_invocation",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // explicit_constructor_invocation ::= primary DOT THIS LPAREN argument_list_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("explicit_constructor_invocation",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // explicit_constructor_invocation ::= SUPER LPAREN argument_list_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamList e2 = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(parser.second) { Name c = Name.getCurrentClass();
						     String sup = c.getSuper();
						     if(sup == null){ parser.sem_error(c.getName(), "NOT HAVING A SUPERCLASS");
				   		     			    RESULT = new Exp(Type.errortype(), "", "");
			   			     }
						     else { Name sc = Env.get(sup).getOwner();
								Env se = sc.getEnv();
								Symb ss = Env.get(sup, se);
								if(ss == null) { parser.sem_error(sup, "NOT HAVING A CONSTRUCTOR");
				   		     			           RESULT = new Exp(Type.errortype(), "", "");
			   			     		}
								else { Type t1 = ss.getType();
			   	    	     				 if(!t1.isConstructor()) { parser.sem_error(""+t1, "NOT A CONSTRUCTOR");
				    			    	     		 		  	   RESULT = new Exp(Type.errortype(), "", "");
			   	    	     			       } 
									 else { parser.code.append("		; explicit_constructor_invocation_SUPER\n");
										  ListIterator l = e2.list.listIterator();
										  while (l.hasNext()) { Exp e = (Exp)l.next();
											    			if(e.locT.contains("*")) if(e.locN.endsWith("&")) e.locN = e.locN.replace('&', ' ').trim(); 
											    				     			 else if(e.type.isArray()) { String t = ((Array)e.type).getBase().getCode()+"*";
																				   		     parser.code.append("	"+Tmp.nv()+" = bitcast "+e.locT+" "+e.locN+" to "+t+"\n");
 	    																			   		     e.locT = t;
																				    		     e.locN = Tmp.lv();
																    			}
																    			else if(!e.locT.startsWith("i8* getelementptr")) { parser.code.append("	"+Tmp.nv()+" = load "+e.locT+" "+e.locN+"\n");
																			         				     	      		e.locT = e.locT.replaceFirst("\\*", "");
																								     	      		e.locN = Tmp.lv();
											    								     }
										  }
			          	     				 	  if(((Constructor)t1).getDomain() != e2.type) { parser.sem_error(""+e2.type, "INCOMPATIBLE ARGUMENT IN CONSTRUCTOR INVOCATION "+sup);
				    					 				  		     	    		 RESULT = new Exp(Type.errortype(), "", "");
			   	  	   	    		     		  }
					   	    		              else { parser.code.append("	"+Tmp.nv()+" = bitcast %struct."+c.getName()+"* %this to %struct."+sup+"*\n");
											   parser.code.append("	call void @"+sup+"("+"%struct."+sup+"* "+Tmp.lv());
										     	   l = e2.list.listIterator();
										     	   while(l.hasNext()) { Exp pe = (Exp)l.next();
											    		 	 	parser.code.append(", "+pe.locT+" "+pe.locN);
										     	   }
										     	   parser.code.append(")\n");
											   RESULT = new Exp(((Constructor)t1).getRange(), "%struct."+sup+"*", Tmp.lv());
									    	  }
			 	    		     		      }
			   			           }
						    }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("explicit_constructor_invocation",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // explicit_constructor_invocation ::= THIS LPAREN argument_list_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("explicit_constructor_invocation",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // M2 ::= 
            {
              Object RESULT =null;
		 System.out.println(" BLOCK ENTRY");
			   if(parser.first) Env.push(); 
			   if(parser.second) { Env.next();
						     ListIterator l = Env.getVars().listIterator();
						     if(l.hasNext()) parser.code.append("		; M2\n");
						     while(l.hasNext()) { String p = (String)l.next();
										  Symb s = Env.get(p);
			   			     				  Type t = s.getType();						     				 
										  String tc = s.getType().getCode();										  
						     				  parser.code.append("	%"+p+" = alloca "+tc+"\n");						     				  
										  s.putLocT(tc+"*");
										  s.putLocN("%"+p);
						     }
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // constructor_body ::= LBRACE M3 error RBRACE 
            {
              Object RESULT =null;
		 parser.report_error("block","WRONG");
			   System.out.println(" CONSTRUCTOR EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor_body",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // constructor_body ::= LBRACE M3 block_statements_opt RBRACE 
            {
              Object RESULT =null;
		 System.out.println(" CONSTRUCTOR EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor_body",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // constructor_body ::= LBRACE M3 explicit_constructor_invocation block_statements_opt RBRACE 
            {
              Object RESULT =null;
		 System.out.println(" CONSTRUCTOR EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor_body",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // constructor_declarator ::= modifiers_opt IDENTIFIER NT$10 LPAREN formal_parameter_list_opt RPAREN 
            {
              Type RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList pL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.first) { Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(Type.constructor(pL.type, Type.reference(Type.getName(n))), c, m.booleanValue());
			   			    else { if(m.booleanValue()) parser.warning(n, "PUBLIC CONSTRUCTOR DECLARED IN PRIVATE CLASS");
				    		           s = new Symb(Type.constructor(pL.type, Type.reference(Type.getName(n))), c, false);
			   			    }	
			   			    Env.putSymb(n, s);
			   }
			   if(parser.second) { Symb msymb = Env.get(n);
						     Constructor c = (Constructor)msymb.getType();
						     Constructor.putCurrent(n, c);
						     Type t2 = c.getRange();
						     String ptrt = "%struct."+n+"*";
						     parser.code.append(ptrt+" %this");
						     ListIterator l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
									        Symb s = Env.get(p);
						                       	  Type t = s.getType();
									        if(t.isArray()) { String tc = ((Array)t).getBase().getCode()+"*";
												        parser.code.append(", "+tc+" "+s.getLocN());
													  s.putLocT(tc);
									        }
									        else parser.code.append(", "+s.getLoc());
						     } 
						     parser.code.append(") {\nentry:\n");
						     l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
										  Symb s = Env.get(p);
										  Type t = s.getType();
			   			     				  String tc;
										  if(t.isArray()) tc = s.getLocT();
										  else tc = t.getCode();
						     				  parser.code.append("	%"+p+"_addr = alloca "+tc+"\n");
						     				  parser.code.append("	store "+s.getLoc()+", "+tc+"* %"+p+"_addr\n");
										  s.putLocT(tc+"*");
										  s.putLocN("%"+p+"_addr");
						     }
						     RESULT = t2;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor_declarator",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$10 ::= 
            {
              Type RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(parser.first) { if (!Env.put(n, null)) parser.sem_error(n,"DUPLICATE NAME");
						    else { Name c = Name.getCurrentClass();
			   			    	     String cname = c.getName();
						    	     if (!n.equals(cname)) parser.sem_error(n+", "+cname,"CONSTRUCTOR NAME DIFFERENT FROM CLASS NAME");
						    }
						    System.out.println(" CONSTRUCTOR ENTRY: "+n);
		 				    Env.push();
			   }
			   if(parser.second) { System.out.println(" CONSTRUCTOR ENTRY: "+n);
						     Env.next();
						     Symb msymb = Env.get(n);
						     Constructor c = (Constructor)msymb.getType();
						     parser.code.append("		; constructor_declarator\n");
						     parser.code.append("define "+Type.voidtype().getCode()+" @"+n+"(");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // constructor_declaration ::= constructor_declarator constructor_body 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) { parser.code.append("		; constructor_declaration\n");
					       parser.code.append("	br label %return\n");
					       parser.code.append("return:\n");
					       parser.code.append("	ret void\n");
					       parser.code.append("}\n\n");
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor_declaration",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // M3 ::= 
            {
              Object RESULT =null;
		 if(parser.second) { ListIterator l = Env.getVars().listIterator();
						     if(l.hasNext())parser.code.append("		; M3\n");
						     while(l.hasNext()) { String p = (String)l.next();
										  Symb s = Env.get(p);
			   			     				  Type t = s.getType();
										  if(!t.isArray()) { String tc = s.getType().getCode();										  
						     				  			   parser.code.append("	%"+p+" = alloca "+tc+"\n");						     				  
										  			   s.putLocT(tc+"*");
										  			   s.putLocN("%"+p);
										  }
						     }
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // method_body ::= SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println(" METHOD EXIT");
			   if(parser.first) Env.pop();
			   if(parser.second) Env.next(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_body",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // method_body ::= LBRACE M3 error RBRACE 
            {
              Object RESULT =null;
		 parser.report_error("block","WRONG");
			   System.out.println(" METHOD EXIT");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_body",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // method_body ::= LBRACE M3 block_statements_opt RBRACE 
            {
              Object RESULT =null;
		 System.out.println(" METHOD EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_body",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // formal_parameter ::= type variable_declarator_id 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.first) Env.remVar(n);
			   RESULT = n; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // formal_parameter_list ::= error NT$9 formal_parameter 
            {
              ParamList RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (ParamList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$9 ::= 
            {
              ParamList RESULT =null;
 parser.report_error("formal_parameter_list","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // formal_parameter_list ::= formal_parameter_list COMMA formal_parameter 
            {
              ParamList RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamList pL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pL.list.add(n);
			   pL.type = Type.product(pL.type, Env.get(n).getType());
			   RESULT = pL; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // formal_parameter_list ::= formal_parameter 
            {
              ParamList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List l = new ArrayList();
			   l.add(n);
			   RESULT = new ParamList(Env.get(n).getType(), l); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // formal_parameter_list_opt ::= formal_parameter_list 
            {
              ParamList RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList pL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list_opt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // formal_parameter_list_opt ::= 
            {
              ParamList RESULT =null;
		 RESULT = new ParamList(Type.voidtype(), new ArrayList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list_opt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // method_header ::= error NT$8 LPAREN formal_parameter_list_opt RPAREN 
            {
              Type RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$8 ::= 
            {
              Type RESULT =null;
 parser.report_error("method_header","WRONG");
			   Env.push();
 			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // method_header ::= modifiers_opt VOID IDENTIFIER NT$7 LPAREN formal_parameter_list_opt RPAREN 
            {
              Type RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList pL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.first) { Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(Type.method(pL.type, Type.voidtype()), c, m.booleanValue());
			   			    else { if(m.booleanValue()) parser.warning(n, "PUBLIC METHOD DECLARED IN PRIVATE CLASS");
				    		           s = new Symb(Type.method(pL.type, Type.voidtype()), c, false);
			   			    }
			   			    Env.putSymb(n, s);
			   }
			   if(parser.second) { Symb msymb = Env.get(n);
						     Method.putCurrent(n, (Method)msymb.getType());
						     String ptrt = "%struct."+Name.getCurrentClass().getName()+"*";
						     if(!n.equals("main")) parser.code.append(ptrt+" %this");
						     ListIterator l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
									        Symb s = Env.get(p);
						                       	  Type t = s.getType();
									        if(t.isArray()) { String tc = ((Array)t).getBase().getCode()+"*";
												        parser.code.append(", "+tc+" "+s.getLocN());
													  s.putLocT(tc);
									        }
									        else parser.code.append(", "+s.getLoc());
						     }  
						     parser.code.append(") {\nentry:\n");
						     l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
										  Symb s = Env.get(p);
										  Type t = s.getType();
			   			     				  String tc;
										  if(t.isArray()) tc = s.getLocT();
										  else tc = t.getCode();
						     				  parser.code.append("	%"+p+"_addr = alloca "+tc+"\n");
						     				  parser.code.append("	store "+s.getLoc()+", "+tc+"* %"+p+"_addr\n");
										  s.putLocT(tc+"*");
										  s.putLocN("%"+p+"_addr");
						     }
						     RESULT = Type.voidtype();
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$7 ::= 
            {
              Type RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(parser.first) { if (!Env.put(n, null)) parser.sem_error(n,"DUPLICATE NAME");
						    System.out.println(" METHOD ENTRY: "+n);
		 				    Env.push();
			   }
			   if(parser.second) { System.out.println(" METHOD ENTRY: "+n);
						     Env.next();
						     parser.code.append("		; method_header\n");
						     if(n.equals("main")) parser.code.append("define void @main(");
					           else parser.code.append("define "+Type.voidtype().getCode()+" @"+Name.getCurrentClass().getName()+"_"+n+"(");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // method_header ::= modifiers_opt type IDENTIFIER NT$6 LPAREN formal_parameter_list_opt RPAREN 
            {
              Type RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList pL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.first) { Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(Type.method(pL.type, t1), c, m.booleanValue());
			   			    else { if(m.booleanValue()) parser.warning(n, "PUBLIC METHOD DECLARED IN PRIVATE CLASS");
				    		           s = new Symb(Type.method(pL.type, t1), c, false);
			   			    }
			   			    Env.putSymb(n, s); 
			   }
			   if(parser.second) { Name c = Name.getCurrentClass();
						     Symb msymb = Env.get(n, c.getEnv());
						     Method.putCurrent(n, (Method)msymb.getType());
						     String ptrt = "%struct."+c.getName()+"*";
						     parser.code.append(ptrt+" %this");
						     ListIterator l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
									        Symb s = Env.get(p);
						                       	  Type t = s.getType();
									        if(t.isArray()) { String tc = ((Array)t).getBase().getCode()+"*";
												        parser.code.append(", "+tc+" "+s.getLocN());
													  s.putLocT(tc);
									        }
									        else parser.code.append(", "+s.getLoc());
						     } 
						     parser.code.append(") {\nentry:\n");
						     l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
										  Symb s = Env.get(p);
										  Type t = s.getType();
			   			     				  String tc;
										  if(t.isArray()) tc = s.getLocT();
										  else tc = t.getCode();
						     				  parser.code.append("	%"+p+"_addr = alloca "+tc+"\n");
						     				  parser.code.append("	store "+s.getLoc()+", "+tc+"* %"+p+"_addr\n");
										  s.putLocT(tc+"*");
										  s.putLocN("%"+p+"_addr");
						     }
						     parser.code.append("	%retval = alloca "+t1.getCode()+"\n");
						     parser.code.append("	%tmp = alloca "+t1.getCode()+"\n");
						     RESULT = t1;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$6 ::= 
            {
              Type RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(parser.first) { if (!Env.put(n, null)) parser.sem_error(n,"DUPLICATE NAME");
						    System.out.println(" METHOD ENTRY: "+n);
		 			          Env.push();
			   }
			   if(parser.second) { System.out.println(" METHOD ENTRY: "+n);
						     Env.next();
						     parser.code.append("		; method_header\n");
						     parser.code.append("define "+t1.getCode()+" @"+Name.getCurrentClass().getName()+"_"+n+"(");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // method_declaration ::= method_header method_body 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) { parser.code.append("		; method_declaration\n");
						     parser.code.append("	br label %return\n");
						     parser.code.append("return:\n");
						     if(t == Type.voidtype()) parser.code.append("	ret void\n"); 
						     else { parser.code.append("	"+Tmp.nv()+" = load "+t.getCode()+"* %retval\n");
						     	    parser.code.append("	ret "+t.getCode()+" "+Tmp.lv()+"\n");
						     }
						     parser.code.append("}\n\n");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_declaration",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variable_declarator_id ::= variable_declarator_id LBRACK RBRACK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator_id",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variable_declarator_id ::= IDENTIFIER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.first) { Boolean m = (Boolean)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			   			    boolean mod = m == null ? false: m.booleanValue();	
			  			    Type t = (Type)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			   			    Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(t, c, mod, t.getCode(), "%"+n);
			   			    else { if(mod) parser.warning(n, "PUBLIC FIELD DECLARED IN PRIVATE CLASS");
				    			     s = new Symb(t, c, false, t.getCode(), "%"+n);
			   			    }
			   			    if (!Env.putVar(n, s)) parser.sem_error(n,"DUPLICATE NAME");						    	
			   }
			   RESULT = n;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator_id",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // M1 ::= 
            {
              Type RESULT =null;
		 RESULT = (Type)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).value; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable_declarators ::= error NT$5 COMMA variable_declarator_id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarators",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$5 ::= 
            {
              Object RESULT =null;
 parser.report_error("variable_declarator_id","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variable_declarators ::= variable_declarators COMMA M1 variable_declarator_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarators",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variable_declarators ::= variable_declarator_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarators",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assign_opt ::= EQ assignment_expression 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("eeeeeeeeeeeeeeeee");System.out.println(e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_opt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assign_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_opt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // field_declaration ::= modifiers_opt type error NT$4 method_declaration 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.report_error("field_declaration","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // field_declaration ::= modifiers_opt type error NT$3 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.report_error("variable_declarators","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // field_declaration ::= modifiers_opt type variable_declarators SEMICOLON 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // class_member_declaration ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_member_declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // class_member_declaration ::= method_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_member_declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // class_member_declaration ::= field_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_member_declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // class_body_declaration ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // class_body_declaration ::= constructor_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // class_body_declaration ::= class_member_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // class_body_declarations ::= class_body_declarations class_body_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declarations",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // class_body_declarations ::= class_body_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declarations",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // class_body_declarations_opt ::= class_body_declarations 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declarations_opt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // class_body_declarations_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declarations_opt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // class_body ::= LBRACE class_body_declarations_opt RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // class_declaration ::= modifiers_opt CLASS IDENTIFIER EXTENDS IDENTIFIER NT$2 class_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String n2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("CLASS EXIT: "+n1);
			   if(parser.first) { List e_vars = new ArrayList();
						    Env e = Env.getCurrent();
						    e_vars.add(new Vars(e, e.getEvars()));
 						    Name cl = Env.get(n1).getOwner();
						    String sup = cl.getSuper();
						    while(sup != null){ cl = Env.get(sup).getOwner();
										e = cl.getEnv();
						    				e_vars.add(0, new Vars(e, e.getEvars()));
										sup = cl.getSuper();
						    }					    
					          ListIterator evl = e_vars.listIterator();
						    int n = 0;
						    String global = "%struct."+n1+" = type { ";
						    boolean first = true;
						    while(evl.hasNext()){ Vars ev = (Vars)evl.next();
										  ListIterator l = ev.vl.listIterator();										  
						    				  while(l.hasNext()){ String v = (String)l.next();
									    				    Symb s = Env.get(v, ev.e);
									    				    String c = s.getType().getCode();
									    				    s.putLocT(c + "*");
									    				    s.putLocN("getelementptr %struct."+n1+"* %this, i32 0, i32 "+n);
									    				    n++;
									    				    if(first) { global = global + c;
															    first = false;
													    }
													    else global = global + ", " + c;
										  }
						    }
						    global = global + " }";
						    Env.putGlobal(global, "struct");
						    Env.get(n1).putLocT(global.replace("%struct."+n1+" = ",""));
						    Env.pop();
						    Env.pop();
			   }
			   if(parser.second) { Env.next();
						     Env.next();
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$2 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println("CLASS ENTRY: "+n1);
			   if(parser.first) switch (Env.putClass(n1, m.booleanValue(),n2)){ case 1: parser.sem_error(n1,"DUPLICATE CLASS NAME");
							     								    break;
													        case 2: parser.sem_error(n2,"UNKNOWN CLASS");
					        }
  			   if(parser.second) { Env.next();
						     Env.next();
						     Name c = Env.get(n1).getOwner();
						     Name.putCurrentClass(c);
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // class_declaration ::= modifiers_opt CLASS IDENTIFIER NT$1 class_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("CLASS EXIT: "+n1);
			   if(parser.first) { Env e = Env.getCurrent();
						    List vars = e.getEvars();
					          ListIterator l = vars.listIterator();
						    int n = 0;
						    String global = "%struct."+n1+" = type { ";
						    boolean first = true;
						    while(l.hasNext()) { String v = (String)l.next();
									    	 Symb s = Env.get(v);
									   	 String c = s.getType().getCode();
									   	 s.putLocT(c + "*");
									  	 s.putLocN("getelementptr %struct."+n1+"* %this, i32 0, i32 "+n);
									   	 n++;
									    	 if(first) { global = global + c;
											       first = false;
									   	 }
									   	 else global = global + ", " + c;
						    }
						    global = global + " }";
						    Env.putGlobal(global, "struct");
						    Env.get(n1).putLocT(global.replace("%struct."+n1+" = ",""));	    				
						    Env.pop();
						  }
			   if(parser.second) Env.next();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$1 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println("CLASS ENTRY: "+n1);
			   if(parser.first) if (Env.putClass(n1, m.booleanValue()) != 0) parser.sem_error(n1,"DUPLICATE CLASS NAME");
 			   if(parser.second) { Env.next();
						     Name c = Env.get(n1).getOwner();
						     Name.putCurrentClass(c);
						     System.out.println("second");
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // class_declarations ::= error NT$0 class_declaration 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_declarations",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.report_error("class_declaration","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // class_declarations ::= class_declarations class_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_declarations",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // class_declarations ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_declarations",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // non_access_modifier_opt ::= VOLATILE 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // non_access_modifier_opt ::= TRANSIENT 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // non_access_modifier_opt ::= SYNCHRONIZED 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // non_access_modifier_opt ::= NATIVE 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // non_access_modifier_opt ::= FINAL 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // non_access_modifier_opt ::= ABSTRACT 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // non_access_modifier_opt ::= STATIC 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // non_access_modifier_opt ::= 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // access_modifier ::= PRIVATE 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_modifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // access_modifier ::= PROTECTED 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_modifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // access_modifier ::= PUBLIC 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_modifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // access_modifier ::= 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_modifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // modifiers_opt ::= access_modifier non_access_modifier_opt 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modifiers_opt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // name ::= name DOT IDENTIFIER 
            {
              Sname RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Symb s1 = sn.cs;
			   if(s1 == null) { parser.sem_error(sn.name, "UNKNOWN NAME");
						  RESULT = new Sname(n, null, null);
			   }
			   else { Type t1 = s1.getType();
				    if(!t1.isReference()) { parser.sem_error(""+t1, "NOT A REFERENCE");
								    RESULT = new Sname(n, null, null);
				    }
				    else { Type r = ((Reference)t1).getReferred();
					     if(!r.isName()) { parser.sem_error(""+r, "NOT A CLASS");
								     RESULT = new Sname(n, null, null);
					     }
					     else { Symb s2 = Env.get(n, ((Name)r).getEnv()); 
			   			     	if(s2 == null) { parser.sem_error(n,"UNKNOWN NAME"); 
									     RESULT = new Sname(n, null, null);
							}
			   			     	else if (!s2.isPublic() && !Name.getCurrentClass().isSubclass(s2.getOwner())) { parser.sem_error(n, "ILLEGAL ACCESS TO PRIVATE ATTRIBUTE");
				    					 				     			     	      		  RESULT = new Sname(n, null, null);
						  	     }
						  	     else { if(parser.second) { parser.code.append("		; name\n");
												  parser.code.append("	"+Tmp.nv()+" = load "+s1.getLoc()+"\n");
												  parser.objLoc = Tmp.lv();
									}
									RESULT = new Sname(n, s2, Env.get(n, Env.getRoot()));
							     }
					     }								
				    }
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // name ::= IDENTIFIER 
            {
              Sname RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sname(n, Env.get(n), Env.get(n, Env.getRoot())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // array_type ::= name dims 
            {
              Type RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Symb s = sn.cs; 
			   if(s == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				    		 RESULT = Type.errortype();
			   } 
			   else RESULT = Type.array(0, Type.reference(s.getType()));
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // array_type ::= primitive_type dims 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Type.array(0, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // reference_type ::= array_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reference_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // reference_type ::= name 
            {
              Type RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Symb s = sn.rs; 
			   if(s == null) RESULT = Type.reference(Type.forwardName(sn.name, parser.s.yytext())); 
			   else RESULT = Type.reference(s.getType());
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reference_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // numeric_type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = Type.floating(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // numeric_type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = Type.character(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // numeric_type ::= INT 
            {
              Type RESULT =null;
		 RESULT = Type.integer(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // primitive_type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = Type.bool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // primitive_type ::= numeric_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= reference_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= primitive_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literal ::= NULL_LITERAL 
            {
              Exp RESULT =null;
		 
			   RESULT = new Exp(Type.reference(Type.voidtype()), "", "null"); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literal ::= STRING_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String l = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   if(parser.first) Env.putGlobal(l , Tmp.ns());
			   if(parser.second) { int i = l.length() + 1;
			   			     String ary = "["+i+" x i8]";
			   			     String tmp = Env.getGlobal(l);
			   			     String loc = "i8* getelementptr ("+ary+"* "+tmp+", i32 0, i32 0)";
			   			     Symb s = Env.get("String", Env.getRoot());
			   			     if(s == null) RESULT = new Exp(Type.reference(Type.forwardName("String", parser.s.yytext())), loc, ""); 
			   			     else RESULT = new Exp(Type.reference(s.getType()), loc, ""); 
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literal ::= CHARACTER_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Character l = (java.lang.Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   RESULT = new Exp(Type.character(), "i8", ""+l); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // literal ::= BOOLEAN_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Boolean l = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   RESULT = new Exp(Type.bool(), "i1", ""+l); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // literal ::= FLOATING_POINT_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   RESULT = new Exp(Type.floating(), "double", ""+l); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // literal ::= INTEGER_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   RESULT = new Exp(Type.integer(), "i32", ""+l); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= class_declarations 
            {
              Object RESULT =null;
		 Hashtable forwards;
			   if(parser.first) { forwards = Name.ForwardHashtable();
						    int err = forwards.size();
						    if(err > 0) { parser.errors = parser.errors + err;
     						    	     		System.err.println("Error : Semantic error");
      					    	     		System.err.println("  ==> CANNOT FIND CLASSES ("+err+"): "+forwards+"\n");
						    }
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

