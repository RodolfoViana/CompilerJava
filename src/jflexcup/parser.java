
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 16 12:23:38 BRT 2015
//----------------------------------------------------

package jflexcup;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import symtab.*;
import type.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 16 12:23:38 BRT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\007" +
    "\003\000\002\007\003\000\002\010\004\000\002\010\004" +
    "\000\002\011\003\000\002\011\005\000\002\020\004\000" +
    "\002\022\002\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\023\002\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\014\002\000" +
    "\002\014\004\000\002\152\002\000\002\014\005\000\002" +
    "\153\002\000\002\015\007\000\002\154\002\000\002\015" +
    "\011\000\002\016\005\000\002\025\002\000\002\025\003" +
    "\000\002\024\003\000\002\024\004\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\006\000\002\155" +
    "\002\000\002\030\007\000\002\156\002\000\002\030\007" +
    "\000\002\013\002\000\002\013\004\000\002\031\003\000" +
    "\002\031\006\000\002\157\002\000\002\031\006\000\002" +
    "\012\002\000\002\032\003\000\002\032\005\000\002\033" +
    "\004\000\002\160\002\000\002\035\011\000\002\161\002" +
    "\000\002\035\011\000\002\162\002\000\002\035\007\000" +
    "\002\036\002\000\002\036\003\000\002\037\003\000\002" +
    "\037\005\000\002\163\002\000\002\037\005\000\002\040" +
    "\004\000\002\041\006\000\002\041\006\000\002\041\003" +
    "\000\002\034\002\000\002\042\004\000\002\164\002\000" +
    "\002\043\010\000\002\044\007\000\002\044\006\000\002" +
    "\044\006\000\002\047\002\000\002\045\007\000\002\045" +
    "\007\000\002\045\011\000\002\045\011\000\002\046\006" +
    "\000\002\165\002\000\002\046\007\000\002\050\002\000" +
    "\002\050\003\000\002\051\003\000\002\051\004\000\002" +
    "\166\002\000\002\051\005\000\002\052\003\000\002\052" +
    "\003\000\002\053\006\000\002\167\002\000\002\053\006" +
    "\000\002\054\004\000\002\054\005\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\060\003\000" +
    "\002\061\004\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\112\002\000\002\113\002" +
    "\000\002\114\002\000\002\115\002\000\002\063\011\000" +
    "\002\170\002\000\002\063\010\000\002\064\014\000\002" +
    "\171\002\000\002\064\014\000\002\065\014\000\002\071" +
    "\015\000\002\072\015\000\002\073\002\000\002\073\003" +
    "\000\002\074\003\000\002\074\003\000\002\075\002\000" +
    "\002\075\003\000\002\076\003\000\002\077\003\000\002" +
    "\077\005\000\002\066\011\000\002\172\002\000\002\066" +
    "\010\000\002\067\011\000\002\124\002\000\002\070\006" +
    "\000\002\100\003\000\002\100\003\000\002\121\002\000" +
    "\002\101\003\000\002\101\003\000\002\101\006\000\002" +
    "\101\003\000\002\101\003\000\002\101\003\000\002\101" +
    "\003\000\002\101\005\000\002\101\005\000\002\101\005" +
    "\000\002\101\005\000\002\101\005\000\002\173\002\000" +
    "\002\101\007\000\002\174\002\000\002\101\006\000\002" +
    "\175\002\000\002\102\011\000\002\017\002\000\002\017" +
    "\003\000\002\103\002\000\002\103\003\000\002\104\003" +
    "\000\002\104\005\000\002\176\002\000\002\104\005\000" +
    "\002\105\006\000\002\105\006\000\002\106\003\000\002" +
    "\106\004\000\002\177\002\000\002\106\005\000\002\107" +
    "\005\000\002\110\002\000\002\110\003\000\002\111\004" +
    "\000\002\111\005\000\002\125\005\000\002\125\005\000" +
    "\002\126\006\000\002\126\010\000\002\126\010\000\002" +
    "\127\006\000\002\127\006\000\002\130\003\000\002\130" +
    "\003\000\002\130\003\000\002\130\003\000\002\130\004" +
    "\000\002\120\002\000\002\150\004\000\002\151\004\000" +
    "\002\131\003\000\002\131\003\000\002\131\003\000\002" +
    "\131\005\000\002\131\004\000\002\131\004\000\002\146" +
    "\004\000\002\147\004\000\002\132\003\000\002\132\005" +
    "\000\002\132\005\000\002\132\005\000\002\200\002\000" +
    "\002\132\006\000\002\201\002\000\002\132\006\000\002" +
    "\202\002\000\002\132\006\000\002\133\003\000\002\133" +
    "\005\000\002\133\005\000\002\134\003\000\002\134\005" +
    "\000\002\134\005\000\002\134\005\000\002\134\005\000" +
    "\002\203\002\000\002\134\006\000\002\204\002\000\002" +
    "\134\006\000\002\205\002\000\002\134\006\000\002\206" +
    "\002\000\002\134\006\000\002\135\003\000\002\135\005" +
    "\000\002\135\005\000\002\207\002\000\002\135\006\000" +
    "\002\210\002\000\002\135\006\000\002\116\002\000\002" +
    "\136\003\000\002\136\006\000\002\211\002\000\002\136" +
    "\006\000\002\117\002\000\002\137\003\000\002\137\006" +
    "\000\002\212\002\000\002\137\006\000\002\122\002\000" +
    "\002\123\002\000\002\140\003\000\002\140\011\000\002" +
    "\213\002\000\002\140\010\000\002\141\003\000\002\141" +
    "\003\000\002\142\006\000\002\214\002\000\002\142\006" +
    "\000\002\143\003\000\002\143\003\000\002\143\003\000" +
    "\002\144\002\000\002\144\003\000\002\145\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0214\000\034\002\uffdf\003\005\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\037\uffdf\001\002\000\004\002\u0216\001\002\000" +
    "\030\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\037\uffdd\001\002\000" +
    "\032\002\000\024\011\025\007\026\014\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\037\uffeb\001" +
    "\002\000\036\004\uffe9\005\uffe9\006\uffe9\007\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\037" +
    "\uffe9\041\uffe9\101\uffe9\001\002\000\004\037\025\001\002" +
    "\000\036\004\uffea\005\uffea\006\uffea\007\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\037\uffea" +
    "\041\uffea\101\uffea\001\002\000\032\002\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\037\uffde\001\002\000\036\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\027\017\030\023\031\024\032\021" +
    "\033\022\034\020\035\015\037\uffe7\041\uffe7\101\uffe7\001" +
    "\002\000\036\004\uffe8\005\uffe8\006\uffe8\007\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\037" +
    "\uffe8\041\uffe8\101\uffe8\001\002\000\020\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\037\uffe0\041\uffe0\101\uffe0\001\002\000" +
    "\020\004\uffec\005\uffec\006\uffec\007\uffec\037\uffec\041\uffec" +
    "\101\uffec\001\002\000\020\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\037\uffe6\041\uffe6\101\uffe6\001\002\000\020\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\037\uffe1\041\uffe1\101\uffe1\001" +
    "\002\000\020\004\uffe3\005\uffe3\006\uffe3\007\uffe3\037\uffe3" +
    "\041\uffe3\101\uffe3\001\002\000\020\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\037\uffe2\041\uffe2\101\uffe2\001\002\000\020" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\037\uffe5\041\uffe5\101" +
    "\uffe5\001\002\000\020\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\037\uffe4\041\uffe4\101\uffe4\001\002\000\004\101\026\001" +
    "\002\000\006\016\uffdb\040\027\001\002\000\004\101\u0211" +
    "\001\002\000\004\016\031\001\002\000\052\003\044\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\013\034\016\040\017\uffd6" +
    "\024\011\025\007\026\014\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\041\uffeb\101\uffeb\001\002" +
    "\000\032\002\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\037\uffda" +
    "\001\002\000\052\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\013\uffd1\016\uffd1\017\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\041\uffd1\101\uffd1\001\002\000\052\003\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\013\uffcd\016\uffcd\017\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\041\uffcd\101\uffcd\001\002\000" +
    "\052\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce\013\uffce" +
    "\016\uffce\017\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\041\uffce" +
    "\101\uffce\001\002\000\004\016\u01f0\001\002\000\052\003" +
    "\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\013\uffd0\016\uffd0" +
    "\017\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\041\uffd0\101\uffd0" +
    "\001\002\000\070\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007" +
    "\uffa6\013\uffa6\016\uffa6\017\uffa6\021\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\047\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\054\uffa6\055\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6" +
    "\100\uffa6\101\uffa6\102\uffa6\001\002\000\006\013\161\016" +
    "\160\001\002\000\004\017\156\001\002\000\052\003\uffd4" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\013\uffd4\016\uffd4\017" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\041\uffd4\101\uffd4\001" +
    "\002\000\004\021\uffb9\001\002\000\052\003\044\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\013\034\016\040\017\uffd5\024" +
    "\011\025\007\026\014\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\041\uffeb\101\uffeb\001\002\000" +
    "\016\004\053\005\051\006\064\007\063\041\054\101\061" +
    "\001\002\000\052\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\013\uffcf\016\uffcf\017\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\041\uffcf\101\uffcf\001\002\000\052\003\uffd2\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\013\uffd2\016\uffd2\017\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\041\uffd2\101\uffd2\001\002\000" +
    "\012\003\ufff5\010\ufff5\012\ufff5\101\ufff5\001\002\000\012" +
    "\003\ufff2\010\134\012\147\101\ufff2\001\002\000\012\003" +
    "\ufff6\010\ufff6\012\ufff6\101\ufff6\001\002\000\004\101\141" +
    "\001\002\000\010\003\ufff9\010\134\101\ufff9\001\002\000" +
    "\012\003\ufff7\010\ufff7\012\ufff7\101\ufff7\001\002\000\006" +
    "\003\107\101\110\001\002\000\006\003\ufff8\101\ufff8\001" +
    "\002\000\014\003\uffee\010\uffee\012\uffee\021\uffab\101\uffee" +
    "\001\002\000\006\003\ufff1\101\ufff1\001\002\000\012\003" +
    "\ufff3\010\ufff3\012\ufff3\101\ufff3\001\002\000\012\003\ufff4" +
    "\010\ufff4\012\ufff4\101\ufff4\001\002\000\004\021\066\001" +
    "\002\000\020\003\072\004\053\005\051\006\064\007\063" +
    "\022\uffb7\101\074\001\002\000\004\022\105\001\002\000" +
    "\006\015\103\022\uffb6\001\002\000\006\015\uffb5\022\uffb5" +
    "\001\002\000\014\004\uffb3\005\uffb3\006\uffb3\007\uffb3\101" +
    "\uffb3\001\002\000\004\101\076\001\002\000\070\003\uffee" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\053\uffee\054\uffee\055\uffee" +
    "\056\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065" +
    "\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee\101\uffee" +
    "\001\002\000\010\010\077\015\uffb1\022\uffb1\001\002\000" +
    "\014\010\uffc0\013\uffc0\015\uffc0\020\uffc0\022\uffc0\001\002" +
    "\000\004\011\100\001\002\000\014\010\uffbf\013\uffbf\015" +
    "\uffbf\020\uffbf\022\uffbf\001\002\000\014\004\053\005\051" +
    "\006\064\007\063\101\074\001\002\000\006\015\uffb2\022" +
    "\uffb2\001\002\000\014\004\053\005\051\006\064\007\063" +
    "\101\074\001\002\000\006\015\uffb4\022\uffb4\001\002\000" +
    "\004\016\uffaa\001\002\000\012\010\077\013\uffc5\015\uffc5" +
    "\020\uffc5\001\002\000\050\003\uffc9\004\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\013\uffcb\015\uffc3\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\041\uffc9\101\uffc9\001\002\000\012\010\uffc0\013\uffc0" +
    "\015\uffc0\021\uffbd\001\002\000\006\013\113\015\112\001" +
    "\002\000\004\101\uffc1\001\002\000\052\003\uffcc\004\uffcc" +
    "\005\uffcc\006\uffcc\007\uffcc\013\uffcc\016\uffcc\017\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\041\uffcc\101\uffcc\001\002\000" +
    "\004\101\076\001\002\000\012\010\077\013\uffc4\015\uffc4" +
    "\020\uffc4\001\002\000\004\021\117\001\002\000\020\003" +
    "\072\004\053\005\051\006\064\007\063\022\uffb7\101\074" +
    "\001\002\000\004\022\121\001\002\000\006\013\uffbc\016" +
    "\uffbc\001\002\000\004\013\133\001\002\000\004\015\131" +
    "\001\002\000\044\003\044\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\024\011\025\007\026\014\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\041\uffeb\101\uffeb\001" +
    "\002\000\016\004\053\005\051\006\064\007\063\041\054" +
    "\101\074\001\002\000\052\003\uffc8\004\uffc8\005\uffc8\006" +
    "\uffc8\007\uffc8\013\uffc8\016\uffc8\017\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\041\uffc8\101\uffc8\001\002\000\004\101\130" +
    "\001\002\000\004\021\uffbd\001\002\000\004\101\076\001" +
    "\002\000\012\010\077\013\uffc2\015\uffc2\020\uffc2\001\002" +
    "\000\052\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca\013" +
    "\uffca\016\uffca\017\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\041" +
    "\uffca\101\uffca\001\002\000\004\011\140\001\002\000\012" +
    "\003\ufff0\010\136\012\ufff0\101\ufff0\001\002\000\004\011" +
    "\137\001\002\000\064\003\uff38\010\uff38\011\uff38\012\uff38" +
    "\013\uff38\014\uff38\015\uff38\022\uff38\023\uff38\053\uff38\054" +
    "\uff38\055\uff38\056\uff38\060\uff38\061\uff38\062\uff38\063\uff38" +
    "\064\uff38\065\uff38\066\uff38\067\uff38\070\uff38\071\uff38\072" +
    "\uff38\101\uff38\001\002\000\064\003\uff39\010\uff39\011\uff39" +
    "\012\uff39\013\uff39\014\uff39\015\uff39\022\uff39\023\uff39\053" +
    "\uff39\054\uff39\055\uff39\056\uff39\060\uff39\061\uff39\062\uff39" +
    "\063\uff39\064\uff39\065\uff39\066\uff39\067\uff39\070\uff39\071" +
    "\uff39\072\uff39\101\uff39\001\002\000\004\021\uffbb\001\002" +
    "\000\004\021\143\001\002\000\020\003\072\004\053\005" +
    "\051\006\064\007\063\022\uffb7\101\074\001\002\000\004" +
    "\022\145\001\002\000\006\013\uffba\016\uffba\001\002\000" +
    "\012\003\uffef\010\136\012\uffef\101\uffef\001\002\000\004" +
    "\101\150\001\002\000\070\003\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\053\uffed\054\uffed\055\uffed\056\uffed\060\uffed\061" +
    "\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed" +
    "\070\uffed\071\uffed\072\uffed\101\uffed\001\002\000\052\003" +
    "\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\013\uffd3\016\uffd3" +
    "\017\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\041\uffd3\101\uffd3" +
    "\001\002\000\004\021\153\001\002\000\020\003\072\004" +
    "\053\005\051\006\064\007\063\022\uffb7\101\074\001\002" +
    "\000\004\022\155\001\002\000\006\013\uffb8\016\uffb8\001" +
    "\002\000\110\002\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\037\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7" +
    "\067\uffd7\070\uffd7\071\uffd7\072\uffd7\001\002\000\052\003" +
    "\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\013\uffbe\016\uffbe" +
    "\017\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\041\uffbe\101\uffbe" +
    "\001\002\000\070\003\uffad\004\uffad\005\uffad\006\uffad\007" +
    "\uffad\013\uffad\016\uffad\017\uffad\021\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\045\uffad\047\uffad\050\uffad\051\uffad\052" +
    "\uffad\054\uffad\055\uffad\074\uffad\075\uffad\076\uffad\077\uffad" +
    "\100\uffad\101\uffad\102\uffad\001\002\000\052\003\uffae\004" +
    "\uffae\005\uffae\006\uffae\007\uffae\013\uffae\016\uffae\017\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\041\uffae\101\uffae\001\002" +
    "\000\070\003\223\004\053\005\051\006\064\007\063\013" +
    "\204\016\040\017\uff9e\021\172\041\225\042\213\043\221" +
    "\044\244\045\212\047\235\050\177\051\217\052\222\054" +
    "\165\055\216\074\247\075\232\076\201\077\203\100\166" +
    "\101\074\102\211\001\002\000\004\013\u01e9\001\002\000" +
    "\062\010\uff58\011\uff58\012\uff58\013\uff58\014\uff58\015\uff58" +
    "\020\ufee9\022\uff58\023\uff58\053\uff58\054\uff58\055\uff58\056" +
    "\uff58\060\uff58\061\uff58\062\uff58\063\uff58\064\uff58\065\uff58" +
    "\066\uff58\067\uff58\070\uff58\071\uff58\072\uff58\001\002\000" +
    "\060\003\325\004\053\005\051\006\064\007\063\021\172" +
    "\041\225\042\213\043\221\044\244\052\222\053\270\054" +
    "\165\055\216\056\262\057\264\074\247\075\232\076\201" +
    "\077\203\100\166\101\074\102\211\001\002\000\060\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\022\ufffb" +
    "\023\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb" +
    "\070\ufffb\071\ufffb\072\ufffb\001\002\000\004\020\u01e5\001" +
    "\002\000\070\003\uff90\004\uff90\005\uff90\006\uff90\007\uff90" +
    "\013\uff90\016\uff90\017\uff90\021\uff90\041\uff90\042\uff90\043" +
    "\uff90\044\uff90\045\uff90\047\uff90\050\uff90\051\uff90\052\uff90" +
    "\054\uff90\055\uff90\074\uff90\075\uff90\076\uff90\077\uff90\100" +
    "\uff90\101\uff90\102\uff90\001\002\000\014\013\uff7f\015\uff7f" +
    "\022\uff7f\054\uff2e\055\uff2e\001\002\000\060\003\uff5d\004" +
    "\uff5d\005\uff5d\006\uff5d\007\uff5d\021\uff5d\041\uff5d\042\uff5d" +
    "\043\uff5d\044\uff5d\052\uff5d\053\uff5d\054\uff5d\055\uff5d\056" +
    "\uff5d\057\uff5d\074\uff5d\075\uff5d\076\uff5d\077\uff5d\100\uff5d" +
    "\101\uff5d\102\uff5d\001\002\000\010\013\uff80\015\uff80\022" +
    "\uff80\001\002\000\060\010\uff5c\011\uff5c\012\uff5c\013\uff5c" +
    "\014\uff5c\015\uff5c\022\uff5c\023\uff5c\053\uff5c\054\uff5c\055" +
    "\uff5c\056\uff5c\060\uff5c\061\uff5c\062\uff5c\063\uff5c\064\uff5c" +
    "\065\uff5c\066\uff5c\067\uff5c\070\uff5c\071\uff5c\072\uff5c\001" +
    "\002\000\056\011\uff5e\012\uff5e\013\uff5e\014\uff5e\015\uff5e" +
    "\022\uff5e\023\uff5e\053\uff5e\054\uff5e\055\uff5e\056\uff5e\060" +
    "\uff5e\061\uff5e\062\uff5e\063\uff5e\064\uff5e\065\uff5e\066\uff5e" +
    "\067\uff5e\070\uff5e\071\uff5e\072\uff5e\001\002\000\072\003" +
    "\uff88\004\uff88\005\uff88\006\uff88\007\uff88\013\uff88\016\uff88" +
    "\017\uff88\021\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045" +
    "\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\054\uff88" +
    "\055\uff88\074\uff88\075\uff88\076\uff88\077\uff88\100\uff88\101" +
    "\uff88\102\uff88\001\002\000\004\021\u01d6\001\002\000\070" +
    "\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d\013\uff8d\016" +
    "\uff8d\017\uff8d\021\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d" +
    "\045\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\054\uff8d\055" +
    "\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d\100\uff8d\101\uff8d" +
    "\102\uff8d\001\002\000\060\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\022\ufffd\023\ufffd\053\ufffd\054\ufffd" +
    "\055\ufffd\056\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064" +
    "\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd" +
    "\001\002\000\022\003\ufff2\010\334\012\336\020\ufeea\021" +
    "\335\054\uff2f\055\uff2f\101\ufff2\001\002\000\060\010\ufffc" +
    "\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\022\ufffc\023" +
    "\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\060\ufffc\061\ufffc" +
    "\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070" +
    "\ufffc\071\ufffc\072\ufffc\001\002\000\072\003\uff84\004\uff84" +
    "\005\uff84\006\uff84\007\uff84\013\uff84\016\uff84\017\uff84\021" +
    "\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84" +
    "\047\uff84\050\uff84\051\uff84\052\uff84\054\uff84\055\uff84\074" +
    "\uff84\075\uff84\076\uff84\077\uff84\100\uff84\101\uff84\102\uff84" +
    "\001\002\000\072\003\uff87\004\uff87\005\uff87\006\uff87\007" +
    "\uff87\013\uff87\016\uff87\017\uff87\021\uff87\041\uff87\042\uff87" +
    "\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051" +
    "\uff87\052\uff87\054\uff87\055\uff87\074\uff87\075\uff87\076\uff87" +
    "\077\uff87\100\uff87\101\uff87\102\uff87\001\002\000\010\003" +
    "\ufff1\012\u0134\101\ufff1\001\002\000\010\013\uff82\015\uff82" +
    "\022\uff82\001\002\000\056\011\uff30\012\u01d1\013\uff30\014" +
    "\uff30\015\uff30\022\uff30\023\uff30\053\uff30\054\uff30\055\uff30" +
    "\056\uff30\060\uff30\061\uff30\062\uff30\063\uff30\064\uff30\065" +
    "\uff30\066\uff30\067\uff30\070\uff30\071\uff30\072\uff30\001\002" +
    "\000\060\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\022\ufffa\023\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa" +
    "\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066" +
    "\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\001\002\000\006" +
    "\003\u0172\021\u0173\001\002\000\060\010\uff5b\011\uff5b\012" +
    "\uff5b\013\uff5b\014\uff5b\015\uff5b\022\uff5b\023\uff5b\053\uff5b" +
    "\054\uff5b\055\uff5b\056\uff5b\060\uff5b\061\uff5b\062\uff5b\063" +
    "\uff5b\064\uff5b\065\uff5b\066\uff5b\067\uff5b\070\uff5b\071\uff5b" +
    "\072\uff5b\001\002\000\004\017\u0171\001\002\000\070\003" +
    "\uff97\004\uff97\005\uff97\006\uff97\007\uff97\013\uff97\016\uff97" +
    "\017\uff97\021\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045" +
    "\uff97\047\uff97\050\uff97\051\uff97\052\uff97\054\uff97\055\uff97" +
    "\074\uff97\075\uff97\076\uff97\077\uff97\100\uff97\101\uff97\102" +
    "\uff97\001\002\000\060\003\325\004\053\005\051\006\064" +
    "\007\063\021\172\041\225\042\213\043\221\044\244\052" +
    "\222\053\270\054\165\055\216\056\262\057\264\074\247" +
    "\075\232\076\201\077\203\100\166\101\074\102\211\001" +
    "\002\000\062\003\uff61\004\uff61\005\uff61\006\uff61\007\uff61" +
    "\013\uff61\021\uff61\041\uff61\042\uff61\043\uff61\044\uff61\052" +
    "\uff61\053\uff61\054\uff61\055\uff61\056\uff61\057\uff61\074\uff61" +
    "\075\uff61\076\uff61\077\uff61\100\uff61\101\uff61\102\uff61\001" +
    "\002\000\014\013\uff7e\015\uff7e\022\uff7e\054\uff2d\055\uff2d" +
    "\001\002\000\004\012\u0167\001\002\000\014\004\053\005" +
    "\051\006\064\007\063\101\074\001\002\000\074\003\uff9a" +
    "\004\uff9a\005\uff9a\006\uff9a\007\uff9a\012\uff4e\013\uff9a\016" +
    "\uff9a\017\u014e\020\ufeec\021\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\044\uff9a\045\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\054" +
    "\uff9a\055\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a" +
    "\101\uff9a\102\uff9a\001\002\000\072\003\uff85\004\uff85\005" +
    "\uff85\006\uff85\007\uff85\013\uff85\016\uff85\017\uff85\021\uff85" +
    "\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047" +
    "\uff85\050\uff85\051\uff85\052\uff85\054\uff85\055\uff85\074\uff85" +
    "\075\uff85\076\uff85\077\uff85\100\uff85\101\uff85\102\uff85\001" +
    "\002\000\004\012\u014c\001\002\000\006\054\u0132\055\u0131" +
    "\001\002\000\012\003\ufff9\010\134\012\u012f\101\ufff9\001" +
    "\002\000\020\010\uff59\012\uff59\013\uff7c\015\uff7c\022\uff7c" +
    "\054\uff59\055\uff59\001\002\000\060\010\u0149\011\uff5f\012" +
    "\uff5f\013\uff5f\014\uff5f\015\uff5f\022\uff5f\023\uff5f\053\uff5f" +
    "\054\uff5f\055\uff5f\056\uff5f\060\uff5f\061\uff5f\062\uff5f\063" +
    "\uff5f\064\uff5f\065\uff5f\066\uff5f\067\uff5f\070\uff5f\071\uff5f" +
    "\072\uff5f\001\002\000\060\010\ufffe\011\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\022\ufffe\023\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064" +
    "\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe" +
    "\001\002\000\070\003\uff8e\004\uff8e\005\uff8e\006\uff8e\007" +
    "\uff8e\013\uff8e\016\uff8e\017\uff8e\021\uff8e\041\uff8e\042\uff8e" +
    "\043\uff8e\044\uff8e\045\uff8e\047\uff8e\050\uff8e\051\uff8e\052" +
    "\uff8e\054\uff8e\055\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e" +
    "\100\uff8e\101\uff8e\102\uff8e\001\002\000\020\010\uff57\012" +
    "\uff57\013\uff7d\015\uff7d\022\uff7d\054\uff57\055\uff57\001\002" +
    "\000\006\003\u013e\021\u013f\001\002\000\070\003\uff9c\004" +
    "\uff9c\005\uff9c\006\uff9c\007\uff9c\013\uff9c\016\uff9c\017\uff9c" +
    "\021\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\047" +
    "\uff9c\050\uff9c\051\uff9c\052\uff9c\054\uff9c\055\uff9c\074\uff9c" +
    "\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\102\uff9c\001" +
    "\002\000\070\003\uff98\004\uff98\005\uff98\006\uff98\007\uff98" +
    "\013\uff98\016\uff98\017\uff98\021\uff98\041\uff98\042\uff98\043" +
    "\uff98\044\uff98\045\uff98\047\uff98\050\uff98\051\uff98\052\uff98" +
    "\054\uff98\055\uff98\074\uff98\075\uff98\076\uff98\077\uff98\100" +
    "\uff98\101\uff98\102\uff98\001\002\000\070\003\uff91\004\uff91" +
    "\005\uff91\006\uff91\007\uff91\013\uff91\016\uff91\017\uff91\021" +
    "\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\047\uff91" +
    "\050\uff91\051\uff91\052\uff91\054\uff91\055\uff91\074\uff91\075" +
    "\uff91\076\uff91\077\uff91\100\uff91\101\uff91\102\uff91\001\002" +
    "\000\010\013\uff81\015\uff81\022\uff81\001\002\000\072\003" +
    "\uff86\004\uff86\005\uff86\006\uff86\007\uff86\013\uff86\016\uff86" +
    "\017\uff86\021\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\054\uff86" +
    "\055\uff86\074\uff86\075\uff86\076\uff86\077\uff86\100\uff86\101" +
    "\uff86\102\uff86\001\002\000\070\003\u013c\004\053\005\051" +
    "\006\064\007\063\013\204\016\040\017\uff9d\021\172\041" +
    "\225\042\213\043\221\044\244\045\212\047\235\050\177" +
    "\051\217\052\222\054\165\055\216\074\247\075\232\076" +
    "\201\077\203\100\166\101\074\102\211\001\002\000\004" +
    "\101\074\001\002\000\070\003\uff8f\004\uff8f\005\uff8f\006" +
    "\uff8f\007\uff8f\013\uff8f\016\uff8f\017\uff8f\021\uff8f\041\uff8f" +
    "\042\uff8f\043\uff8f\044\uff8f\045\uff8f\047\uff8f\050\uff8f\051" +
    "\uff8f\052\uff8f\054\uff8f\055\uff8f\074\uff8f\075\uff8f\076\uff8f" +
    "\077\uff8f\100\uff8f\101\uff8f\102\uff8f\001\002\000\062\010" +
    "\uff56\011\uff56\012\uff56\013\uff56\014\uff56\015\uff56\020\ufee8" +
    "\022\uff56\023\uff56\053\uff56\054\uff56\055\uff56\056\uff56\060" +
    "\uff56\061\uff56\062\uff56\063\uff56\064\uff56\065\uff56\066\uff56" +
    "\067\uff56\070\uff56\071\uff56\072\uff56\001\002\000\060\010" +
    "\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff\022\uffff" +
    "\023\uffff\053\uffff\054\uffff\055\uffff\056\uffff\060\uffff\061" +
    "\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff\067\uffff" +
    "\070\uffff\071\uffff\072\uffff\001\002\000\006\003\251\101" +
    "\076\001\002\000\006\013\uff95\015\uffc3\001\002\000\010" +
    "\013\uffc7\015\112\020\253\001\002\000\060\003\273\004" +
    "\053\005\051\006\064\007\063\021\172\041\225\042\213" +
    "\043\221\044\244\052\222\053\270\054\165\055\216\056" +
    "\262\057\264\074\247\075\232\076\201\077\203\100\166" +
    "\101\074\102\211\001\002\000\004\013\255\001\002\000" +
    "\070\003\uff96\004\uff96\005\uff96\006\uff96\007\uff96\013\uff96" +
    "\016\uff96\017\uff96\021\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\045\uff96\047\uff96\050\uff96\051\uff96\052\uff96\054\uff96" +
    "\055\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100\uff96\101" +
    "\uff96\102\uff96\001\002\000\042\011\uff13\013\uff13\015\uff13" +
    "\022\uff13\023\uff13\053\366\056\367\062\uff13\063\uff13\064" +
    "\uff13\065\uff13\066\uff13\067\uff13\070\uff13\071\uff13\072\uff13" +
    "\001\002\000\022\011\ufef9\013\ufef9\015\ufef9\022\ufef9\023" +
    "\ufef9\070\u0115\071\ufef9\072\ufef9\001\002\000\054\011\uff2e" +
    "\013\uff2e\014\uff2e\015\uff2e\022\uff2e\023\uff2e\053\uff2e\054" +
    "\uff2e\055\uff2e\056\uff2e\060\uff2e\061\uff2e\062\uff2e\063\uff2e" +
    "\064\uff2e\065\uff2e\066\uff2e\067\uff2e\070\uff2e\071\uff2e\072" +
    "\uff2e\001\002\000\050\011\uff26\013\uff26\014\uff26\015\uff26" +
    "\022\uff26\023\uff26\053\uff26\056\uff26\060\uff26\061\uff26\062" +
    "\uff26\063\uff26\064\uff26\065\uff26\066\uff26\067\uff26\070\uff26" +
    "\071\uff26\072\uff26\001\002\000\060\003\325\004\053\005" +
    "\051\006\064\007\063\021\172\041\225\042\213\043\221" +
    "\044\244\052\222\053\270\054\165\055\216\056\262\057" +
    "\264\074\247\075\232\076\201\077\203\100\166\101\074" +
    "\102\211\001\002\000\064\010\334\011\uff2f\012\336\013" +
    "\uff2f\014\uff2f\015\uff2f\020\ufeea\021\335\022\uff2f\023\uff2f" +
    "\053\uff2f\054\uff2f\055\uff2f\056\uff2f\060\uff2f\061\uff2f\062" +
    "\uff2f\063\uff2f\064\uff2f\065\uff2f\066\uff2f\067\uff2f\070\uff2f" +
    "\071\uff2f\072\uff2f\001\002\000\060\003\uff2b\004\uff2b\005" +
    "\uff2b\006\uff2b\007\uff2b\021\uff2b\041\uff2b\042\uff2b\043\uff2b" +
    "\044\uff2b\052\uff2b\053\uff2b\054\uff2b\055\uff2b\056\uff2b\057" +
    "\uff2b\074\uff2b\075\uff2b\076\uff2b\077\uff2b\100\uff2b\101\uff2b" +
    "\102\uff2b\001\002\000\026\011\ufefe\013\ufefe\015\ufefe\022" +
    "\ufefe\023\ufefe\066\u010f\067\u010e\070\ufefe\071\ufefe\072\ufefe" +
    "\001\002\000\004\012\u0134\001\002\000\014\011\ufeee\013" +
    "\ufeee\015\ufeee\022\ufeee\023\ufeee\001\002\000\060\003\325" +
    "\004\053\005\051\006\064\007\063\021\172\041\225\042" +
    "\213\043\221\044\244\052\222\053\270\054\165\055\216" +
    "\056\262\057\264\074\247\075\232\076\201\077\203\100" +
    "\166\101\074\102\211\001\002\000\050\011\uff20\013\uff20" +
    "\014\uff20\015\uff20\022\uff20\023\uff20\053\uff20\056\uff20\060" +
    "\uff20\061\uff20\062\uff20\063\uff20\064\uff20\065\uff20\066\uff20" +
    "\067\uff20\070\uff20\071\uff20\072\uff20\001\002\000\054\011" +
    "\uff2d\013\uff2d\014\uff2d\015\uff2d\022\uff2d\023\uff2d\053\uff2d" +
    "\054\uff2d\055\uff2d\056\uff2d\060\uff2d\061\uff2d\062\uff2d\063" +
    "\uff2d\064\uff2d\065\uff2d\066\uff2d\067\uff2d\070\uff2d\071\uff2d" +
    "\072\uff2d\001\002\000\036\012\uff4e\014\uff1c\020\ufeec\060" +
    "\uff1a\061\uff18\062\uff0e\063\uff0c\064\uff0a\065\uff08\066\uff03" +
    "\067\uff01\070\ufefc\071\ufef7\072\ufef1\001\002\000\014\011" +
    "\ufeef\013\ufeef\015\ufeef\022\ufeef\023\ufeef\001\002\000\054" +
    "\011\uff28\013\uff28\014\uff28\015\uff28\022\uff28\023\uff28\053" +
    "\uff28\054\u0132\055\u0131\056\uff28\060\uff28\061\uff28\062\uff28" +
    "\063\uff28\064\uff28\065\uff28\066\uff28\067\uff28\070\uff28\071" +
    "\uff28\072\uff28\001\002\000\006\010\134\012\u012f\001\002" +
    "\000\020\011\ufef3\013\ufef3\015\ufef3\022\ufef3\023\ufef3\071" +
    "\u011d\072\u0128\001\002\000\060\010\uff59\011\uff59\012\uff59" +
    "\013\uff59\014\uff59\015\uff59\022\uff59\023\uff59\053\uff59\054" +
    "\uff59\055\uff59\056\uff59\060\uff59\061\uff59\062\uff59\063\uff59" +
    "\064\uff59\065\uff59\066\uff59\067\uff59\070\uff59\071\uff59\072" +
    "\uff59\001\002\000\004\013\uffc6\001\002\000\060\010\uff57" +
    "\011\uff57\012\uff57\013\uff57\014\uff57\015\uff57\022\uff57\023" +
    "\uff57\053\uff57\054\uff57\055\uff57\056\uff57\060\uff57\061\uff57" +
    "\062\uff57\063\uff57\064\uff57\065\uff57\066\uff57\067\uff57\070" +
    "\uff57\071\uff57\072\uff57\001\002\000\050\011\uff16\013\uff16" +
    "\014\372\015\uff16\022\uff16\023\uff16\053\uff16\056\uff16\060" +
    "\373\061\371\062\uff16\063\uff16\064\uff16\065\uff16\066\uff16" +
    "\067\uff16\070\uff16\071\uff16\072\uff16\001\002\000\050\011" +
    "\uff27\013\uff27\014\uff27\015\uff27\022\uff27\023\uff27\053\uff27" +
    "\056\uff27\060\uff27\061\uff27\062\uff27\063\uff27\064\uff27\065" +
    "\uff27\066\uff27\067\uff27\070\uff27\071\uff27\072\uff27\001\002" +
    "\000\036\011\uff06\013\uff06\015\uff06\022\uff06\023\uff06\062" +
    "\306\063\310\064\311\065\307\066\uff06\067\uff06\070\uff06" +
    "\071\uff06\072\uff06\001\002\000\060\003\315\004\053\005" +
    "\051\006\064\007\063\021\172\041\225\042\213\043\221" +
    "\044\244\052\222\053\270\054\165\055\216\056\262\057" +
    "\264\074\247\075\232\076\201\077\203\100\166\101\074" +
    "\102\211\001\002\000\060\003\315\004\053\005\051\006" +
    "\064\007\063\021\172\041\225\042\213\043\221\044\244" +
    "\052\222\053\270\054\165\055\216\056\262\057\264\074" +
    "\247\075\232\076\201\077\203\100\166\101\074\102\211" +
    "\001\002\000\060\003\315\004\053\005\051\006\064\007" +
    "\063\021\172\041\225\042\213\043\221\044\244\052\222" +
    "\053\270\054\165\055\216\056\262\057\264\074\247\075" +
    "\232\076\201\077\203\100\166\101\074\102\211\001\002" +
    "\000\060\003\315\004\053\005\051\006\064\007\063\021" +
    "\172\041\225\042\213\043\221\044\244\052\222\053\270" +
    "\054\165\055\216\056\262\057\264\074\247\075\232\076" +
    "\201\077\203\100\166\101\074\102\211\001\002\000\060" +
    "\010\uff58\011\uff58\012\uff58\013\uff58\014\uff58\015\uff58\022" +
    "\uff58\023\uff58\053\uff58\054\uff58\055\uff58\056\uff58\060\uff58" +
    "\061\uff58\062\uff58\063\uff58\064\uff58\065\uff58\066\uff58\067" +
    "\uff58\070\uff58\071\uff58\072\uff58\001\002\000\042\011\uff10" +
    "\013\uff10\015\uff10\022\uff10\023\uff10\053\366\056\367\062" +
    "\uff10\063\uff10\064\uff10\065\uff10\066\uff10\067\uff10\070\uff10" +
    "\071\uff10\072\uff10\001\002\000\062\010\334\011\uff2f\012" +
    "\336\013\uff2f\014\uff2f\015\uff2f\021\335\022\uff2f\023\uff2f" +
    "\053\uff2f\054\uff2f\055\uff2f\056\uff2f\060\uff2f\061\uff2f\062" +
    "\uff2f\063\uff2f\064\uff2f\065\uff2f\066\uff2f\067\uff2f\070\uff2f" +
    "\071\uff2f\072\uff2f\001\002\000\012\012\uff4e\014\uff1c\060" +
    "\uff1a\061\uff18\001\002\000\060\010\uff56\011\uff56\012\uff56" +
    "\013\uff56\014\uff56\015\uff56\022\uff56\023\uff56\053\uff56\054" +
    "\uff56\055\uff56\056\uff56\060\uff56\061\uff56\062\uff56\063\uff56" +
    "\064\uff56\065\uff56\066\uff56\067\uff56\070\uff56\071\uff56\072" +
    "\uff56\001\002\000\004\014\332\001\002\000\004\012\330" +
    "\001\002\000\004\061\326\001\002\000\004\060\323\001" +
    "\002\000\060\003\325\004\053\005\051\006\064\007\063" +
    "\021\172\041\225\042\213\043\221\044\244\052\222\053" +
    "\270\054\165\055\216\056\262\057\264\074\247\075\232" +
    "\076\201\077\203\100\166\101\074\102\211\001\002\000" +
    "\050\011\uff19\013\uff19\014\uff19\015\uff19\022\uff19\023\uff19" +
    "\053\uff19\056\uff19\060\uff19\061\uff19\062\uff19\063\uff19\064" +
    "\uff19\065\uff19\066\uff19\067\uff19\070\uff19\071\uff19\072\uff19" +
    "\001\002\000\004\012\uff4e\001\002\000\060\003\325\004" +
    "\053\005\051\006\064\007\063\021\172\041\225\042\213" +
    "\043\221\044\244\052\222\053\270\054\165\055\216\056" +
    "\262\057\264\074\247\075\232\076\201\077\203\100\166" +
    "\101\074\102\211\001\002\000\050\011\uff17\013\uff17\014" +
    "\uff17\015\uff17\022\uff17\023\uff17\053\uff17\056\uff17\060\uff17" +
    "\061\uff17\062\uff17\063\uff17\064\uff17\065\uff17\066\uff17\067" +
    "\uff17\070\uff17\071\uff17\072\uff17\001\002\000\004\042\331" +
    "\001\002\000\060\010\uff4d\011\uff4d\012\uff4d\013\uff4d\014" +
    "\uff4d\015\uff4d\022\uff4d\023\uff4d\053\uff4d\054\uff4d\055\uff4d" +
    "\056\uff4d\060\uff4d\061\uff4d\062\uff4d\063\uff4d\064\uff4d\065" +
    "\uff4d\066\uff4d\067\uff4d\070\uff4d\071\uff4d\072\uff4d\001\002" +
    "\000\060\003\325\004\053\005\051\006\064\007\063\021" +
    "\172\041\225\042\213\043\221\044\244\052\222\053\270" +
    "\054\165\055\216\056\262\057\264\074\247\075\232\076" +
    "\201\077\203\100\166\101\074\102\211\001\002\000\050" +
    "\011\uff1b\013\uff1b\014\uff1b\015\uff1b\022\uff1b\023\uff1b\053" +
    "\uff1b\056\uff1b\060\uff1b\061\uff1b\062\uff1b\063\uff1b\064\uff1b" +
    "\065\uff1b\066\uff1b\067\uff1b\070\uff1b\071\uff1b\072\uff1b\001" +
    "\002\000\062\003\273\004\053\005\051\006\064\007\063" +
    "\011\140\021\172\041\225\042\213\043\221\044\244\052" +
    "\222\053\270\054\165\055\216\056\262\057\264\074\247" +
    "\075\232\076\201\077\203\100\166\101\074\102\211\001" +
    "\002\000\062\003\343\004\053\005\051\006\064\007\063" +
    "\021\172\022\uff48\041\225\042\213\043\221\044\244\052" +
    "\222\053\270\054\165\055\216\056\262\057\264\074\247" +
    "\075\232\076\201\077\203\100\166\101\074\102\211\001" +
    "\002\000\010\037\340\042\337\101\150\001\002\000\060" +
    "\010\uff51\011\uff51\012\uff51\013\uff51\014\uff51\015\uff51\022" +
    "\uff51\023\uff51\053\uff51\054\uff51\055\uff51\056\uff51\060\uff51" +
    "\061\uff51\062\uff51\063\uff51\064\uff51\065\uff51\066\uff51\067" +
    "\uff51\070\uff51\071\uff51\072\uff51\001\002\000\060\010\uff52" +
    "\011\uff52\012\uff52\013\uff52\014\uff52\015\uff52\022\uff52\023" +
    "\uff52\053\uff52\054\uff52\055\uff52\056\uff52\060\uff52\061\uff52" +
    "\062\uff52\063\uff52\064\uff52\065\uff52\066\uff52\067\uff52\070" +
    "\uff52\071\uff52\072\uff52\001\002\000\004\022\u0122\001\002" +
    "\000\006\015\uff46\022\uff46\001\002\000\114\003\uff44\004" +
    "\uff44\005\uff44\006\uff44\007\uff44\012\uff4e\014\uff1c\020\ufeec" +
    "\021\uff44\041\uff44\042\uff44\043\uff44\044\uff44\052\uff44\053" +
    "\uff44\054\uff44\055\uff44\056\uff44\057\uff44\060\uff1a\061\uff18" +
    "\062\uff0e\063\uff0c\064\uff0a\065\uff08\066\uff03\067\uff01\070" +
    "\ufefc\071\ufef7\072\ufef1\074\uff44\075\uff44\076\uff44\077\uff44" +
    "\100\uff44\101\uff44\102\uff44\001\002\000\006\015\346\022" +
    "\uff47\001\002\000\014\011\ufee5\013\ufee5\015\ufee5\022\ufee5" +
    "\023\ufee5\001\002\000\060\003\273\004\053\005\051\006" +
    "\064\007\063\021\172\041\225\042\213\043\221\044\244" +
    "\052\222\053\270\054\165\055\216\056\262\057\264\074" +
    "\247\075\232\076\201\077\203\100\166\101\074\102\211" +
    "\001\002\000\006\015\uff45\022\uff45\001\002\000\004\020" +
    "\u0120\001\002\000\004\072\u0118\001\002\000\004\071\u0112" +
    "\001\002\000\004\070\u010b\001\002\000\004\066\u0109\001" +
    "\002\000\004\067\u0106\001\002\000\004\065\u0104\001\002" +
    "\000\004\064\u0102\001\002\000\004\063\u0100\001\002\000" +
    "\004\062\364\001\002\000\060\003\273\004\053\005\051" +
    "\006\064\007\063\021\172\041\225\042\213\043\221\044" +
    "\244\052\222\053\270\054\165\055\216\056\262\057\264" +
    "\074\247\075\232\076\201\077\203\100\166\101\074\102" +
    "\211\001\002\000\006\015\uff43\022\uff43\001\002\000\060" +
    "\003\315\004\053\005\051\006\064\007\063\021\172\041" +
    "\225\042\213\043\221\044\244\052\222\053\270\054\165" +
    "\055\216\056\262\057\264\074\247\075\232\076\201\077" +
    "\203\100\166\101\074\102\211\001\002\000\042\011\uff0d" +
    "\013\uff0d\015\uff0d\022\uff0d\023\uff0d\053\366\056\367\062" +
    "\uff0d\063\uff0d\064\uff0d\065\uff0d\066\uff0d\067\uff0d\070\uff0d" +
    "\071\uff0d\072\uff0d\001\002\000\060\003\315\004\053\005" +
    "\051\006\064\007\063\021\172\041\225\042\213\043\221" +
    "\044\244\052\222\053\270\054\165\055\216\056\262\057" +
    "\264\074\247\075\232\076\201\077\203\100\166\101\074" +
    "\102\211\001\002\000\060\003\315\004\053\005\051\006" +
    "\064\007\063\021\172\041\225\042\213\043\221\044\244" +
    "\052\222\053\270\054\165\055\216\056\262\057\264\074" +
    "\247\075\232\076\201\077\203\100\166\101\074\102\211" +
    "\001\002\000\050\011\uff14\013\uff14\014\372\015\uff14\022" +
    "\uff14\023\uff14\053\uff14\056\uff14\060\373\061\371\062\uff14" +
    "\063\uff14\064\uff14\065\uff14\066\uff14\067\uff14\070\uff14\071" +
    "\uff14\072\uff14\001\002\000\060\003\325\004\053\005\051" +
    "\006\064\007\063\021\172\041\225\042\213\043\221\044" +
    "\244\052\222\053\270\054\165\055\216\056\262\057\264" +
    "\074\247\075\232\076\201\077\203\100\166\101\074\102" +
    "\211\001\002\000\060\003\325\004\053\005\051\006\064" +
    "\007\063\021\172\041\225\042\213\043\221\044\244\052" +
    "\222\053\270\054\165\055\216\056\262\057\264\074\247" +
    "\075\232\076\201\077\203\100\166\101\074\102\211\001" +
    "\002\000\060\003\325\004\053\005\051\006\064\007\063" +
    "\021\172\041\225\042\213\043\221\044\244\052\222\053" +
    "\270\054\165\055\216\056\262\057\264\074\247\075\232" +
    "\076\201\077\203\100\166\101\074\102\211\001\002\000" +
    "\050\011\uff1e\013\uff1e\014\uff1e\015\uff1e\022\uff1e\023\uff1e" +
    "\053\uff1e\056\uff1e\060\uff1e\061\uff1e\062\uff1e\063\uff1e\064" +
    "\uff1e\065\uff1e\066\uff1e\067\uff1e\070\uff1e\071\uff1e\072\uff1e" +
    "\001\002\000\050\011\uff1f\013\uff1f\014\uff1f\015\uff1f\022" +
    "\uff1f\023\uff1f\053\uff1f\056\uff1f\060\uff1f\061\uff1f\062\uff1f" +
    "\063\uff1f\064\uff1f\065\uff1f\066\uff1f\067\uff1f\070\uff1f\071" +
    "\uff1f\072\uff1f\001\002\000\050\011\uff1d\013\uff1d\014\uff1d" +
    "\015\uff1d\022\uff1d\023\uff1d\053\uff1d\056\uff1d\060\uff1d\061" +
    "\uff1d\062\uff1d\063\uff1d\064\uff1d\065\uff1d\066\uff1d\067\uff1d" +
    "\070\uff1d\071\uff1d\072\uff1d\001\002\000\050\011\uff15\013" +
    "\uff15\014\372\015\uff15\022\uff15\023\uff15\053\uff15\056\uff15" +
    "\060\373\061\371\062\uff15\063\uff15\064\uff15\065\uff15\066" +
    "\uff15\067\uff15\070\uff15\071\uff15\072\uff15\001\002\000\060" +
    "\003\315\004\053\005\051\006\064\007\063\021\172\041" +
    "\225\042\213\043\221\044\244\052\222\053\270\054\165" +
    "\055\216\056\262\057\264\074\247\075\232\076\201\077" +
    "\203\100\166\101\074\102\211\001\002\000\042\011\uff0b" +
    "\013\uff0b\015\uff0b\022\uff0b\023\uff0b\053\366\056\367\062" +
    "\uff0b\063\uff0b\064\uff0b\065\uff0b\066\uff0b\067\uff0b\070\uff0b" +
    "\071\uff0b\072\uff0b\001\002\000\060\003\315\004\053\005" +
    "\051\006\064\007\063\021\172\041\225\042\213\043\221" +
    "\044\244\052\222\053\270\054\165\055\216\056\262\057" +
    "\264\074\247\075\232\076\201\077\203\100\166\101\074" +
    "\102\211\001\002\000\042\011\uff09\013\uff09\015\uff09\022" +
    "\uff09\023\uff09\053\366\056\367\062\uff09\063\uff09\064\uff09" +
    "\065\uff09\066\uff09\067\uff09\070\uff09\071\uff09\072\uff09\001" +
    "\002\000\060\003\315\004\053\005\051\006\064\007\063" +
    "\021\172\041\225\042\213\043\221\044\244\052\222\053" +
    "\270\054\165\055\216\056\262\057\264\074\247\075\232" +
    "\076\201\077\203\100\166\101\074\102\211\001\002\000" +
    "\042\011\uff07\013\uff07\015\uff07\022\uff07\023\uff07\053\366" +
    "\056\367\062\uff07\063\uff07\064\uff07\065\uff07\066\uff07\067" +
    "\uff07\070\uff07\071\uff07\072\uff07\001\002\000\060\003\u0107" +
    "\004\053\005\051\006\064\007\063\021\172\041\225\042" +
    "\213\043\221\044\244\052\222\053\270\054\165\055\216" +
    "\056\262\057\264\074\247\075\232\076\201\077\203\100" +
    "\166\101\074\102\211\001\002\000\022\012\uff4e\014\uff1c" +
    "\060\uff1a\061\uff18\062\uff0e\063\uff0c\064\uff0a\065\uff08\001" +
    "\002\000\036\011\uff00\013\uff00\015\uff00\022\uff00\023\uff00" +
    "\062\306\063\310\064\311\065\307\066\uff00\067\uff00\070" +
    "\uff00\071\uff00\072\uff00\001\002\000\060\003\u0107\004\053" +
    "\005\051\006\064\007\063\021\172\041\225\042\213\043" +
    "\221\044\244\052\222\053\270\054\165\055\216\056\262" +
    "\057\264\074\247\075\232\076\201\077\203\100\166\101" +
    "\074\102\211\001\002\000\036\011\uff02\013\uff02\015\uff02" +
    "\022\uff02\023\uff02\062\306\063\310\064\311\065\307\066" +
    "\uff02\067\uff02\070\uff02\071\uff02\072\uff02\001\002\000\060" +
    "\003\u010d\004\053\005\051\006\064\007\063\021\172\041" +
    "\225\042\213\043\221\044\244\052\222\053\270\054\165" +
    "\055\216\056\262\057\264\074\247\075\232\076\201\077" +
    "\203\100\166\101\074\102\211\001\002\000\026\011\ufefb" +
    "\013\ufefb\015\ufefb\022\ufefb\023\ufefb\066\u010f\067\u010e\070" +
    "\ufefb\071\ufefb\072\ufefb\001\002\000\026\012\uff4e\014\uff1c" +
    "\060\uff1a\061\uff18\062\uff0e\063\uff0c\064\uff0a\065\uff08\066" +
    "\uff03\067\uff01\001\002\000\060\003\u0107\004\053\005\051" +
    "\006\064\007\063\021\172\041\225\042\213\043\221\044" +
    "\244\052\222\053\270\054\165\055\216\056\262\057\264" +
    "\074\247\075\232\076\201\077\203\100\166\101\074\102" +
    "\211\001\002\000\060\003\u0107\004\053\005\051\006\064" +
    "\007\063\021\172\041\225\042\213\043\221\044\244\052" +
    "\222\053\270\054\165\055\216\056\262\057\264\074\247" +
    "\075\232\076\201\077\203\100\166\101\074\102\211\001" +
    "\002\000\036\011\uff05\013\uff05\015\uff05\022\uff05\023\uff05" +
    "\062\306\063\310\064\311\065\307\066\uff05\067\uff05\070" +
    "\uff05\071\uff05\072\uff05\001\002\000\036\011\uff04\013\uff04" +
    "\015\uff04\022\uff04\023\uff04\062\306\063\310\064\311\065" +
    "\307\066\uff04\067\uff04\070\uff04\071\uff04\072\uff04\001\002" +
    "\000\060\003\u0114\004\053\005\051\006\064\007\063\021" +
    "\172\041\225\042\213\043\221\044\244\052\222\053\270" +
    "\054\165\055\216\056\262\057\264\074\247\075\232\076" +
    "\201\077\203\100\166\101\074\102\211\001\002\000\022" +
    "\011\ufef6\013\ufef6\015\ufef6\022\ufef6\023\ufef6\070\u0115\071" +
    "\ufef6\072\ufef6\001\002\000\030\012\uff4e\014\uff1c\060\uff1a" +
    "\061\uff18\062\uff0e\063\uff0c\064\uff0a\065\uff08\066\uff03\067" +
    "\uff01\070\ufefc\001\002\000\060\003\ufeff\004\ufeff\005\ufeff" +
    "\006\ufeff\007\ufeff\021\ufeff\041\ufeff\042\ufeff\043\ufeff\044" +
    "\ufeff\052\ufeff\053\ufeff\054\ufeff\055\ufeff\056\ufeff\057\ufeff" +
    "\074\ufeff\075\ufeff\076\ufeff\077\ufeff\100\ufeff\101\ufeff\102" +
    "\ufeff\001\002\000\060\003\u010d\004\053\005\051\006\064" +
    "\007\063\021\172\041\225\042\213\043\221\044\244\052" +
    "\222\053\270\054\165\055\216\056\262\057\264\074\247" +
    "\075\232\076\201\077\203\100\166\101\074\102\211\001" +
    "\002\000\026\011\ufefd\013\ufefd\015\ufefd\022\ufefd\023\ufefd" +
    "\066\u010f\067\u010e\070\ufefd\071\ufefd\072\ufefd\001\002\000" +
    "\060\003\273\004\053\005\051\006\064\007\063\021\172" +
    "\041\225\042\213\043\221\044\244\052\222\053\270\054" +
    "\165\055\216\056\262\057\264\074\247\075\232\076\201" +
    "\077\203\100\166\101\074\102\211\001\002\000\004\023" +
    "\u011a\001\002\000\060\003\u011b\004\053\005\051\006\064" +
    "\007\063\021\172\041\225\042\213\043\221\044\244\052" +
    "\222\053\270\054\165\055\216\056\262\057\264\074\247" +
    "\075\232\076\201\077\203\100\166\101\074\102\211\001" +
    "\002\000\032\012\uff4e\014\uff1c\060\uff1a\061\uff18\062\uff0e" +
    "\063\uff0c\064\uff0a\065\uff08\066\uff03\067\uff01\070\ufefc\071" +
    "\ufef7\001\002\000\016\011\ufef0\013\ufef0\015\ufef0\022\ufef0" +
    "\023\ufef0\071\u011d\001\002\000\060\003\ufefa\004\ufefa\005" +
    "\ufefa\006\ufefa\007\ufefa\021\ufefa\041\ufefa\042\ufefa\043\ufefa" +
    "\044\ufefa\052\ufefa\053\ufefa\054\ufefa\055\ufefa\056\ufefa\057" +
    "\ufefa\074\ufefa\075\ufefa\076\ufefa\077\ufefa\100\ufefa\101\ufefa" +
    "\102\ufefa\001\002\000\060\003\u0114\004\053\005\051\006" +
    "\064\007\063\021\172\041\225\042\213\043\221\044\244" +
    "\052\222\053\270\054\165\055\216\056\262\057\264\074" +
    "\247\075\232\076\201\077\203\100\166\101\074\102\211" +
    "\001\002\000\022\011\ufef8\013\ufef8\015\ufef8\022\ufef8\023" +
    "\ufef8\070\u0115\071\ufef8\072\ufef8\001\002\000\060\003\273" +
    "\004\053\005\051\006\064\007\063\021\172\041\225\042" +
    "\213\043\221\044\244\052\222\053\270\054\165\055\216" +
    "\056\262\057\264\074\247\075\232\076\201\077\203\100" +
    "\166\101\074\102\211\001\002\000\014\011\ufeeb\013\ufeeb" +
    "\015\ufeeb\022\ufeeb\023\ufeeb\001\002\000\060\010\uff35\011" +
    "\uff35\012\uff35\013\uff35\014\uff35\015\uff35\022\uff35\023\uff35" +
    "\053\uff35\054\uff35\055\uff35\056\uff35\060\uff35\061\uff35\062" +
    "\uff35\063\uff35\064\uff35\065\uff35\066\uff35\067\uff35\070\uff35" +
    "\071\uff35\072\uff35\001\002\000\004\011\u0124\001\002\000" +
    "\062\010\uff32\011\uff32\012\uff32\013\uff32\014\uff32\015\uff32" +
    "\020\uff32\022\uff32\023\uff32\053\uff32\054\uff32\055\uff32\056" +
    "\uff32\060\uff32\061\uff32\062\uff32\063\uff32\064\uff32\065\uff32" +
    "\066\uff32\067\uff32\070\uff32\071\uff32\072\uff32\001\002\000" +
    "\042\011\uff11\013\uff11\015\uff11\022\uff11\023\uff11\053\366" +
    "\056\367\062\uff11\063\uff11\064\uff11\065\uff11\066\uff11\067" +
    "\uff11\070\uff11\071\uff11\072\uff11\001\002\000\042\011\uff0f" +
    "\013\uff0f\015\uff0f\022\uff0f\023\uff0f\053\366\056\367\062" +
    "\uff0f\063\uff0f\064\uff0f\065\uff0f\066\uff0f\067\uff0f\070\uff0f" +
    "\071\uff0f\072\uff0f\001\002\000\042\011\uff12\013\uff12\015" +
    "\uff12\022\uff12\023\uff12\053\366\056\367\062\uff12\063\uff12" +
    "\064\uff12\065\uff12\066\uff12\067\uff12\070\uff12\071\uff12\072" +
    "\uff12\001\002\000\060\003\ufef5\004\ufef5\005\ufef5\006\ufef5" +
    "\007\ufef5\021\ufef5\041\ufef5\042\ufef5\043\ufef5\044\ufef5\052" +
    "\ufef5\053\ufef5\054\ufef5\055\ufef5\056\ufef5\057\ufef5\074\ufef5" +
    "\075\ufef5\076\ufef5\077\ufef5\100\ufef5\101\ufef5\102\ufef5\001" +
    "\002\000\060\003\273\004\053\005\051\006\064\007\063" +
    "\021\172\041\225\042\213\043\221\044\244\052\222\053" +
    "\270\054\165\055\216\056\262\057\264\074\247\075\232" +
    "\076\201\077\203\100\166\101\074\102\211\001\002\000" +
    "\004\023\u012b\001\002\000\060\003\ufef4\004\ufef4\005\ufef4" +
    "\006\ufef4\007\ufef4\021\ufef4\041\ufef4\042\ufef4\043\ufef4\044" +
    "\ufef4\052\ufef4\053\ufef4\054\ufef4\055\ufef4\056\ufef4\057\ufef4" +
    "\074\ufef4\075\ufef4\076\ufef4\077\ufef4\100\ufef4\101\ufef4\102" +
    "\ufef4\001\002\000\060\003\u012d\004\053\005\051\006\064" +
    "\007\063\021\172\041\225\042\213\043\221\044\244\052" +
    "\222\053\270\054\165\055\216\056\262\057\264\074\247" +
    "\075\232\076\201\077\203\100\166\101\074\102\211\001" +
    "\002\000\034\012\uff4e\014\uff1c\060\uff1a\061\uff18\062\uff0e" +
    "\063\uff0c\064\uff0a\065\uff08\066\uff03\067\uff01\070\ufefc\071" +
    "\ufef7\072\ufef1\001\002\000\014\011\ufef2\013\ufef2\015\ufef2" +
    "\022\ufef2\023\ufef2\001\002\000\004\037\u0130\001\002\000" +
    "\060\010\uff55\011\uff55\012\uff55\013\uff55\014\uff55\015\uff55" +
    "\022\uff55\023\uff55\053\uff55\054\uff55\055\uff55\056\uff55\060" +
    "\uff55\061\uff55\062\uff55\063\uff55\064\uff55\065\uff55\066\uff55" +
    "\067\uff55\070\uff55\071\uff55\072\uff55\001\002\000\054\011" +
    "\uff29\013\uff29\014\uff29\015\uff29\022\uff29\023\uff29\053\uff29" +
    "\054\uff29\055\uff29\056\uff29\060\uff29\061\uff29\062\uff29\063" +
    "\uff29\064\uff29\065\uff29\066\uff29\067\uff29\070\uff29\071\uff29" +
    "\072\uff29\001\002\000\054\011\uff2a\013\uff2a\014\uff2a\015" +
    "\uff2a\022\uff2a\023\uff2a\053\uff2a\054\uff2a\055\uff2a\056\uff2a" +
    "\060\uff2a\061\uff2a\062\uff2a\063\uff2a\064\uff2a\065\uff2a\066" +
    "\uff2a\067\uff2a\070\uff2a\071\uff2a\072\uff2a\001\002\000\050" +
    "\011\uff24\013\uff24\014\uff24\015\uff24\022\uff24\023\uff24\053" +
    "\uff24\056\uff24\060\uff24\061\uff24\062\uff24\063\uff24\064\uff24" +
    "\065\uff24\066\uff24\067\uff24\070\uff24\071\uff24\072\uff24\001" +
    "\002\000\004\037\u0135\001\002\000\060\010\uff53\011\uff53" +
    "\012\uff53\013\uff53\014\uff53\015\uff53\022\uff53\023\uff53\053" +
    "\uff53\054\uff53\055\uff53\056\uff53\060\uff53\061\uff53\062\uff53" +
    "\063\uff53\064\uff53\065\uff53\066\uff53\067\uff53\070\uff53\071" +
    "\uff53\072\uff53\001\002\000\060\003\325\004\053\005\051" +
    "\006\064\007\063\021\172\041\225\042\213\043\221\044" +
    "\244\052\222\053\270\054\165\055\216\056\262\057\264" +
    "\074\247\075\232\076\201\077\203\100\166\101\074\102" +
    "\211\001\002\000\050\011\uff25\013\uff25\014\uff25\015\uff25" +
    "\022\uff25\023\uff25\053\uff25\056\uff25\060\uff25\061\uff25\062" +
    "\uff25\063\uff25\064\uff25\065\uff25\066\uff25\067\uff25\070\uff25" +
    "\071\uff25\072\uff25\001\002\000\050\011\uff23\013\uff23\014" +
    "\uff23\015\uff23\022\uff23\023\uff23\053\uff23\056\uff23\060\uff23" +
    "\061\uff23\062\uff23\063\uff23\064\uff23\065\uff23\066\uff23\067" +
    "\uff23\070\uff23\071\uff23\072\uff23\001\002\000\004\013\u013a" +
    "\001\002\000\070\003\uff94\004\uff94\005\uff94\006\uff94\007" +
    "\uff94\013\uff94\016\uff94\017\uff94\021\uff94\041\uff94\042\uff94" +
    "\043\uff94\044\uff94\045\uff94\047\uff94\050\uff94\051\uff94\052" +
    "\uff94\054\uff94\055\uff94\074\uff94\075\uff94\076\uff94\077\uff94" +
    "\100\uff94\101\uff94\102\uff94\001\002\000\056\011\uff2c\012" +
    "\147\013\uff2c\014\uff2c\015\uff2c\022\uff2c\023\uff2c\053\uff2c" +
    "\054\uff2c\055\uff2c\056\uff2c\060\uff2c\061\uff2c\062\uff2c\063" +
    "\uff2c\064\uff2c\065\uff2c\066\uff2c\067\uff2c\070\uff2c\071\uff2c" +
    "\072\uff2c\001\002\000\006\012\uff4e\020\ufeec\001\002\000" +
    "\070\003\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\013\uff9b" +
    "\016\uff9b\017\uff9b\021\uff9b\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\054\uff9b" +
    "\055\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\101" +
    "\uff9b\102\uff9b\001\002\000\004\022\uff64\001\002\000\060" +
    "\003\uff78\004\uff78\005\uff78\006\uff78\007\uff78\021\uff78\041" +
    "\uff78\042\uff78\043\uff78\044\uff78\052\uff78\053\uff78\054\uff78" +
    "\055\uff78\056\uff78\057\uff78\074\uff78\075\uff78\076\uff78\077" +
    "\uff78\100\uff78\101\uff78\102\uff78\001\002\000\060\003\273" +
    "\004\053\005\051\006\064\007\063\021\172\041\225\042" +
    "\213\043\221\044\244\052\222\053\270\054\165\055\216" +
    "\056\262\057\264\074\247\075\232\076\201\077\203\100" +
    "\166\101\074\102\211\001\002\000\004\022\uff7a\001\002" +
    "\000\004\022\u0143\001\002\000\066\003\u013c\004\053\005" +
    "\051\006\064\007\063\013\204\016\040\021\172\041\225" +
    "\042\213\043\221\044\244\045\212\047\235\050\177\051" +
    "\217\052\222\054\165\055\216\074\247\075\232\076\201" +
    "\077\203\100\166\101\074\102\211\001\002\000\070\003" +
    "\uff65\004\uff65\005\uff65\006\uff65\007\uff65\013\uff65\016\uff65" +
    "\017\uff65\021\uff65\041\uff65\042\uff65\043\uff65\044\uff65\045" +
    "\uff65\047\uff65\050\uff65\051\uff65\052\uff65\054\uff65\055\uff65" +
    "\074\uff65\075\uff65\076\uff65\077\uff65\100\uff65\101\uff65\102" +
    "\uff65\001\002\000\004\022\uff7a\001\002\000\004\022\u0147" +
    "\001\002\000\066\003\u013c\004\053\005\051\006\064\007" +
    "\063\013\204\016\040\021\172\041\225\042\213\043\221" +
    "\044\244\045\212\047\235\050\177\051\217\052\222\054" +
    "\165\055\216\074\247\075\232\076\201\077\203\100\166" +
    "\101\074\102\211\001\002\000\070\003\uff63\004\uff63\005" +
    "\uff63\006\uff63\007\uff63\013\uff63\016\uff63\017\uff63\021\uff63" +
    "\041\uff63\042\uff63\043\uff63\044\uff63\045\uff63\047\uff63\050" +
    "\uff63\051\uff63\052\uff63\054\uff63\055\uff63\074\uff63\075\uff63" +
    "\076\uff63\077\uff63\100\uff63\101\uff63\102\uff63\001\002\000" +
    "\060\003\273\004\053\005\051\006\064\007\063\021\172" +
    "\041\225\042\213\043\221\044\244\052\222\053\270\054" +
    "\165\055\216\056\262\057\264\074\247\075\232\076\201" +
    "\077\203\100\166\101\074\102\211\001\002\000\004\011" +
    "\u014b\001\002\000\062\010\uff31\011\uff31\012\uff31\013\uff31" +
    "\014\uff31\015\uff31\020\uff31\022\uff31\023\uff31\053\uff31\054" +
    "\uff31\055\uff31\056\uff31\060\uff31\061\uff31\062\uff31\063\uff31" +
    "\064\uff31\065\uff31\066\uff31\067\uff31\070\uff31\071\uff31\072" +
    "\uff31\001\002\000\004\037\u014d\001\002\000\060\010\uff54" +
    "\011\uff54\012\uff54\013\uff54\014\uff54\015\uff54\022\uff54\023" +
    "\uff54\053\uff54\054\uff54\055\uff54\056\uff54\060\uff54\061\uff54" +
    "\062\uff54\063\uff54\064\uff54\065\uff54\066\uff54\067\uff54\070" +
    "\uff54\071\uff54\072\uff54\001\002\000\052\003\uffaf\004\uffaf" +
    "\005\uffaf\006\uffaf\007\uffaf\013\uffaf\016\uffaf\017\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\041\uffaf\101\uffaf\001\002\000" +
    "\066\003\u013c\004\053\005\051\006\064\007\063\013\204" +
    "\016\040\021\172\041\225\042\213\043\221\044\244\045" +
    "\212\047\235\050\177\051\217\052\222\054\165\055\216" +
    "\074\247\075\232\076\201\077\203\100\166\101\074\102" +
    "\211\001\002\000\070\003\uff99\004\uff99\005\uff99\006\uff99" +
    "\007\uff99\013\uff99\016\uff99\017\uff99\021\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\045\uff99\047\uff99\050\uff99\051\uff99" +
    "\052\uff99\054\uff99\055\uff99\074\uff99\075\uff99\076\uff99\077" +
    "\uff99\100\uff99\101\uff99\102\uff99\001\002\000\012\003\u0153" +
    "\010\u0156\012\147\021\uff4c\001\002\000\006\003\u0153\010" +
    "\u0156\001\002\000\004\010\uff3e\001\002\000\060\010\uff40" +
    "\011\uff40\012\uff40\013\uff40\014\uff40\015\uff40\022\uff40\023" +
    "\uff40\053\uff40\054\uff40\055\uff40\056\uff40\060\uff40\061\uff40" +
    "\062\uff40\063\uff40\064\uff40\065\uff40\066\uff40\067\uff40\070" +
    "\uff40\071\uff40\072\uff40\001\002\000\060\010\u015b\011\uff3b" +
    "\012\uff3b\013\uff3b\014\uff3b\015\uff3b\022\uff3b\023\uff3b\053" +
    "\uff3b\054\uff3b\055\uff3b\056\uff3b\060\uff3b\061\uff3b\062\uff3b" +
    "\063\uff3b\064\uff3b\065\uff3b\066\uff3b\067\uff3b\070\uff3b\071" +
    "\uff3b\072\uff3b\001\002\000\060\003\273\004\053\005\051" +
    "\006\064\007\063\021\172\041\225\042\213\043\221\044" +
    "\244\052\222\053\270\054\165\055\216\056\262\057\264" +
    "\074\247\075\232\076\201\077\203\100\166\101\074\102" +
    "\211\001\002\000\004\011\u0158\001\002\000\060\010\uff3c" +
    "\011\uff3c\012\uff3c\013\uff3c\014\uff3c\015\uff3c\022\uff3c\023" +
    "\uff3c\053\uff3c\054\uff3c\055\uff3c\056\uff3c\060\uff3c\061\uff3c" +
    "\062\uff3c\063\uff3c\064\uff3c\065\uff3c\066\uff3c\067\uff3c\070" +
    "\uff3c\071\uff3c\072\uff3c\001\002\000\056\011\uff42\012\uff42" +
    "\013\uff42\014\uff42\015\uff42\022\uff42\023\uff42\053\uff42\054" +
    "\uff42\055\uff42\056\uff42\060\uff42\061\uff42\062\uff42\063\uff42" +
    "\064\uff42\065\uff42\066\uff42\067\uff42\070\uff42\071\uff42\072" +
    "\uff42\001\002\000\060\010\uff3f\011\uff3f\012\uff3f\013\uff3f" +
    "\014\uff3f\015\uff3f\022\uff3f\023\uff3f\053\uff3f\054\uff3f\055" +
    "\uff3f\056\uff3f\060\uff3f\061\uff3f\062\uff3f\063\uff3f\064\uff3f" +
    "\065\uff3f\066\uff3f\067\uff3f\070\uff3f\071\uff3f\072\uff3f\001" +
    "\002\000\062\003\273\004\053\005\051\006\064\007\063" +
    "\011\140\021\172\041\225\042\213\043\221\044\244\052" +
    "\222\053\270\054\165\055\216\056\262\057\264\074\247" +
    "\075\232\076\201\077\203\100\166\101\074\102\211\001" +
    "\002\000\060\010\136\011\uff3a\012\uff3a\013\uff3a\014\uff3a" +
    "\015\uff3a\022\uff3a\023\uff3a\053\uff3a\054\uff3a\055\uff3a\056" +
    "\uff3a\060\uff3a\061\uff3a\062\uff3a\063\uff3a\064\uff3a\065\uff3a" +
    "\066\uff3a\067\uff3a\070\uff3a\071\uff3a\072\uff3a\001\002\000" +
    "\004\010\u0156\001\002\000\060\010\uff3d\011\uff3d\012\uff3d" +
    "\013\uff3d\014\uff3d\015\uff3d\022\uff3d\023\uff3d\053\uff3d\054" +
    "\uff3d\055\uff3d\056\uff3d\060\uff3d\061\uff3d\062\uff3d\063\uff3d" +
    "\064\uff3d\065\uff3d\066\uff3d\067\uff3d\070\uff3d\071\uff3d\072" +
    "\uff3d\001\002\000\004\021\u0162\001\002\000\060\010\u015b" +
    "\011\uff3b\012\uff3b\013\uff3b\014\uff3b\015\uff3b\022\uff3b\023" +
    "\uff3b\053\uff3b\054\uff3b\055\uff3b\056\uff3b\060\uff3b\061\uff3b" +
    "\062\uff3b\063\uff3b\064\uff3b\065\uff3b\066\uff3b\067\uff3b\070" +
    "\uff3b\071\uff3b\072\uff3b\001\002\000\056\011\uff41\012\uff41" +
    "\013\uff41\014\uff41\015\uff41\022\uff41\023\uff41\053\uff41\054" +
    "\uff41\055\uff41\056\uff41\060\uff41\061\uff41\062\uff41\063\uff41" +
    "\064\uff41\065\uff41\066\uff41\067\uff41\070\uff41\071\uff41\072" +
    "\uff41\001\002\000\062\003\343\004\053\005\051\006\064" +
    "\007\063\021\172\022\uff48\041\225\042\213\043\221\044" +
    "\244\052\222\053\270\054\165\055\216\056\262\057\264" +
    "\074\247\075\232\076\201\077\203\100\166\101\074\102" +
    "\211\001\002\000\004\022\u0164\001\002\000\062\010\uff4a" +
    "\011\uff4a\012\uff4a\013\uff4a\014\uff4a\015\uff4a\016\031\022" +
    "\uff4a\023\uff4a\053\uff4a\054\uff4a\055\uff4a\056\uff4a\060\uff4a" +
    "\061\uff4a\062\uff4a\063\uff4a\064\uff4a\065\uff4a\066\uff4a\067" +
    "\uff4a\070\uff4a\071\uff4a\072\uff4a\001\002\000\060\010\uff4b" +
    "\011\uff4b\012\uff4b\013\uff4b\014\uff4b\015\uff4b\022\uff4b\023" +
    "\uff4b\053\uff4b\054\uff4b\055\uff4b\056\uff4b\060\uff4b\061\uff4b" +
    "\062\uff4b\063\uff4b\064\uff4b\065\uff4b\066\uff4b\067\uff4b\070" +
    "\uff4b\071\uff4b\072\uff4b\001\002\000\060\010\uff49\011\uff49" +
    "\012\uff49\013\uff49\014\uff49\015\uff49\022\uff49\023\uff49\053" +
    "\uff49\054\uff49\055\uff49\056\uff49\060\uff49\061\uff49\062\uff49" +
    "\063\uff49\064\uff49\065\uff49\066\uff49\067\uff49\070\uff49\071" +
    "\uff49\072\uff49\001\002\000\004\101\u0168\001\002\000\064" +
    "\010\uff36\011\uff36\012\uff36\013\uff36\014\uff36\015\uff36\020" +
    "\uff36\021\u0169\022\uff36\023\uff36\053\uff36\054\uff36\055\uff36" +
    "\056\uff36\060\uff36\061\uff36\062\uff36\063\uff36\064\uff36\065" +
    "\uff36\066\uff36\067\uff36\070\uff36\071\uff36\072\uff36\001\002" +
    "\000\062\003\343\004\053\005\051\006\064\007\063\021" +
    "\172\022\uff48\041\225\042\213\043\221\044\244\052\222" +
    "\053\270\054\165\055\216\056\262\057\264\074\247\075" +
    "\232\076\201\077\203\100\166\101\074\102\211\001\002" +
    "\000\004\022\u016b\001\002\000\060\010\uff33\011\uff33\012" +
    "\uff33\013\uff33\014\uff33\015\uff33\022\uff33\023\uff33\053\uff33" +
    "\054\uff33\055\uff33\056\uff33\060\uff33\061\uff33\062\uff33\063" +
    "\uff33\064\uff33\065\uff33\066\uff33\067\uff33\070\uff33\071\uff33" +
    "\072\uff33\001\002\000\062\003\273\004\053\005\051\006" +
    "\064\007\063\013\ufee7\021\172\041\225\042\213\043\221" +
    "\044\244\052\222\053\270\054\165\055\216\056\262\057" +
    "\264\074\247\075\232\076\201\077\203\100\166\101\074" +
    "\102\211\001\002\000\004\013\ufee6\001\002\000\004\013" +
    "\u016f\001\002\000\072\003\uff60\004\uff60\005\uff60\006\uff60" +
    "\007\uff60\013\uff60\016\uff60\017\uff60\021\uff60\041\uff60\042" +
    "\uff60\043\uff60\044\uff60\045\uff60\046\uff60\047\uff60\050\uff60" +
    "\051\uff60\052\uff60\054\uff60\055\uff60\074\uff60\075\uff60\076" +
    "\uff60\077\uff60\100\uff60\101\uff60\102\uff60\001\002\000\050" +
    "\011\uff21\013\uff21\014\uff21\015\uff21\022\uff21\023\uff21\053" +
    "\uff21\056\uff21\060\uff21\061\uff21\062\uff21\063\uff21\064\uff21" +
    "\065\uff21\066\uff21\067\uff21\070\uff21\071\uff21\072\uff21\001" +
    "\002\000\052\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0" +
    "\013\uffb0\016\uffb0\017\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\041\uffb0\101\uffb0\001\002\000\004\022\uff76\001\002\000" +
    "\060\003\uff7b\004\uff7b\005\uff7b\006\uff7b\007\uff7b\021\uff7b" +
    "\041\uff7b\042\uff7b\043\uff7b\044\uff7b\052\uff7b\053\uff7b\054" +
    "\uff7b\055\uff7b\056\uff7b\057\uff7b\074\uff7b\075\uff7b\076\uff7b" +
    "\077\uff7b\100\uff7b\101\uff7b\102\uff7b\001\002\000\060\003" +
    "\u0176\004\053\005\051\006\064\007\063\021\172\041\225" +
    "\042\213\043\221\044\244\052\222\053\270\054\165\055" +
    "\216\056\262\057\264\074\247\075\232\076\201\077\203" +
    "\100\166\101\074\102\211\001\002\000\004\022\uff7a\001" +
    "\002\000\040\012\uff4e\014\uff1c\020\ufeec\022\uff73\060\uff1a" +
    "\061\uff18\062\uff0e\063\uff0c\064\uff0a\065\uff08\066\uff03\067" +
    "\uff01\070\ufefc\071\ufef7\072\ufef1\001\002\000\004\022\uff7a" +
    "\001\002\000\004\022\u0179\001\002\000\066\003\u013c\004" +
    "\053\005\051\006\064\007\063\013\204\016\040\021\172" +
    "\041\225\042\213\043\221\044\244\045\u017d\047\u0180\050" +
    "\u017c\051\217\052\222\054\165\055\216\074\247\075\232" +
    "\076\201\077\203\100\166\101\074\102\211\001\002\000" +
    "\004\046\uff8b\001\002\000\004\046\u01a9\001\002\000\004" +
    "\021\u0191\001\002\000\004\021\u0188\001\002\000\004\046" +
    "\uff89\001\002\000\004\046\uff8a\001\002\000\004\021\u0182" +
    "\001\002\000\004\046\uff8c\001\002\000\060\003\uff78\004" +
    "\uff78\005\uff78\006\uff78\007\uff78\021\uff78\041\uff78\042\uff78" +
    "\043\uff78\044\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056" +
    "\uff78\057\uff78\074\uff78\075\uff78\076\uff78\077\uff78\100\uff78" +
    "\101\uff78\102\uff78\001\002\000\060\003\273\004\053\005" +
    "\051\006\064\007\063\021\172\041\225\042\213\043\221" +
    "\044\244\052\222\053\270\054\165\055\216\056\262\057" +
    "\264\074\247\075\232\076\201\077\203\100\166\101\074" +
    "\102\211\001\002\000\004\022\uff7a\001\002\000\004\022" +
    "\u0186\001\002\000\066\003\u013c\004\053\005\051\006\064" +
    "\007\063\013\204\016\040\021\172\041\225\042\213\043" +
    "\221\044\244\045\u017d\047\u0180\050\u017c\051\217\052\222" +
    "\054\165\055\216\074\247\075\232\076\201\077\203\100" +
    "\166\101\074\102\211\001\002\000\004\046\uff62\001\002" +
    "\000\060\003\uff7b\004\uff7b\005\uff7b\006\uff7b\007\uff7b\021" +
    "\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\052\uff7b\053\uff7b" +
    "\054\uff7b\055\uff7b\056\uff7b\057\uff7b\074\uff7b\075\uff7b\076" +
    "\uff7b\077\uff7b\100\uff7b\101\uff7b\102\uff7b\001\002\000\060" +
    "\003\273\004\053\005\051\006\064\007\063\021\172\041" +
    "\225\042\213\043\221\044\244\052\222\053\270\054\165" +
    "\055\216\056\262\057\264\074\247\075\232\076\201\077" +
    "\203\100\166\101\074\102\211\001\002\000\004\022\uff7a" +
    "\001\002\000\004\022\u018c\001\002\000\066\003\u013c\004" +
    "\053\005\051\006\064\007\063\013\204\016\040\021\172" +
    "\041\225\042\213\043\221\044\244\045\u017d\047\u0180\050" +
    "\u017c\051\217\052\222\054\165\055\216\074\247\075\232" +
    "\076\201\077\203\100\166\101\074\102\211\001\002\000" +
    "\004\046\uff79\001\002\000\004\046\u018f\001\002\000\066" +
    "\003\u013c\004\053\005\051\006\064\007\063\013\204\016" +
    "\040\021\172\041\225\042\213\043\221\044\244\045\u017d" +
    "\047\u0180\050\u017c\051\217\052\222\054\165\055\216\074" +
    "\247\075\232\076\201\077\203\100\166\101\074\102\211" +
    "\001\002\000\004\046\uff71\001\002\000\056\003\u013c\004" +
    "\053\005\051\006\064\007\063\013\uff6e\021\172\031\u0195" +
    "\041\225\042\213\043\221\044\244\052\222\054\165\055" +
    "\216\074\247\075\232\076\201\077\203\100\166\101\074" +
    "\102\211\001\002\000\010\013\uff67\015\uff67\022\uff67\001" +
    "\002\000\004\013\uff6b\001\002\000\006\013\uff6c\015\u01a5" +
    "\001\002\000\014\004\053\005\051\006\064\007\063\101" +
    "\074\001\002\000\004\013\u019b\001\002\000\004\013\uff6d" +
    "\001\002\000\006\003\u0199\101\076\001\002\000\004\015" +
    "\uffc3\001\002\000\006\013\uff93\015\112\001\002\000\062" +
    "\003\uff78\004\uff78\005\uff78\006\uff78\007\uff78\013\uff78\021" +
    "\uff78\041\uff78\042\uff78\043\uff78\044\uff78\052\uff78\053\uff78" +
    "\054\uff78\055\uff78\056\uff78\057\uff78\074\uff78\075\uff78\076" +
    "\uff78\077\uff78\100\uff78\101\uff78\102\uff78\001\002\000\062" +
    "\003\273\004\053\005\051\006\064\007\063\013\ufee7\021" +
    "\172\041\225\042\213\043\221\044\244\052\222\053\270" +
    "\054\165\055\216\056\262\057\264\074\247\075\232\076" +
    "\201\077\203\100\166\101\074\102\211\001\002\000\004" +
    "\013\uff7a\001\002\000\004\013\u019f\001\002\000\054\003" +
    "\u013c\004\053\005\051\006\064\007\063\021\172\022\uff6a" +
    "\041\225\042\213\043\221\044\244\052\222\054\165\055" +
    "\216\074\247\075\232\076\201\077\203\100\166\101\074" +
    "\102\211\001\002\000\004\022\uff69\001\002\000\006\015" +
    "\u01a5\022\uff68\001\002\000\004\022\u01a3\001\002\000\066" +
    "\003\u013c\004\053\005\051\006\064\007\063\013\204\016" +
    "\040\021\172\041\225\042\213\043\221\044\244\045\u017d" +
    "\047\u0180\050\u017c\051\217\052\222\054\165\055\216\074" +
    "\247\075\232\076\201\077\203\100\166\101\074\102\211" +
    "\001\002\000\004\046\uff6f\001\002\000\052\003\u013c\004" +
    "\053\005\051\006\064\007\063\021\172\041\225\042\213" +
    "\043\221\044\244\052\222\054\165\055\216\074\247\075" +
    "\232\076\201\077\203\100\166\101\074\102\211\001\002" +
    "\000\010\013\uff66\015\uff66\022\uff66\001\002\000\006\003" +
    "\u0199\101\076\001\002\000\006\013\uff92\015\112\001\002" +
    "\000\066\003\u013c\004\053\005\051\006\064\007\063\013" +
    "\204\016\040\021\172\041\225\042\213\043\221\044\244" +
    "\045\212\047\235\050\177\051\217\052\222\054\165\055" +
    "\216\074\247\075\232\076\201\077\203\100\166\101\074" +
    "\102\211\001\002\000\070\003\uff72\004\uff72\005\uff72\006" +
    "\uff72\007\uff72\013\uff72\016\uff72\017\uff72\021\uff72\041\uff72" +
    "\042\uff72\043\uff72\044\uff72\045\uff72\047\uff72\050\uff72\051" +
    "\uff72\052\uff72\054\uff72\055\uff72\074\uff72\075\uff72\076\uff72" +
    "\077\uff72\100\uff72\101\uff72\102\uff72\001\002\000\004\022" +
    "\u01ac\001\002\000\066\003\u013c\004\053\005\051\006\064" +
    "\007\063\013\204\016\040\021\172\041\225\042\213\043" +
    "\221\044\244\045\u01af\047\u01b1\050\u01ae\051\217\052\222" +
    "\054\165\055\216\074\247\075\232\076\201\077\203\100" +
    "\166\101\074\102\211\001\002\000\004\046\uff79\001\002" +
    "\000\004\021\u01c1\001\002\000\006\003\u0172\021\u01b8\001" +
    "\002\000\070\003\uff77\004\uff77\005\uff77\006\uff77\007\uff77" +
    "\013\uff77\016\uff77\017\uff77\021\uff77\041\uff77\042\uff77\043" +
    "\uff77\044\uff77\045\uff77\047\uff77\050\uff77\051\uff77\052\uff77" +
    "\054\uff77\055\uff77\074\uff77\075\uff77\076\uff77\077\uff77\100" +
    "\uff77\101\uff77\102\uff77\001\002\000\006\003\u013e\021\u01b3" +
    "\001\002\000\072\003\uff91\004\uff91\005\uff91\006\uff91\007" +
    "\uff91\013\uff91\016\uff91\017\uff91\021\uff91\041\uff91\042\uff91" +
    "\043\uff91\044\uff91\045\uff91\046\uff8c\047\uff91\050\uff91\051" +
    "\uff91\052\uff91\054\uff91\055\uff91\074\uff91\075\uff91\076\uff91" +
    "\077\uff91\100\uff91\101\uff91\102\uff91\001\002\000\060\003" +
    "\uff78\004\uff78\005\uff78\006\uff78\007\uff78\021\uff78\041\uff78" +
    "\042\uff78\043\uff78\044\uff78\052\uff78\053\uff78\054\uff78\055" +
    "\uff78\056\uff78\057\uff78\074\uff78\075\uff78\076\uff78\077\uff78" +
    "\100\uff78\101\uff78\102\uff78\001\002\000\060\003\273\004" +
    "\053\005\051\006\064\007\063\021\172\041\225\042\213" +
    "\043\221\044\244\052\222\053\270\054\165\055\216\056" +
    "\262\057\264\074\247\075\232\076\201\077\203\100\166" +
    "\101\074\102\211\001\002\000\004\022\uff7a\001\002\000" +
    "\004\022\u01b7\001\002\000\066\003\u013c\004\053\005\051" +
    "\006\064\007\063\013\204\016\040\021\172\041\225\042" +
    "\213\043\221\044\244\045\u01af\047\u01b1\050\u01ae\051\217" +
    "\052\222\054\165\055\216\074\247\075\232\076\201\077" +
    "\203\100\166\101\074\102\211\001\002\000\060\003\uff7b" +
    "\004\uff7b\005\uff7b\006\uff7b\007\uff7b\021\uff7b\041\uff7b\042" +
    "\uff7b\043\uff7b\044\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b" +
    "\056\uff7b\057\uff7b\074\uff7b\075\uff7b\076\uff7b\077\uff7b\100" +
    "\uff7b\101\uff7b\102\uff7b\001\002\000\060\003\u0176\004\053" +
    "\005\051\006\064\007\063\021\172\041\225\042\213\043" +
    "\221\044\244\052\222\053\270\054\165\055\216\056\262" +
    "\057\264\074\247\075\232\076\201\077\203\100\166\101" +
    "\074\102\211\001\002\000\004\022\uff7a\001\002\000\004" +
    "\022\u01bc\001\002\000\066\003\u013c\004\053\005\051\006" +
    "\064\007\063\013\204\016\040\021\172\041\225\042\213" +
    "\043\221\044\244\045\u01af\047\u01b1\050\u01ae\051\217\052" +
    "\222\054\165\055\216\074\247\075\232\076\201\077\203" +
    "\100\166\101\074\102\211\001\002\000\004\046\uff79\001" +
    "\002\000\004\046\u01bf\001\002\000\066\003\u013c\004\053" +
    "\005\051\006\064\007\063\013\204\016\040\021\172\041" +
    "\225\042\213\043\221\044\244\045\u01af\047\u01b1\050\u01ae" +
    "\051\217\052\222\054\165\055\216\074\247\075\232\076" +
    "\201\077\203\100\166\101\074\102\211\001\002\000\070" +
    "\003\uff74\004\uff74\005\uff74\006\uff74\007\uff74\013\uff74\016" +
    "\uff74\017\uff74\021\uff74\041\uff74\042\uff74\043\uff74\044\uff74" +
    "\045\uff74\047\uff74\050\uff74\051\uff74\052\uff74\054\uff74\055" +
    "\uff74\074\uff74\075\uff74\076\uff74\077\uff74\100\uff74\101\uff74" +
    "\102\uff74\001\002\000\056\003\u013c\004\053\005\051\006" +
    "\064\007\063\013\uff6e\021\172\031\u0195\041\225\042\213" +
    "\043\221\044\244\052\222\054\165\055\216\074\247\075" +
    "\232\076\201\077\203\100\166\101\074\102\211\001\002" +
    "\000\004\013\u01c3\001\002\000\062\003\uff78\004\uff78\005" +
    "\uff78\006\uff78\007\uff78\013\uff78\021\uff78\041\uff78\042\uff78" +
    "\043\uff78\044\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056" +
    "\uff78\057\uff78\074\uff78\075\uff78\076\uff78\077\uff78\100\uff78" +
    "\101\uff78\102\uff78\001\002\000\062\003\273\004\053\005" +
    "\051\006\064\007\063\013\ufee7\021\172\041\225\042\213" +
    "\043\221\044\244\052\222\053\270\054\165\055\216\056" +
    "\262\057\264\074\247\075\232\076\201\077\203\100\166" +
    "\101\074\102\211\001\002\000\004\013\uff7a\001\002\000" +
    "\004\013\u01c7\001\002\000\054\003\u013c\004\053\005\051" +
    "\006\064\007\063\021\172\022\uff6a\041\225\042\213\043" +
    "\221\044\244\052\222\054\165\055\216\074\247\075\232" +
    "\076\201\077\203\100\166\101\074\102\211\001\002\000" +
    "\004\022\u01c9\001\002\000\066\003\u013c\004\053\005\051" +
    "\006\064\007\063\013\204\016\040\021\172\041\225\042" +
    "\213\043\221\044\244\045\u01af\047\u01b1\050\u01ae\051\217" +
    "\052\222\054\165\055\216\074\247\075\232\076\201\077" +
    "\203\100\166\101\074\102\211\001\002\000\070\003\uff70" +
    "\004\uff70\005\uff70\006\uff70\007\uff70\013\uff70\016\uff70\017" +
    "\uff70\021\uff70\041\uff70\042\uff70\043\uff70\044\uff70\045\uff70" +
    "\047\uff70\050\uff70\051\uff70\052\uff70\054\uff70\055\uff70\074" +
    "\uff70\075\uff70\076\uff70\077\uff70\100\uff70\101\uff70\102\uff70" +
    "\001\002\000\004\046\u01cc\001\002\000\066\003\u013c\004" +
    "\053\005\051\006\064\007\063\013\204\016\040\021\172" +
    "\041\225\042\213\043\221\044\244\045\212\047\235\050" +
    "\177\051\217\052\222\054\165\055\216\074\247\075\232" +
    "\076\201\077\203\100\166\101\074\102\211\001\002\000" +
    "\004\022\uff7a\001\002\000\004\022\u01cf\001\002\000\066" +
    "\003\u013c\004\053\005\051\006\064\007\063\013\204\016" +
    "\040\021\172\041\225\042\213\043\221\044\244\045\212" +
    "\047\235\050\177\051\217\052\222\054\165\055\216\074" +
    "\247\075\232\076\201\077\203\100\166\101\074\102\211" +
    "\001\002\000\070\003\uff75\004\uff75\005\uff75\006\uff75\007" +
    "\uff75\013\uff75\016\uff75\017\uff75\021\uff75\041\uff75\042\uff75" +
    "\043\uff75\044\uff75\045\uff75\047\uff75\050\uff75\051\uff75\052" +
    "\uff75\054\uff75\055\uff75\074\uff75\075\uff75\076\uff75\077\uff75" +
    "\100\uff75\101\uff75\102\uff75\001\002\000\004\101\u01d2\001" +
    "\002\000\064\010\uff37\011\uff37\012\uff37\013\uff37\014\uff37" +
    "\015\uff37\020\uff37\021\u01d3\022\uff37\023\uff37\053\uff37\054" +
    "\uff37\055\uff37\056\uff37\060\uff37\061\uff37\062\uff37\063\uff37" +
    "\064\uff37\065\uff37\066\uff37\067\uff37\070\uff37\071\uff37\072" +
    "\uff37\001\002\000\062\003\343\004\053\005\051\006\064" +
    "\007\063\021\172\022\uff48\041\225\042\213\043\221\044" +
    "\244\052\222\053\270\054\165\055\216\056\262\057\264" +
    "\074\247\075\232\076\201\077\203\100\166\101\074\102" +
    "\211\001\002\000\004\022\u01d5\001\002\000\060\010\uff34" +
    "\011\uff34\012\uff34\013\uff34\014\uff34\015\uff34\022\uff34\023" +
    "\uff34\053\uff34\054\uff34\055\uff34\056\uff34\060\uff34\061\uff34" +
    "\062\uff34\063\uff34\064\uff34\065\uff34\066\uff34\067\uff34\070" +
    "\uff34\071\uff34\072\uff34\001\002\000\056\003\u013c\004\053" +
    "\005\051\006\064\007\063\013\uff6e\021\172\031\u0195\041" +
    "\225\042\213\043\221\044\244\052\222\054\165\055\216" +
    "\074\247\075\232\076\201\077\203\100\166\101\074\102" +
    "\211\001\002\000\004\013\u01d8\001\002\000\062\003\uff78" +
    "\004\uff78\005\uff78\006\uff78\007\uff78\013\uff78\021\uff78\041" +
    "\uff78\042\uff78\043\uff78\044\uff78\052\uff78\053\uff78\054\uff78" +
    "\055\uff78\056\uff78\057\uff78\074\uff78\075\uff78\076\uff78\077" +
    "\uff78\100\uff78\101\uff78\102\uff78\001\002\000\062\003\273" +
    "\004\053\005\051\006\064\007\063\013\ufee7\021\172\041" +
    "\225\042\213\043\221\044\244\052\222\053\270\054\165" +
    "\055\216\056\262\057\264\074\247\075\232\076\201\077" +
    "\203\100\166\101\074\102\211\001\002\000\004\013\uff7a" +
    "\001\002\000\004\013\u01dc\001\002\000\054\003\u013c\004" +
    "\053\005\051\006\064\007\063\021\172\022\uff6a\041\225" +
    "\042\213\043\221\044\244\052\222\054\165\055\216\074" +
    "\247\075\232\076\201\077\203\100\166\101\074\102\211" +
    "\001\002\000\004\022\u01de\001\002\000\066\003\u013c\004" +
    "\053\005\051\006\064\007\063\013\204\016\040\021\172" +
    "\041\225\042\213\043\221\044\244\045\212\047\235\050" +
    "\177\051\217\052\222\054\165\055\216\074\247\075\232" +
    "\076\201\077\203\100\166\101\074\102\211\001\002\000" +
    "\060\003\u01e1\004\053\005\051\006\064\007\063\021\172" +
    "\041\225\042\213\043\221\044\244\052\222\053\270\054" +
    "\165\055\216\056\262\057\264\074\247\075\232\076\201" +
    "\077\203\100\166\101\074\102\211\001\002\000\004\022" +
    "\u01e4\001\002\000\040\012\uff4e\014\uff1c\020\ufeec\022\uff50" +
    "\060\uff1a\061\uff18\062\uff0e\063\uff0c\064\uff0a\065\uff08\066" +
    "\uff03\067\uff01\070\ufefc\071\ufef7\072\ufef1\001\002\000\004" +
    "\022\u01e3\001\002\000\060\010\uff4f\011\uff4f\012\uff4f\013" +
    "\uff4f\014\uff4f\015\uff4f\022\uff4f\023\uff4f\053\uff4f\054\uff4f" +
    "\055\uff4f\056\uff4f\060\uff4f\061\uff4f\062\uff4f\063\uff4f\064" +
    "\uff4f\065\uff4f\066\uff4f\067\uff4f\070\uff4f\071\uff4f\072\uff4f" +
    "\001\002\000\060\010\uff5a\011\uff5a\012\uff5a\013\uff5a\014" +
    "\uff5a\015\uff5a\022\uff5a\023\uff5a\053\uff5a\054\uff5a\055\uff5a" +
    "\056\uff5a\060\uff5a\061\uff5a\062\uff5a\063\uff5a\064\uff5a\065" +
    "\uff5a\066\uff5a\067\uff5a\070\uff5a\071\uff5a\072\uff5a\001\002" +
    "\000\060\003\uff61\004\uff61\005\uff61\006\uff61\007\uff61\021" +
    "\uff61\041\uff61\042\uff61\043\uff61\044\uff61\052\uff61\053\uff61" +
    "\054\uff61\055\uff61\056\uff61\057\uff61\074\uff61\075\uff61\076" +
    "\uff61\077\uff61\100\uff61\101\uff61\102\uff61\001\002\000\060" +
    "\003\273\004\053\005\051\006\064\007\063\021\172\041" +
    "\225\042\213\043\221\044\244\052\222\053\270\054\165" +
    "\055\216\056\262\057\264\074\247\075\232\076\201\077" +
    "\203\100\166\101\074\102\211\001\002\000\014\011\ufeed" +
    "\013\ufeed\015\ufeed\022\ufeed\023\ufeed\001\002\000\050\011" +
    "\uff22\013\uff22\014\uff22\015\uff22\022\uff22\023\uff22\053\uff22" +
    "\056\uff22\060\uff22\061\uff22\062\uff22\063\uff22\064\uff22\065" +
    "\uff22\066\uff22\067\uff22\070\uff22\071\uff22\072\uff22\001\002" +
    "\000\072\003\uff83\004\uff83\005\uff83\006\uff83\007\uff83\013" +
    "\uff83\016\uff83\017\uff83\021\uff83\041\uff83\042\uff83\043\uff83" +
    "\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052" +
    "\uff83\054\uff83\055\uff83\074\uff83\075\uff83\076\uff83\077\uff83" +
    "\100\uff83\101\uff83\102\uff83\001\002\000\070\003\u01ec\004" +
    "\053\005\051\006\064\007\063\013\204\016\040\017\uff9e" +
    "\021\172\041\225\042\213\043\221\044\244\045\212\047" +
    "\235\050\177\051\217\052\222\054\165\055\216\074\247" +
    "\075\232\076\201\077\203\100\166\101\074\102\211\001" +
    "\002\000\004\017\u01ef\001\002\000\074\003\uff9a\004\uff9a" +
    "\005\uff9a\006\uff9a\007\uff9a\012\uff4e\013\uff9a\016\uff9a\017" +
    "\uffa0\020\ufeec\021\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\054\uff9a\055" +
    "\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a" +
    "\102\uff9a\001\002\000\004\017\u01ee\001\002\000\116\003" +
    "\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f\013\uff9f\016\uff9f" +
    "\017\uff9f\021\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\041\uff9f" +
    "\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050" +
    "\uff9f\051\uff9f\052\uff9f\054\uff9f\055\uff9f\074\uff9f\075\uff9f" +
    "\076\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f\001\002\000" +
    "\116\003\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\013\uffa1" +
    "\016\uffa1\017\uffa1\021\uffa1\024\uffa1\025\uffa1\026\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1" +
    "\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\052\uffa1\054\uffa1\055\uffa1\074\uffa1" +
    "\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1\001" +
    "\002\000\070\003\uffad\004\uffad\005\uffad\006\uffad\007\uffad" +
    "\013\uffad\016\uffad\017\uffad\021\uffad\041\uffad\042\uffad\043" +
    "\uffad\044\uffad\045\uffad\047\uffad\050\uffad\051\uffad\052\uffad" +
    "\054\uffad\055\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100" +
    "\uffad\101\uffad\102\uffad\001\002\000\052\003\uffac\004\uffac" +
    "\005\uffac\006\uffac\007\uffac\013\uffac\016\uffac\017\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\035\uffac\041\uffac\101\uffac\001\002\000" +
    "\070\003\u01f8\004\053\005\051\006\064\007\063\013\204" +
    "\016\040\017\uff9e\021\172\041\225\042\u01f5\043\u01f7\044" +
    "\244\045\212\047\235\050\177\051\217\052\222\054\165" +
    "\055\216\074\247\075\232\076\201\077\203\100\166\101" +
    "\074\102\211\001\002\000\070\003\u020f\004\053\005\051" +
    "\006\064\007\063\013\204\016\040\017\uff9e\021\172\041" +
    "\225\042\213\043\221\044\244\045\212\047\235\050\177" +
    "\051\217\052\222\054\165\055\216\074\247\075\232\076" +
    "\201\077\203\100\166\101\074\102\211\001\002\000\010" +
    "\012\u0203\054\uff30\055\uff30\001\002\000\014\010\uff5b\012" +
    "\uff5b\021\u01ff\054\uff5b\055\uff5b\001\002\000\004\017\u01fe" +
    "\001\002\000\006\012\u0167\021\u01fa\001\002\000\074\003" +
    "\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a\012\uff4e\013\uff9a" +
    "\016\uff9a\017\u01f9\020\ufeec\021\uff9a\041\uff9a\042\uff9a\043" +
    "\uff9a\044\uff9a\045\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a" +
    "\054\uff9a\055\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100" +
    "\uff9a\101\uff9a\102\uff9a\001\002\000\052\003\uffa7\004\uffa7" +
    "\005\uffa7\006\uffa7\007\uffa7\013\uffa7\016\uffa7\017\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\041\uffa7\101\uffa7\001\002\000" +
    "\062\003\343\004\053\005\051\006\064\007\063\021\172" +
    "\022\uff48\041\225\042\213\043\221\044\244\052\222\053" +
    "\270\054\165\055\216\056\262\057\264\074\247\075\232" +
    "\076\201\077\203\100\166\101\074\102\211\001\002\000" +
    "\004\022\u01fc\001\002\000\004\013\u01fd\001\002\000\070" +
    "\003\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4\013\uffa4\016" +
    "\uffa4\017\uffa4\021\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\054\uffa4\055" +
    "\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101\uffa4" +
    "\102\uffa4\001\002\000\052\003\uffa8\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\013\uffa8\016\uffa8\017\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034" +
    "\uffa8\035\uffa8\041\uffa8\101\uffa8\001\002\000\062\003\343" +
    "\004\053\005\051\006\064\007\063\021\172\022\uff48\041" +
    "\225\042\213\043\221\044\244\052\222\053\270\054\165" +
    "\055\216\056\262\057\264\074\247\075\232\076\201\077" +
    "\203\100\166\101\074\102\211\001\002\000\004\022\u0201" +
    "\001\002\000\004\013\u0202\001\002\000\070\003\uffa5\004" +
    "\uffa5\005\uffa5\006\uffa5\007\uffa5\013\uffa5\016\uffa5\017\uffa5" +
    "\021\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\054\uffa5\055\uffa5\074\uffa5" +
    "\075\uffa5\076\uffa5\077\uffa5\100\uffa5\101\uffa5\102\uffa5\001" +
    "\002\000\010\042\u0205\043\u0204\101\u01d2\001\002\000\004" +
    "\021\u020a\001\002\000\004\021\u0206\001\002\000\062\003" +
    "\343\004\053\005\051\006\064\007\063\021\172\022\uff48" +
    "\041\225\042\213\043\221\044\244\052\222\053\270\054" +
    "\165\055\216\056\262\057\264\074\247\075\232\076\201" +
    "\077\203\100\166\101\074\102\211\001\002\000\004\022" +
    "\u0208\001\002\000\004\013\u0209\001\002\000\070\003\uffa3" +
    "\004\uffa3\005\uffa3\006\uffa3\007\uffa3\013\uffa3\016\uffa3\017" +
    "\uffa3\021\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\047\uffa3\050\uffa3\051\uffa3\052\uffa3\054\uffa3\055\uffa3\074" +
    "\uffa3\075\uffa3\076\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3" +
    "\001\002\000\062\003\343\004\053\005\051\006\064\007" +
    "\063\021\172\022\uff48\041\225\042\213\043\221\044\244" +
    "\052\222\053\270\054\165\055\216\056\262\057\264\074" +
    "\247\075\232\076\201\077\203\100\166\101\074\102\211" +
    "\001\002\000\004\022\u020c\001\002\000\004\013\u020d\001" +
    "\002\000\070\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2" +
    "\013\uffa2\016\uffa2\017\uffa2\021\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2" +
    "\054\uffa2\055\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\100" +
    "\uffa2\101\uffa2\102\uffa2\001\002\000\004\017\u0210\001\002" +
    "\000\072\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a\012" +
    "\uff4e\013\uff9a\016\uff9a\020\ufeec\021\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\047\uff9a\050\uff9a\051\uff9a\052" +
    "\uff9a\054\uff9a\055\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a" +
    "\100\uff9a\101\uff9a\102\uff9a\001\002\000\052\003\uffa9\004" +
    "\uffa9\005\uffa9\006\uffa9\007\uffa9\013\uffa9\016\uffa9\017\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\041\uffa9\101\uffa9\001\002" +
    "\000\004\016\uffd9\001\002\000\004\016\031\001\002\000" +
    "\032\002\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8\001" +
    "\002\000\030\024\011\025\007\026\014\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\037\uffeb\001" +
    "\002\000\032\002\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\037" +
    "\uffdc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0214\000\006\002\003\014\005\001\001\000\002\001" +
    "\001\000\004\152\u0213\001\001\000\010\015\011\020\007" +
    "\022\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\153\027\001\001\000\002\001\001\000\004" +
    "\016\031\001\001\000\032\020\045\022\012\024\044\025" +
    "\041\026\042\027\047\030\046\033\034\035\040\042\032" +
    "\043\035\046\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\u01f0" +
    "\001\001\000\002\001\001\000\004\047\u01e9\001\001\000" +
    "\004\041\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\162\151\001\001\000\026\020\045\022\012\026" +
    "\150\027\047\030\046\033\034\035\040\042\032\043\035" +
    "\046\036\001\001\000\016\004\056\005\054\006\055\007" +
    "\057\010\061\011\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\111\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\111\134\001\001" +
    "\000\002\001\001\000\006\031\110\032\105\001\001\000" +
    "\002\001\001\000\004\164\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\072\005\054\006\055\007\057\010\061\011\051" +
    "\036\066\037\067\040\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\163\100\001\001" +
    "\000\004\032\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\072\005\054\006\055\007\057\010\061\011" +
    "\051\040\101\001\001\000\002\001\001\000\020\004\072" +
    "\005\054\006\055\007\057\010\061\011\051\040\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\155\121\156\123\157\122\001\001\000\004\160" +
    "\115\001\001\000\002\001\001\000\004\012\113\001\001" +
    "\000\002\001\001\000\004\032\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\072\005\054\006\055" +
    "\007\057\010\061\011\051\036\117\037\067\040\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\124\022\012\033\125\035" +
    "\040\001\001\000\016\004\126\005\054\006\055\007\057" +
    "\010\061\011\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\160\115\001\001\000\004\032\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\161\141\001\001\000\002\001\001\000" +
    "\024\004\072\005\054\006\055\007\057\010\061\011\051" +
    "\036\143\037\067\040\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\072\005\054\006\055\007\057\010\061\011\051\036\153" +
    "\037\067\040\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\161" +
    "\001\001\000\002\001\001\000\112\003\173\004\247\005" +
    "\226\006\055\007\057\010\205\011\201\046\175\050\213" +
    "\051\242\052\235\053\236\055\214\057\237\060\204\061" +
    "\241\062\162\063\167\064\244\066\232\070\223\071\177" +
    "\100\207\101\230\102\227\105\174\125\163\126\233\127" +
    "\245\130\225\142\206\143\166\146\240\147\172\150\170" +
    "\151\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\173\005\275\006\055\010\265\011\313\100\207" +
    "\101\230\102\277\105\174\125\311\126\301\127\315\130" +
    "\274\131\u01e7\146\303\147\260\150\257\151\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u01de\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\111\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\173" +
    "\005\275\006\055\010\265\011\313\100\207\101\230\102" +
    "\277\105\174\125\311\126\301\127\315\130\274\131\u016f" +
    "\146\303\147\260\150\257\151\271\001\001\000\004\124" +
    "\u016b\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\u0151\006\055\011\u0150\001\001\000\010\166\u014e\174" +
    "\317\214\347\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\111\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\106\003\173\004\247\005\226\006\055\007" +
    "\057\010\205\011\201\046\175\052\u013c\053\236\055\214" +
    "\057\237\060\204\061\241\062\162\063\167\064\244\066" +
    "\232\070\223\071\177\100\207\101\230\102\227\105\174" +
    "\125\163\126\233\127\245\130\225\142\206\143\166\146" +
    "\240\147\172\150\170\151\217\001\001\000\004\011\u013a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\251\032\105\001\001\000\006\157\122" +
    "\167\u0138\001\001\000\004\013\253\001\001\000\072\003" +
    "\173\005\275\006\055\010\265\011\262\100\207\101\230" +
    "\102\277\105\174\125\163\126\301\127\245\130\274\131" +
    "\270\132\302\133\255\134\304\135\264\136\256\137\276" +
    "\140\273\141\300\142\266\143\166\146\303\147\260\150" +
    "\257\151\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\173\005\275\006\055\010\265" +
    "\011\313\100\207\101\230\102\277\105\174\125\311\126" +
    "\301\127\315\130\274\131\u0137\146\303\147\260\150\257" +
    "\151\271\001\001\000\004\111\145\001\001\000\004\120" +
    "\u0135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\173\005\275\006\055\010\265\011" +
    "\313\100\207\101\230\102\277\105\174\125\311\126\301" +
    "\127\315\130\274\131\u0132\146\303\147\260\150\257\151" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\174\317\200\316\201\321\202\320\203\360\204\357\205" +
    "\356\206\355\207\353\210\354\211\352\212\351\213\350" +
    "\214\347\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\111\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\173\005\275" +
    "\006\055\010\265\011\313\100\207\101\230\102\277\105" +
    "\174\125\311\126\301\127\315\130\274\131\270\132\302" +
    "\133\u0126\146\303\147\260\150\257\151\271\001\001\000" +
    "\052\003\173\005\275\006\055\010\265\011\313\100\207" +
    "\101\230\102\277\105\174\125\311\126\301\127\315\130" +
    "\274\131\270\132\302\133\u0125\146\303\147\260\150\257" +
    "\151\271\001\001\000\052\003\173\005\275\006\055\010" +
    "\265\011\313\100\207\101\230\102\277\105\174\125\311" +
    "\126\301\127\315\130\274\131\270\132\302\133\u0124\146" +
    "\303\147\260\150\257\151\271\001\001\000\052\003\173" +
    "\005\275\006\055\010\265\011\313\100\207\101\230\102" +
    "\277\105\174\125\311\126\301\127\315\130\274\131\270" +
    "\132\302\133\312\146\303\147\260\150\257\151\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\111\145" +
    "\001\001\000\012\174\317\200\316\201\321\202\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\173\005" +
    "\275\006\055\010\265\011\313\100\207\101\230\102\277" +
    "\105\174\125\311\126\301\127\315\130\274\131\323\146" +
    "\303\147\260\150\257\151\271\001\001\000\002\001\001" +
    "\000\004\174\317\001\001\000\046\003\173\005\275\006" +
    "\055\010\265\011\313\100\207\101\230\102\277\105\174" +
    "\125\311\126\301\127\315\130\274\131\326\146\303\147" +
    "\260\150\257\151\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\173\005\275\006" +
    "\055\010\265\011\313\100\207\101\230\102\277\105\174" +
    "\125\311\126\301\127\315\130\274\131\332\146\303\147" +
    "\260\150\257\151\271\001\001\000\002\001\001\000\074" +
    "\003\173\005\275\006\055\010\265\011\262\100\207\101" +
    "\230\102\277\105\174\125\163\126\301\127\245\130\274" +
    "\131\270\132\302\133\255\134\304\135\264\136\256\137" +
    "\276\140\273\141\344\142\266\143\166\145\u0122\146\303" +
    "\147\260\150\257\151\271\001\001\000\100\003\173\005" +
    "\275\006\055\010\265\011\262\100\207\101\230\102\277" +
    "\103\340\104\343\105\174\125\163\126\301\127\245\130" +
    "\274\131\270\132\302\133\255\134\304\135\264\136\256" +
    "\137\276\140\273\141\344\142\266\143\166\145\341\146" +
    "\303\147\260\150\257\151\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\174\317\176\361\200\316\201\321" +
    "\202\320\203\360\204\357\205\356\206\355\207\353\210" +
    "\354\211\352\212\351\213\350\214\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\003\173\005\275\006" +
    "\055\010\265\011\262\100\207\101\230\102\277\105\174" +
    "\125\163\126\301\127\245\130\274\131\270\132\302\133" +
    "\255\134\304\135\264\136\256\137\276\140\273\141\344" +
    "\142\266\143\166\145\346\146\303\147\260\150\257\151" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\074\003\173\005" +
    "\275\006\055\010\265\011\262\100\207\101\230\102\277" +
    "\105\174\125\163\126\301\127\245\130\274\131\270\132" +
    "\302\133\255\134\304\135\264\136\256\137\276\140\273" +
    "\141\344\142\266\143\166\145\362\146\303\147\260\150" +
    "\257\151\271\001\001\000\002\001\001\000\052\003\173" +
    "\005\275\006\055\010\265\011\313\100\207\101\230\102" +
    "\277\105\174\125\311\126\301\127\315\130\274\131\270" +
    "\132\302\133\364\146\303\147\260\150\257\151\271\001" +
    "\001\000\002\001\001\000\050\003\173\005\275\006\055" +
    "\010\265\011\313\100\207\101\230\102\277\105\174\125" +
    "\311\126\301\127\315\130\274\131\270\132\376\146\303" +
    "\147\260\150\257\151\271\001\001\000\050\003\173\005" +
    "\275\006\055\010\265\011\313\100\207\101\230\102\277" +
    "\105\174\125\311\126\301\127\315\130\274\131\270\132" +
    "\367\146\303\147\260\150\257\151\271\001\001\000\002" +
    "\001\001\000\046\003\173\005\275\006\055\010\265\011" +
    "\313\100\207\101\230\102\277\105\174\125\311\126\301" +
    "\127\315\130\274\131\375\146\303\147\260\150\257\151" +
    "\271\001\001\000\046\003\173\005\275\006\055\010\265" +
    "\011\313\100\207\101\230\102\277\105\174\125\311\126" +
    "\301\127\315\130\274\131\374\146\303\147\260\150\257" +
    "\151\271\001\001\000\046\003\173\005\275\006\055\010" +
    "\265\011\313\100\207\101\230\102\277\105\174\125\311" +
    "\126\301\127\315\130\274\131\373\146\303\147\260\150" +
    "\257\151\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\173\005" +
    "\275\006\055\010\265\011\313\100\207\101\230\102\277" +
    "\105\174\125\311\126\301\127\315\130\274\131\270\132" +
    "\302\133\u0100\146\303\147\260\150\257\151\271\001\001" +
    "\000\002\001\001\000\052\003\173\005\275\006\055\010" +
    "\265\011\313\100\207\101\230\102\277\105\174\125\311" +
    "\126\301\127\315\130\274\131\270\132\302\133\u0102\146" +
    "\303\147\260\150\257\151\271\001\001\000\002\001\001" +
    "\000\052\003\173\005\275\006\055\010\265\011\313\100" +
    "\207\101\230\102\277\105\174\125\311\126\301\127\315" +
    "\130\274\131\270\132\302\133\u0104\146\303\147\260\150" +
    "\257\151\271\001\001\000\002\001\001\000\054\003\173" +
    "\005\275\006\055\010\265\011\313\100\207\101\230\102" +
    "\277\105\174\125\311\126\301\127\315\130\274\131\270" +
    "\132\302\133\255\134\u0107\146\303\147\260\150\257\151" +
    "\271\001\001\000\022\174\317\200\316\201\321\202\320" +
    "\203\360\204\357\205\356\206\355\001\001\000\002\001" +
    "\001\000\054\003\173\005\275\006\055\010\265\011\313" +
    "\100\207\101\230\102\277\105\174\125\311\126\301\127" +
    "\315\130\274\131\270\132\302\133\255\134\u0109\146\303" +
    "\147\260\150\257\151\271\001\001\000\002\001\001\000" +
    "\056\003\173\005\275\006\055\010\265\011\313\100\207" +
    "\101\230\102\277\105\174\125\311\126\301\127\315\130" +
    "\274\131\270\132\302\133\255\134\304\135\u010b\146\303" +
    "\147\260\150\257\151\271\001\001\000\002\001\001\000" +
    "\026\174\317\200\316\201\321\202\320\203\360\204\357" +
    "\205\356\206\355\207\353\210\354\001\001\000\054\003" +
    "\173\005\275\006\055\010\265\011\313\100\207\101\230" +
    "\102\277\105\174\125\311\126\301\127\315\130\274\131" +
    "\270\132\302\133\255\134\u0110\146\303\147\260\150\257" +
    "\151\271\001\001\000\054\003\173\005\275\006\055\010" +
    "\265\011\313\100\207\101\230\102\277\105\174\125\311" +
    "\126\301\127\315\130\274\131\270\132\302\133\255\134" +
    "\u010f\146\303\147\260\150\257\151\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\003\173\005\275\006" +
    "\055\010\265\011\313\100\207\101\230\102\277\105\174" +
    "\125\311\126\301\127\315\130\274\131\270\132\302\133" +
    "\255\134\304\135\264\136\u0112\146\303\147\260\150\257" +
    "\151\271\001\001\000\002\001\001\000\030\174\317\200" +
    "\316\201\321\202\320\203\360\204\357\205\356\206\355" +
    "\207\353\210\354\211\352\001\001\000\004\116\u0115\001" +
    "\001\000\056\003\173\005\275\006\055\010\265\011\313" +
    "\100\207\101\230\102\277\105\174\125\311\126\301\127" +
    "\315\130\274\131\270\132\302\133\255\134\304\135\u0116" +
    "\146\303\147\260\150\257\151\271\001\001\000\002\001" +
    "\001\000\074\003\173\005\275\006\055\010\265\011\262" +
    "\100\207\101\230\102\277\105\174\125\163\126\301\127" +
    "\245\130\274\131\270\132\302\133\255\134\304\135\264" +
    "\136\256\137\276\140\273\141\344\142\266\143\166\145" +
    "\u0118\146\303\147\260\150\257\151\271\001\001\000\002" +
    "\001\001\000\062\003\173\005\275\006\055\010\265\011" +
    "\313\100\207\101\230\102\277\105\174\125\311\126\301" +
    "\127\315\130\274\131\270\132\302\133\255\134\304\135" +
    "\264\136\256\137\u011b\146\303\147\260\150\257\151\271" +
    "\001\001\000\032\174\317\200\316\201\321\202\320\203" +
    "\360\204\357\205\356\206\355\207\353\210\354\211\352" +
    "\212\351\001\001\000\002\001\001\000\004\117\u011d\001" +
    "\001\000\060\003\173\005\275\006\055\010\265\011\313" +
    "\100\207\101\230\102\277\105\174\125\311\126\301\127" +
    "\315\130\274\131\270\132\302\133\255\134\304\135\264" +
    "\136\u011e\146\303\147\260\150\257\151\271\001\001\000" +
    "\002\001\001\000\072\003\173\005\275\006\055\010\265" +
    "\011\262\100\207\101\230\102\277\105\174\125\163\126" +
    "\301\127\245\130\274\131\270\132\302\133\255\134\304" +
    "\135\264\136\256\137\276\140\273\141\u0120\142\266\143" +
    "\166\146\303\147\260\150\257\151\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\122\u0128\001\001\000\074\003\173\005\275\006" +
    "\055\010\265\011\262\100\207\101\230\102\277\105\174" +
    "\125\163\126\301\127\245\130\274\131\270\132\302\133" +
    "\255\134\304\135\264\136\256\137\276\140\273\141\344" +
    "\142\266\143\166\145\u0129\146\303\147\260\150\257\151" +
    "\271\001\001\000\002\001\001\000\004\123\u012b\001\001" +
    "\000\064\003\173\005\275\006\055\010\265\011\313\100" +
    "\207\101\230\102\277\105\174\125\311\126\301\127\315" +
    "\130\274\131\270\132\302\133\255\134\304\135\264\136" +
    "\256\137\276\140\u012d\146\303\147\260\150\257\151\271" +
    "\001\001\000\034\174\317\200\316\201\321\202\320\203" +
    "\360\204\357\205\356\206\355\207\353\210\354\211\352" +
    "\212\351\213\350\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\173\005\275\006\055\010\265\011\313\100\207" +
    "\101\230\102\277\105\174\125\311\126\301\127\315\130" +
    "\274\131\u0136\146\303\147\260\150\257\151\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\174\317\214\347" +
    "\001\001\000\002\001\001\000\004\172\u0144\001\001\000" +
    "\004\115\u013f\001\001\000\074\003\173\005\275\006\055" +
    "\010\265\011\262\100\207\101\230\102\277\105\174\125" +
    "\163\126\301\127\245\130\274\131\270\132\302\133\255" +
    "\134\304\135\264\136\256\137\276\140\273\141\344\142" +
    "\266\143\166\145\u0140\146\303\147\260\150\257\151\271" +
    "\001\001\000\004\113\u0141\001\001\000\002\001\001\000" +
    "\076\003\173\005\275\006\055\010\265\011\262\046\175" +
    "\055\u0143\057\237\060\204\061\241\062\162\063\167\064" +
    "\244\066\232\070\223\071\177\100\207\101\230\102\227" +
    "\105\174\125\163\126\233\127\245\130\225\142\206\143" +
    "\166\146\240\147\172\150\170\151\217\001\001\000\002" +
    "\001\001\000\004\113\u0145\001\001\000\002\001\001\000" +
    "\076\003\173\005\275\006\055\010\265\011\262\046\175" +
    "\055\u0147\057\237\060\204\061\241\062\162\063\167\064" +
    "\244\066\232\070\223\071\177\100\207\101\230\102\227" +
    "\105\174\125\163\126\233\127\245\130\225\142\206\143" +
    "\166\146\240\147\172\150\170\151\217\001\001\000\002" +
    "\001\001\000\074\003\173\005\275\006\055\010\265\011" +
    "\262\100\207\101\230\102\277\105\174\125\163\126\301" +
    "\127\245\130\274\131\270\132\302\133\255\134\304\135" +
    "\264\136\256\137\276\140\273\141\344\142\266\143\166" +
    "\145\u0149\146\303\147\260\150\257\151\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\106\003\173\004\247\005" +
    "\226\006\055\007\057\010\205\011\201\046\175\052\u014f" +
    "\053\236\055\214\057\237\060\204\061\241\062\162\063" +
    "\167\064\244\066\232\070\223\071\177\100\207\101\230" +
    "\102\227\105\174\125\163\126\233\127\245\130\225\142" +
    "\206\143\166\146\240\147\172\150\170\151\217\001\001" +
    "\000\002\001\001\000\010\106\u015f\107\u0153\175\u015e\001" +
    "\001\000\006\106\u0154\107\u0153\001\001\000\004\177\u015c" +
    "\001\001\000\002\001\001\000\010\107\u0159\110\u0158\111" +
    "\u015b\001\001\000\074\003\173\005\275\006\055\010\265" +
    "\011\262\100\207\101\230\102\277\105\174\125\163\126" +
    "\301\127\245\130\274\131\270\132\302\133\255\134\304" +
    "\135\264\136\256\137\276\140\273\141\344\142\266\143" +
    "\166\145\u0156\146\303\147\260\150\257\151\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\074\003\173\005\275\006\055\010\265" +
    "\011\262\100\207\101\230\102\277\105\174\125\163\126" +
    "\301\127\245\130\274\131\270\132\302\133\255\134\304" +
    "\135\264\136\256\137\276\140\273\141\344\142\266\143" +
    "\166\145\u0156\146\303\147\260\150\257\151\271\001\001" +
    "\000\002\001\001\000\004\107\u015d\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\107\u0159\110\u0160\111\u015b" +
    "\001\001\000\002\001\001\000\100\003\173\005\275\006" +
    "\055\010\265\011\262\100\207\101\230\102\277\103\u0162" +
    "\104\343\105\174\125\163\126\301\127\245\130\274\131" +
    "\270\132\302\133\255\134\304\135\264\136\256\137\276" +
    "\140\273\141\344\142\266\143\166\145\341\146\303\147" +
    "\260\150\257\151\271\001\001\000\002\001\001\000\006" +
    "\016\u0165\017\u0164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\100\003\173" +
    "\005\275\006\055\010\265\011\262\100\207\101\230\102" +
    "\277\103\u0169\104\343\105\174\125\163\126\301\127\245" +
    "\130\274\131\270\132\302\133\255\134\304\135\264\136" +
    "\256\137\276\140\273\141\344\142\266\143\166\145\341" +
    "\146\303\147\260\150\257\151\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\003\173\005\275\006\055" +
    "\010\265\011\262\100\207\101\230\102\277\105\174\125" +
    "\163\126\301\127\245\130\274\131\270\132\302\133\255" +
    "\134\304\135\264\136\256\137\276\140\273\141\344\142" +
    "\266\143\166\144\u016d\145\u016c\146\303\147\260\150\257" +
    "\151\271\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\170\u01cc\001\001\000\004\112\u0173\001\001\000\074\003" +
    "\173\005\275\006\055\010\265\011\262\100\207\101\230" +
    "\102\277\105\174\125\163\126\301\127\245\130\274\131" +
    "\270\132\302\133\255\134\304\135\264\136\256\137\276" +
    "\140\273\141\344\142\266\143\166\145\u0174\146\303\147" +
    "\260\150\257\151\271\001\001\000\004\113\u01aa\001\001" +
    "\000\040\171\u0176\174\317\200\316\201\321\202\320\203" +
    "\360\204\357\205\356\206\355\207\353\210\354\211\352" +
    "\212\351\213\350\214\347\001\001\000\004\113\u0177\001" +
    "\001\000\002\001\001\000\074\003\173\005\275\006\055" +
    "\010\265\011\262\046\175\056\u017a\057\u0180\060\204\061" +
    "\241\062\162\065\u0179\067\u017e\070\223\072\u017d\100\207" +
    "\101\230\102\227\105\174\125\163\126\233\127\245\130" +
    "\225\142\206\143\166\146\240\147\172\150\170\151\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\115\u0182\001" +
    "\001\000\074\003\173\005\275\006\055\010\265\011\262" +
    "\100\207\101\230\102\277\105\174\125\163\126\301\127" +
    "\245\130\274\131\270\132\302\133\255\134\304\135\264" +
    "\136\256\137\276\140\273\141\344\142\266\143\166\145" +
    "\u0183\146\303\147\260\150\257\151\271\001\001\000\004" +
    "\113\u0184\001\001\000\002\001\001\000\074\003\173\005" +
    "\275\006\055\010\265\011\262\046\175\056\u0186\057\u0180" +
    "\060\204\061\241\062\162\065\u0179\067\u017e\070\223\072" +
    "\u017d\100\207\101\230\102\227\105\174\125\163\126\233" +
    "\127\245\130\225\142\206\143\166\146\240\147\172\150" +
    "\170\151\217\001\001\000\002\001\001\000\004\112\u0188" +
    "\001\001\000\074\003\173\005\275\006\055\010\265\011" +
    "\262\100\207\101\230\102\277\105\174\125\163\126\301" +
    "\127\245\130\274\131\270\132\302\133\255\134\304\135" +
    "\264\136\256\137\276\140\273\141\344\142\266\143\166" +
    "\145\u0189\146\303\147\260\150\257\151\271\001\001\000" +
    "\004\113\u018a\001\001\000\002\001\001\000\074\003\173" +
    "\005\275\006\055\010\265\011\262\046\175\056\u018c\057" +
    "\u0180\060\204\061\241\062\162\065\u0179\067\u017e\070\223" +
    "\072\u017d\100\207\101\230\102\227\105\174\125\163\126" +
    "\233\127\245\130\225\142\206\143\166\146\240\147\172" +
    "\150\170\151\217\001\001\000\004\114\u018d\001\001\000" +
    "\002\001\001\000\074\003\173\005\275\006\055\010\265" +
    "\011\262\046\175\056\u018f\057\u0180\060\204\061\241\062" +
    "\162\065\u0179\067\u017e\070\223\072\u017d\100\207\101\230" +
    "\102\227\105\174\125\163\126\233\127\245\130\225\142" +
    "\206\143\166\146\240\147\172\150\170\151\217\001\001" +
    "\000\002\001\001\000\066\003\173\004\u0197\005\226\006" +
    "\055\007\057\010\205\011\201\054\u0192\062\u0191\073\u0195" +
    "\074\u0196\077\u0193\100\207\101\230\102\227\105\174\125" +
    "\163\126\233\127\245\130\225\142\206\143\166\146\240" +
    "\147\172\150\170\151\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\u01a6\005\054" +
    "\006\055\007\057\010\061\011\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\u0199\032\105\001\001" +
    "\000\004\157\122\001\001\000\002\001\001\000\004\115" +
    "\u019b\001\001\000\076\003\173\005\275\006\055\010\265" +
    "\011\262\100\207\101\230\102\277\105\174\125\163\126" +
    "\301\127\245\130\274\131\270\132\302\133\255\134\304" +
    "\135\264\136\256\137\276\140\273\141\344\142\266\143" +
    "\166\144\u019c\145\u016c\146\303\147\260\150\257\151\271" +
    "\001\001\000\004\113\u019d\001\001\000\002\001\001\000" +
    "\060\003\173\005\275\006\055\010\265\011\262\062\u0191" +
    "\075\u01a1\076\u019f\077\u01a0\100\207\101\230\102\227\105" +
    "\174\125\163\126\233\127\245\130\225\142\206\143\166" +
    "\146\240\147\172\150\170\151\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\074\003\173" +
    "\005\275\006\055\010\265\011\262\046\175\056\u01a3\057" +
    "\u0180\060\204\061\241\062\162\065\u0179\067\u017e\070\223" +
    "\072\u017d\100\207\101\230\102\227\105\174\125\163\126" +
    "\233\127\245\130\225\142\206\143\166\146\240\147\172" +
    "\150\170\151\217\001\001\000\002\001\001\000\052\003" +
    "\173\005\275\006\055\010\265\011\262\062\u01a5\100\207" +
    "\101\230\102\227\105\174\125\163\126\233\127\245\130" +
    "\225\142\206\143\166\146\240\147\172\150\170\151\217" +
    "\001\001\000\002\001\001\000\006\031\u01a7\032\105\001" +
    "\001\000\002\001\001\000\076\003\173\005\275\006\055" +
    "\010\265\011\262\046\175\055\u01a9\057\237\060\204\061" +
    "\241\062\162\063\167\064\244\066\232\070\223\071\177" +
    "\100\207\101\230\102\227\105\174\125\163\126\233\127" +
    "\245\130\225\142\206\143\166\146\240\147\172\150\170" +
    "\151\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\106\003\173\005\275\006\055\010\265\011\262\046\175" +
    "\055\u01af\056\u01ac\057\u01b1\060\204\061\241\062\162\063" +
    "\167\064\244\065\u0179\066\232\067\u017e\070\223\071\177" +
    "\072\u017d\100\207\101\230\102\227\105\174\125\163\126" +
    "\233\127\245\130\225\142\206\143\166\146\240\147\172" +
    "\150\170\151\217\001\001\000\004\114\u01ca\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\115\u01b3\001\001\000" +
    "\074\003\173\005\275\006\055\010\265\011\262\100\207" +
    "\101\230\102\277\105\174\125\163\126\301\127\245\130" +
    "\274\131\270\132\302\133\255\134\304\135\264\136\256" +
    "\137\276\140\273\141\344\142\266\143\166\145\u01b4\146" +
    "\303\147\260\150\257\151\271\001\001\000\004\113\u01b5" +
    "\001\001\000\002\001\001\000\106\003\173\005\275\006" +
    "\055\010\265\011\262\046\175\055\u0143\056\u0186\057\u01b1" +
    "\060\204\061\241\062\162\063\167\064\244\065\u0179\066" +
    "\232\067\u017e\070\223\071\177\072\u017d\100\207\101\230" +
    "\102\227\105\174\125\163\126\233\127\245\130\225\142" +
    "\206\143\166\146\240\147\172\150\170\151\217\001\001" +
    "\000\004\112\u01b8\001\001\000\074\003\173\005\275\006" +
    "\055\010\265\011\262\100\207\101\230\102\277\105\174" +
    "\125\163\126\301\127\245\130\274\131\270\132\302\133" +
    "\255\134\304\135\264\136\256\137\276\140\273\141\344" +
    "\142\266\143\166\145\u01b9\146\303\147\260\150\257\151" +
    "\271\001\001\000\004\113\u01ba\001\001\000\002\001\001" +
    "\000\106\003\173\005\275\006\055\010\265\011\262\046" +
    "\175\055\u01af\056\u01bc\057\u01b1\060\204\061\241\062\162" +
    "\063\167\064\244\065\u0179\066\232\067\u017e\070\223\071" +
    "\177\072\u017d\100\207\101\230\102\227\105\174\125\163" +
    "\126\233\127\245\130\225\142\206\143\166\146\240\147" +
    "\172\150\170\151\217\001\001\000\004\114\u01bd\001\001" +
    "\000\002\001\001\000\106\003\173\005\275\006\055\010" +
    "\265\011\262\046\175\055\u01bf\056\u018f\057\u01b1\060\204" +
    "\061\241\062\162\063\167\064\244\065\u0179\066\232\067" +
    "\u017e\070\223\071\177\072\u017d\100\207\101\230\102\227" +
    "\105\174\125\163\126\233\127\245\130\225\142\206\143" +
    "\166\146\240\147\172\150\170\151\217\001\001\000\002" +
    "\001\001\000\066\003\173\004\u0197\005\226\006\055\007" +
    "\057\010\205\011\201\054\u0192\062\u0191\073\u01c1\074\u0196" +
    "\077\u0193\100\207\101\230\102\227\105\174\125\163\126" +
    "\233\127\245\130\225\142\206\143\166\146\240\147\172" +
    "\150\170\151\217\001\001\000\002\001\001\000\004\115" +
    "\u01c3\001\001\000\076\003\173\005\275\006\055\010\265" +
    "\011\262\100\207\101\230\102\277\105\174\125\163\126" +
    "\301\127\245\130\274\131\270\132\302\133\255\134\304" +
    "\135\264\136\256\137\276\140\273\141\344\142\266\143" +
    "\166\144\u01c4\145\u016c\146\303\147\260\150\257\151\271" +
    "\001\001\000\004\113\u01c5\001\001\000\002\001\001\000" +
    "\060\003\173\005\275\006\055\010\265\011\262\062\u0191" +
    "\075\u01c7\076\u019f\077\u01a0\100\207\101\230\102\227\105" +
    "\174\125\163\126\233\127\245\130\225\142\206\143\166" +
    "\146\240\147\172\150\170\151\217\001\001\000\002\001" +
    "\001\000\106\003\173\005\275\006\055\010\265\011\262" +
    "\046\175\055\u01c9\056\u01a3\057\u01b1\060\204\061\241\062" +
    "\162\063\167\064\244\065\u0179\066\232\067\u017e\070\223" +
    "\071\177\072\u017d\100\207\101\230\102\227\105\174\125" +
    "\163\126\233\127\245\130\225\142\206\143\166\146\240" +
    "\147\172\150\170\151\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\003\173\005\275\006\055\010\265" +
    "\011\262\046\175\055\u01bf\057\237\060\204\061\241\062" +
    "\162\063\167\064\244\066\232\070\223\071\177\100\207" +
    "\101\230\102\227\105\174\125\163\126\233\127\245\130" +
    "\225\142\206\143\166\146\240\147\172\150\170\151\217" +
    "\001\001\000\004\113\u01cd\001\001\000\002\001\001\000" +
    "\076\003\173\005\275\006\055\010\265\011\262\046\175" +
    "\055\u01cf\057\237\060\204\061\241\062\162\063\167\064" +
    "\244\066\232\070\223\071\177\100\207\101\230\102\227" +
    "\105\174\125\163\126\233\127\245\130\225\142\206\143" +
    "\166\146\240\147\172\150\170\151\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\100\003" +
    "\173\005\275\006\055\010\265\011\262\100\207\101\230" +
    "\102\277\103\u01d3\104\343\105\174\125\163\126\301\127" +
    "\245\130\274\131\270\132\302\133\255\134\304\135\264" +
    "\136\256\137\276\140\273\141\344\142\266\143\166\145" +
    "\341\146\303\147\260\150\257\151\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\066\003\173\004\u0197\005" +
    "\226\006\055\007\057\010\205\011\201\054\u0192\062\u0191" +
    "\073\u01d6\074\u0196\077\u0193\100\207\101\230\102\227\105" +
    "\174\125\163\126\233\127\245\130\225\142\206\143\166" +
    "\146\240\147\172\150\170\151\217\001\001\000\002\001" +
    "\001\000\004\115\u01d8\001\001\000\076\003\173\005\275" +
    "\006\055\010\265\011\262\100\207\101\230\102\277\105" +
    "\174\125\163\126\301\127\245\130\274\131\270\132\302" +
    "\133\255\134\304\135\264\136\256\137\276\140\273\141" +
    "\344\142\266\143\166\144\u01d9\145\u016c\146\303\147\260" +
    "\150\257\151\271\001\001\000\004\113\u01da\001\001\000" +
    "\002\001\001\000\060\003\173\005\275\006\055\010\265" +
    "\011\262\062\u0191\075\u01dc\076\u019f\077\u01a0\100\207\101" +
    "\230\102\227\105\174\125\163\126\233\127\245\130\225" +
    "\142\206\143\166\146\240\147\172\150\170\151\217\001" +
    "\001\000\002\001\001\000\076\003\173\005\275\006\055" +
    "\010\265\011\262\046\175\055\u01c9\057\237\060\204\061" +
    "\241\062\162\063\167\064\244\066\232\070\223\071\177" +
    "\100\207\101\230\102\227\105\174\125\163\126\233\127" +
    "\245\130\225\142\206\143\166\146\240\147\172\150\170" +
    "\151\217\001\001\000\074\003\173\005\275\006\055\010" +
    "\265\011\262\100\207\101\230\102\277\105\174\125\163" +
    "\126\301\127\245\130\274\131\270\132\302\133\255\134" +
    "\304\135\264\136\256\137\276\140\273\141\344\142\266" +
    "\143\166\145\u01df\146\303\147\260\150\257\151\271\001" +
    "\001\000\002\001\001\000\040\173\u01e1\174\317\200\316" +
    "\201\321\202\320\203\360\204\357\205\356\206\355\207" +
    "\353\210\354\211\352\212\351\213\350\214\347\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\124\u01e5\001\001\000\072\003\173\005\275\006\055" +
    "\010\265\011\262\100\207\101\230\102\277\105\174\125" +
    "\163\126\301\127\245\130\274\131\270\132\302\133\255" +
    "\134\304\135\264\136\256\137\276\140\273\141\u01e6\142" +
    "\266\143\166\146\303\147\260\150\257\151\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\112\003\173\004\247\005\226\006\055\007\057\010\205" +
    "\011\201\046\175\050\u01ea\051\242\052\235\053\236\055" +
    "\214\057\237\060\204\061\241\062\162\063\167\064\244" +
    "\066\232\070\223\071\177\100\207\101\230\102\227\105" +
    "\174\125\163\126\233\127\245\130\225\142\206\143\166" +
    "\146\240\147\172\150\170\151\217\001\001\000\002\001" +
    "\001\000\012\165\u01ec\166\u014e\174\317\214\347\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\u01f1\001\001\000\002\001\001\000\114\003\173" +
    "\004\247\005\226\006\055\007\057\010\205\011\201\045" +
    "\u01f2\046\175\050\u01f5\051\242\052\235\053\236\055\214" +
    "\057\237\060\204\061\241\062\162\063\167\064\244\066" +
    "\232\070\223\071\177\100\u01f3\101\230\102\227\105\174" +
    "\125\163\126\233\127\245\130\225\142\206\143\166\146" +
    "\240\147\172\150\170\151\217\001\001\000\112\003\173" +
    "\004\247\005\226\006\055\007\057\010\205\011\201\046" +
    "\175\050\u020d\051\242\052\235\053\236\055\214\057\237" +
    "\060\204\061\241\062\162\063\167\064\244\066\232\070" +
    "\223\071\177\100\207\101\230\102\227\105\174\125\163" +
    "\126\233\127\245\130\225\142\206\143\166\146\240\147" +
    "\172\150\170\151\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\166" +
    "\u014e\174\317\214\347\001\001\000\002\001\001\000\100" +
    "\003\173\005\275\006\055\010\265\011\262\100\207\101" +
    "\230\102\277\103\u01fa\104\343\105\174\125\163\126\301" +
    "\127\245\130\274\131\270\132\302\133\255\134\304\135" +
    "\264\136\256\137\276\140\273\141\344\142\266\143\166" +
    "\145\341\146\303\147\260\150\257\151\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\100\003\173\005\275\006\055\010\265\011" +
    "\262\100\207\101\230\102\277\103\u01ff\104\343\105\174" +
    "\125\163\126\301\127\245\130\274\131\270\132\302\133" +
    "\255\134\304\135\264\136\256\137\276\140\273\141\344" +
    "\142\266\143\166\145\341\146\303\147\260\150\257\151" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\100\003\173\005\275\006\055\010\265\011\262" +
    "\100\207\101\230\102\277\103\u0206\104\343\105\174\125" +
    "\163\126\301\127\245\130\274\131\270\132\302\133\255" +
    "\134\304\135\264\136\256\137\276\140\273\141\344\142" +
    "\266\143\166\145\341\146\303\147\260\150\257\151\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\100\003\173\005\275\006\055\010\265\011\262" +
    "\100\207\101\230\102\277\103\u020a\104\343\105\174\125" +
    "\163\126\301\127\245\130\274\131\270\132\302\133\255" +
    "\134\304\135\264\136\256\137\276\140\273\141\344\142" +
    "\266\143\166\145\341\146\303\147\260\150\257\151\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\166\u014e\174\317\214\347" +
    "\001\001\000\002\001\001\000\004\154\u0211\001\001\000" +
    "\004\016\u0212\001\001\000\002\001\001\000\010\015\u0214" +
    "\020\007\022\012\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	if(first) {	Type.initTypes();
			Env.initFirst();
	}
	if(second) Env.initSecond();

    }

 

  public static Scanner s;
  public static int errors = 0;
  public static int warnings = 0;
  public static boolean first = true, second = false;
  public static StringBuffer code = new StringBuffer();
  public static String objLoc = "null";

  public static void main(String argv[]) {

    for (int i = 0; i < argv.length; i++) {
      try { System.out.println("\n... Creating Symbol-Table for \""+argv[i]+"\" ...\n");
	  	s = new Scanner(new FileReader(argv[i]));
        	parser p = new parser(s);
        	p.parse();
        	System.out.println("Number of errors = " + errors + ".");
        	System.out.println("Number of warnings = " + warnings + ".");
		Type.printTypes();
	  	first = false;
	  	second = true;
        	System.out.println("\n... Generating intermediate code for \""+argv[i]+"\" ...\n");
		code.append("		; ModuleID = '"+argv[i]+".ll'\n\n");
		code.append("target datalayout = \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-s0:0:64-f80:32:32\"\n");
		code.append("target triple = \"i686-pc-linux-gnu\"\n\n");
		code.append("		; Global values\n");
		Set glob = Env.getGlobals().entrySet();
  		Iterator it = glob.iterator();
		while(it.hasNext()) { Map.Entry entry = (Map.Entry)it.next();
					    String key = (String)entry.getKey();
					    String value = (String)entry.getValue();
					    if (value.equals("struct")) code.append(key+"\n");
					    else { int lth = key.length() + 1;
						     code.append(value+" = internal constant ["+lth+" x i8] "+" c\""+key+"\\00\"\n");
					    }
		}
		code.append("\n");
		code.append("		; External declarations\n");
		code.append("declare i32 @printf(i8*, ...)\n");
		code.append("declare i32 @scanf(i8*, ...)\n\n");
        	s = new Scanner(new FileReader(argv[i]));
	  	p = new parser(s);
        	p.parse();
        	System.out.println("Number of errors = " + errors + ".");
        	System.out.println("Number of warnings = " + warnings + ".");
		Type.printTypes();
	  	if (errors == 0) try { FileOutputStream  fStream;
   					     PrintWriter  myStream;
   			      	     fStream = new FileOutputStream(argv[i]+".ll");
   					     myStream = new PrintWriter(fStream);
   					     myStream.println(code); 
   					     myStream.flush();
   					     myStream.close();
        				     System.out.println("\nCode written to \""+argv[i]+".ll\".");
				     }
				     catch (IOException e) { e.printStackTrace(System.out);
        			    				     System.exit(1);
      			     }
		else System.out.println("\nNo code produced.");
		System.out.println("--------------------------------------- (parser)");
      }
      catch (Exception e) { e.printStackTrace(System.out);
        			    System.exit(1);
      }
    }
  }
  
  public void report_error(String message, Object info) {
    if (info instanceof String){
	errors++; 
      System.err.println("  "+ errors + "==> " + info + " "+ message + 
					"\n       Parsing resumed from 2nd token before" + s.yytext()+"\n");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }

  public void sem_error(String lexeme, String message) {
	errors++;
     	System.err.println("Error "+ s.yytext() + " : Semantic error");
      System.err.println("  "+ errors + "==> " + message + ": "+ lexeme + "\n");
  }

  public void warning(String lexeme, String message) {
	warnings++;
     	System.err.println("Warning "+ s.yytext());
      System.err.println("  "+ warnings + "==> " + message + ": "+ lexeme + "\n");
  } 
  
  public void report_fatal_error(String message, Object info) {
    	report_error(message, info);
    	throw new RuntimeException("Fatal Syntax Error");
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



	class Sname {
	  public String name;
	  public Symb cs;
	  public Symb rs;

	  Sname(String n, Symb c, Symb r) {
		name = n;
		cs = c;
		rs = r;
	  }

	  public String toString(){
		return "Sname["+name+", "+cs+", "+rs+"]";
	  }
	}

	class Exp {
	  public Type type;
	  public String locT;
	  public String locN;
	  public Labels lab;

	  Exp(Type t, String lt, String ln) {
		type = t;
		locT = lt;
		locN = ln;
	  }

	  Exp(Type t, Labels l) {
		type = t;
		lab = l;
	  }

	  Exp(Type t, String lt, String ln, Labels l) {
		type = t;
		locT = lt;
		locN = ln;
		lab = l;
	  }

  	  public void load () {
		if(locN.startsWith("getelementptr")) { parser.code.append("	"+Tmp.nv()+" = "+locN+"\n");
								   locN = Tmp.lv();
		}
		if(locT.endsWith("*") && !locT.startsWith("%struct")) { parser.code.append("	"+Tmp.nv()+" = load "+locT+" "+locN+"\n");
					   	 					  locT = locT.replaceFirst("\\*", "");
					   	 					  locN = Tmp.lv();
		}
  	  }

  	  public String widen(Type w) {
		if(type == w) return locN;
 		if(type.isInteger() && w.isFloating()) parser.code.append("	"+Tmp.nv()+" = sitofp i32 "+locN+" to double\n");
 		if(type.isCharacter() && w.isFloating()) parser.code.append("	"+Tmp.nv()+" = sitofp i8 "+locN+" to double\n");
 		if(type.isCharacter() && w.isInteger()) parser.code.append("	"+Tmp.nv()+" = sext i8 "+locN+" to i32\n");
		return Tmp.lv();
  	  }

	}

	class ParamList {
	  public Type type;
	  public List list;

	  ParamList(Type t, List l) {
		type = t;
		list = l;
	  }
	}

	class Labels {
	  public String lBegin;
	  public String lTrue;
	  public String lFalse;
	  public String lNext;
	  public boolean bvalue;
	  public boolean bvDone;

	  Labels() {
		lBegin = Tmp.nl();
		lTrue = Tmp.nl();
		lFalse = Tmp.nl();
		lNext = Tmp.nl();
		bvalue = false;
		bvDone = false;
	  }
	}

	class Vars {
	  public Env e;
	  public List vl;

	  Vars(Env ee, List l) {
		e = ee;
		vl = l;
	  }
	}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // expression ::= assignment_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // expression_opt ::= expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_opt",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // expression_opt ::= 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_opt",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // left_hand_side ::= array_access 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("left_hand_side",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // left_hand_side ::= field_access 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("left_hand_side",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // left_hand_side ::= name 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   		 			   	 RESULT = new Exp(Type.errortype(), "", "");
			   			     }
			   			     else { String locN = sn.cs.getLocN();
								if(locN.startsWith("getelementptr")) { String cn = Name.getCurrentClass().getName();
														   parser.code.append("		; left_hand_side\n");
														   locN = locN.replaceFirst("struct.+\\*", "struct."+cn+"*");
														   parser.code.append("	"+Tmp.nv()+" = "+locN+"\n");
														   locN = Tmp.lv();
					   	 								   RESULT = new Exp(sn.cs.getType(), sn.cs.getLocT(), Tmp.lv());
							      }
								else RESULT = new Exp(sn.cs.getType(), sn.cs.getLocT(), sn.cs.getLocN());
						     }

			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("left_hand_side",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // assignment ::= error NT$34 EQ assignment_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // NT$34 ::= 
            {
              Exp RESULT =null;
 parser.report_error("left_hand_side","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$34",138, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // assignment ::= left_hand_side EQ M14 assignment_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(e1.type.isArray()) { if(e1.type != e2.type) { parser.sem_error(""+e1.type+", "+e2.type, "INCOMPATIBLE TYPES");
				    						    	   			    RESULT = new Exp(Type.errortype(), "", "");
			   			   	  			   }
										   else { Symb s = Env.get(e1.locN.replaceFirst("%", ""));
											    s.putLocT(e2.locT);
											    s.putLocN(e2.locN);
										   }
						   }
						   else if(e1.type != e2.type) if(e1.type.isNumber() && e2.type.isNumber()) { Type t = Type.max(e1.type, e2.type);
															 				if(e2.type != t) { parser.code.append("		; assignment\n");
																						 e2.load();
									  						 							 String l2 = e2.widen(t);
							    	  														 parser.code.append("	store "+t.getCode()+" "+l2+", "+e1.locT+" "+e1.locN+"\n");
							    	  														 RESULT = new Exp(e1.type, e1.locT, e1.locN, l);
																			}
							  				 								else { parser.sem_error(""+e1.type+", "+e2.type, "LEFT-HAND TYPE SHORTER THAN RIGHT-END TYPE");
				    						    	   	  								 RESULT = new Exp(Type.errortype(), "", "");
			   			   	  				 								}
											 }
							  				 else { parser.sem_error(""+e1.type+", "+e2.type, "INCOMPATIBLE TYPES");
				    						    	   	  RESULT = new Exp(Type.errortype(), "", "");
			   			   	  				 }
			   			   	  else { parser.code.append("		; assignment\n");
							    	   if(e2.type.isBool() && !e2.lab.bvDone) { parser.code.append(e2.lab.lTrue+":	; l_True\n");
											   			   	  parser.code.append("	br label %"+e2.lab.lNext+"\n");
											   			   	  parser.code.append(e2.lab.lFalse+":	; l_False\n");
											   			  	  parser.code.append("	br label %"+e2.lab.lNext+"\n");
											   			  	  parser.code.append(e2.lab.lNext+":	; l_Next\n");
											  			   	  parser.code.append("	"+Tmp.nv()+" = phi i1 [true, %"+e2.lab.lTrue+"] ,[false, %"+e2.lab.lFalse+"]\n");
											   			   	  e2.locT = "i1";
											   			  	  e2.locN = Tmp.lv();
							    	   }
								   e2.load();
							    	   parser.code.append("	store "+e2.locT+" "+e2.locN+", "+e1.locT+" "+e1.locN+"\n");
							    	   RESULT = new Exp(e1.type, e1.locT, e1.locN, l);
						   	 }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // assignment_expression ::= assignment 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // assignment_expression ::= conditional_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // conditional_expression ::= error NT$33 QUESTION expression COLON conditional_or_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // NT$33 ::= 
            {
              Exp RESULT =null;
 parser.report_error("conditional_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",137, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // conditional_expression ::= conditional_or_expression QUESTION M12 expression COLON M13 conditional_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isBool();
						     if(!b1) { parser.sem_error(""+e1.type, "NOT A BOOLEAN");
								   RESULT = new Exp(Type.errortype(), "", "");
						     }
			   			     else if(e2.type != e3.type) if(e2.type.isNumber() && e3.type.isNumber()) { e2.load();
							    											 	  e3.load();
									  									 	  Type t = Type.max(e2.type, e3.type);
									  									 	  String l2 = e2.widen(t);
									  									 	  String l3 = e3.widen(t);
												  							  parser.code.append("	br label %"+e1.lab.lNext+"\n");
						     						  							  parser.code.append(e1.lab.lNext+": 	; l_Next\n");
												  							  parser.code.append("	"+Tmp.nv()+" = phi "+t.getCode()+" ["+l2+", %"+e1.lab.lTrue+"] ,["+l3+", %"+e1.lab.lFalse+"]\n");
											       							  RESULT = new Exp(t, t.getCode(), Tmp.lv());
						     					   }
							    				   else { parser.sem_error(""+e2.type+", "+e3.type, "INCOMPATIBLE TYPES");
								     				    RESULT = new Exp(Type.errortype(), "", "");
						     	    				   }
				    		          else { e3.load();
								     parser.code.append("	br label %"+e1.lab.lNext+"\n");
						     		     parser.code.append(e1.lab.lNext+": 	; l_Next\n");
								     parser.code.append("	"+Tmp.nv()+" = phi "+e2.locT+" ["+e2.locN+", %"+e1.lab.lTrue+"] ,["+e3.locN+", %"+e1.lab.lFalse+"]\n");
								     RESULT = new Exp(e2.type, e2.type.getCode(), Tmp.lv());
						     	    }	   
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // conditional_expression ::= conditional_or_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // M13 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Exp e1 = (Exp)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
						     Exp e2 = (Exp)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
						     e2.load();
						     parser.code.append("	br label %"+e1.lab.lNext+"\n");
						     parser.code.append(e1.lab.lFalse+": 	; l_False\n");
						     RESULT = e1.lab;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M13",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // M12 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Exp e = (Exp)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
						     parser.code.append("		; conditional_expression\n");
						     if (e.lab.bvalue) { e.load();
										 parser.code.append("	br i1 "+e.locN+", label %"+e.lab.lTrue+", label %"+e.lab.lFalse+"\n");
						     }
						     parser.code.append(e.lab.lTrue+": 	; l_True\n");
						     RESULT = e.lab; 
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M12",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // conditional_or_expression ::= error NT$32 OROR conditional_and_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // NT$32 ::= 
            {
              Exp RESULT =null;
 parser.report_error("conditional_or_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",136, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // conditional_or_expression ::= conditional_or_expression OROR M9 conditional_and_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isBool();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A BOOLEAN");
			   			     boolean b2 = e2.type.isBool();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A BOOLEAN");
				    		     if(b1 && b2) RESULT = e2;	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // conditional_or_expression ::= conditional_and_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // M9 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
						     parser.code.append("		; conditional_or_expression\n");
						     parser.code.append(l.lFalse+":	; l_False\n");
						     l.lFalse = Tmp.nl();
			   	    		     RESULT = l;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M9",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // conditional_and_expression ::= error NT$31 ANDAND equality_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // NT$31 ::= 
            {
              Exp RESULT =null;
 parser.report_error("conditional_and_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",135, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // conditional_and_expression ::= conditional_and_expression ANDAND M8 equality_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isBool();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A BOOLEAN");
			   			     boolean b2 = e2.type.isBool();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A BOOLEAN");
				    		     if(b1 && b2) RESULT = e2;	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // conditional_and_expression ::= equality_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // M8 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
						     parser.code.append("		; conditional_and_expression\n");
						     parser.code.append(l.lTrue+":	; l_True\n");
						     l.lTrue = Tmp.nl();
			   	    		     RESULT = l;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M8",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // equality_expression ::= error NT$30 NOTEQ relational_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // NT$30 ::= 
            {
              Exp RESULT =null;
 parser.report_error("equality_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",134, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // equality_expression ::= error NT$29 EQEQ relational_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // NT$29 ::= 
            {
              Exp RESULT =null;
 parser.report_error("equality_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",133, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // equality_expression ::= equality_expression NOTEQ relational_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(e1.type != e2.type) if(e1.type.isNumber() && e2.type.isNumber()) { parser.code.append("		; equality_NOTEQ_expression\n");
							    											 Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
							    											 e1.load();
							    											 e2.load();
									  									 Type t = Type.max(e1.type, e2.type);
									  									 String l1 = e1.widen(t);
									  									 String l2 = e2.widen(t);
							    											 parser.code.append("	"+Tmp.nv()+" = icmp ne "+t.getCode()+" "+l1+", "+l2+"\n");
							    											 parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
							    											 RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
							  			  }
							  			  else { parser.sem_error(""+e1.type+", "+e2.type, "INCOMPATIBLE TYPES");
				    						    	   RESULT = new Exp(Type.errortype(), "", "");
			   			   	  			  }
 						   else { parser.code.append("		; equality_NOTEQ_expression\n");
							    Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
							    e1.load();
							    e2.load(); 
							    parser.code.append("	"+Tmp.nv()+" = icmp ne "+e1.locT+" "+e1.locN+", "+e2.locN+"\n");
							    parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
							    RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						   }	   
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // equality_expression ::= equality_expression EQEQ relational_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(e1.type != e2.type) if(e1.type.isNumber() && e2.type.isNumber()) { parser.code.append("		; equality_EQEQ_expression\n");
							    											 Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
							    											 e1.load();
							    											 e2.load();
									  									 Type t = Type.max(e1.type, e2.type);
									  									 String l1 = e1.widen(t);
									  									 String l2 = e2.widen(t);
							    											 parser.code.append("	"+Tmp.nv()+" = icmp eq "+t.getCode()+" "+l1+", "+l2+"\n");
							    											 parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
							    											 RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
							  			  }
							  			  else { parser.sem_error(""+e1.type+", "+e2.type, "INCOMPATIBLE TYPES");
				    						    	   RESULT = new Exp(Type.errortype(), "", "");
			   			   	  			  }
 						   else { parser.code.append("		; equality_EQEQ_expression\n");
							    Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
							    e1.load();
							    e2.load();
							    parser.code.append("	"+Tmp.nv()+" = icmp eq "+e1.locT+" "+e1.locN+", "+e2.locN+"\n");
							    parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
							    RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						   }	   	   
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // equality_expression ::= relational_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // relational_expression ::= error NT$28 GTEQ additive_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // NT$28 ::= 
            {
              Exp RESULT =null;
 parser.report_error("relational_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",132, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // relational_expression ::= error NT$27 LTEQ additive_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // NT$27 ::= 
            {
              Exp RESULT =null;
 parser.report_error("relational_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",131, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // relational_expression ::= error NT$26 GT additive_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // NT$26 ::= 
            {
              Exp RESULT =null;
 parser.report_error("relational_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",130, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // relational_expression ::= error NT$25 LT additive_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // NT$25 ::= 
            {
              Exp RESULT =null;
 parser.report_error("relational_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",129, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // relational_expression ::= relational_expression GTEQ additive_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; relational_GTEQ_expression\n");
									  Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
									  e1.load();
									  e2.load();
							  		  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+Tmp.nv()+" = icmp sge "+t.getCode()+" "+l1+", "+l2+"\n");
									  parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
									  RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						     }	   	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // relational_expression ::= relational_expression LTEQ additive_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; relational_LTEQ_expression\n");
									  Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
									  e1.load();
									  e2.load();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+Tmp.nv()+" = icmp sle "+t.getCode()+" "+l1+", "+l2+"\n");
									  parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
									  RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						     }	   	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // relational_expression ::= relational_expression GT additive_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; relational_GT_expression\n");
									  Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
									  e1.load();
									  e2.load();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+Tmp.nv()+" = icmp sgt "+t.getCode()+" "+l1+", "+l2+"\n");
									  parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
									  RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						     }	   	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // relational_expression ::= relational_expression LT additive_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; relational_LT_expression\n");
									  Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
									  e1.load();
									  e2.load();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+Tmp.nv()+" = icmp slt "+t.getCode()+" "+l1+", "+l2+"\n");
									  parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
									  RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						     }	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // relational_expression ::= additive_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; additive_MINUS_expression\n");
									  e1.load();
									  e2.load();
									  String loc = ""+Tmp.nv();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+loc+" = sub "+t.getCode()+" "+l1+", "+l2+"\n");
									  RESULT = new Exp(t, t.getCode(), loc);
						     }	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; additive_PLUS_expression\n");
									  e1.load();
									  e2.load();
									  String loc = ""+Tmp.nv();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+loc+" = add "+t.getCode()+" "+l1+", "+l2+"\n");
									  RESULT = new Exp(t, t.getCode(), loc);
						     }	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // additive_expression ::= multiplicative_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // multiplicative_expression ::= error NT$24 MOD unary_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // NT$24 ::= 
            {
              Exp RESULT =null;
 parser.report_error("multiplicative_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",128, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // multiplicative_expression ::= error NT$23 DIV unary_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // NT$23 ::= 
            {
              Exp RESULT =null;
 parser.report_error("multiplicative_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",127, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // multiplicative_expression ::= error NT$22 MULT unary_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // NT$22 ::= 
            {
              Exp RESULT =null;
 parser.report_error("multiplicative_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",126, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // multiplicative_expression ::= multiplicative_expression MOD unary_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isInteger();
						     if(!b1) parser.sem_error(""+e1.type, "NOT AN INTEGER");
			   			     boolean b2 = e2.type.isInteger();
						     if(!b2) parser.sem_error(""+e2.type, "NOT AN INTEGER");
				    		     if(b1 && b2) { parser.code.append("		; multiplicative_MOD_expression\n");
									  e1.load();
									  e2.load();
									  String loc = ""+Tmp.nv();
									  parser.code.append("	"+loc+" = srem i32 "+e1.locN+", "+e2.locN+"\n");					  
									  RESULT = new Exp(e1.type, "i32", loc);
						     }   	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // multiplicative_expression ::= multiplicative_expression DIV unary_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; multiplicative_DIV_expression\n");
									  e1.load();
									  e2.load();
									  String loc = ""+Tmp.nv();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  if(t.isFloating()) parser.code.append("	"+loc+" = fdiv "+t.getCode()+" "+l1+", "+l2+"\n");
									  else parser.code.append("	"+loc+" = sdiv "+t.getCode()+" "+l1+", "+l2+"\n");					  
									  RESULT = new Exp(t, t.getCode(), loc);
						     }   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // multiplicative_expression ::= multiplicative_expression MULT unary_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; multiplicative_MULT_expression\n");
									  e1.load();
									  e2.load();
									  String loc = ""+Tmp.nv();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+loc+" = mul "+t.getCode()+" "+l1+", "+l2+"\n");						  
									  RESULT = new Exp(t, t.getCode(), loc);
						     }	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // multiplicative_expression ::= unary_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // predecrement_expression ::= MINUSMINUS unary_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(!e.type.isNumber()) { parser.sem_error(""+e.type, "NOT A NUMBER");
				    		   			     	    RESULT = new Exp(Type.errortype(), "", "");
						   }	   
			   			   else  RESULT = e;						    
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predecrement_expression",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // preincrement_expression ::= PLUSPLUS unary_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(!e.type.isNumber()) { parser.sem_error(""+e.type, "NOT A NUMBER");
				    		   			     	    RESULT = new Exp(Type.errortype(), "", "");
						   }	   
			   			   else  RESULT = e;						    
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preincrement_expression",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // unary_expression ::= MINUS unary_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { if(!e.type.isNumber()) { parser.sem_error(""+e.type, "NOT A NUMBER");
				    		   			     	    RESULT = new Exp(Type.errortype(), "", "");
						   }	   
			   			   parser.code.append("		; unary_minus_expression\n");
						   e.load();
						   String loc = ""+Tmp.nv();
						   parser.code.append("	"+loc+" = sub "+e.locT+" 0"+", "+e.locN+"\n");
						   Type t = e.type;
						   RESULT = new Exp(t, t.getCode(), loc);
			   }						    
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // unary_expression ::= PLUS unary_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(!e.type.isNumber()) { parser.sem_error(""+e.type, "NOT A NUMBER");
				    		   			     	    RESULT = new Exp(Type.errortype(), "", "");
						   }	   
			   			   else  RESULT = e;						    
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // unary_expression ::= NOT M10 unary_expression 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(!e.type.isBool()) { parser.sem_error(""+e.type, "NOT A BOOLEAN");
				    		   			   	  RESULT = new Exp(Type.errortype(), "", "");
						   }	   
			   			   else { String s = l.lTrue;
			   			     	    l.lTrue = l.lFalse;
			   			     	    l.lFalse = s;
 							    RESULT = new Exp(Type.bool(), l);
						   }						    
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // unary_expression ::= predecrement_expression 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // unary_expression ::= preincrement_expression 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // unary_expression ::= postfix_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // postdecrement_expression ::= postfix_expression MINUSMINUS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postdecrement_expression",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // postincrement_expression ::= postfix_expression PLUSPLUS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postincrement_expression",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // M10 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { parser.code.append("		; unary_NOT_expression\n");
			   			     RESULT = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M10",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // postfix_expression ::= AT name 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   		     RESULT = new Exp(Type.errortype(), "", "");
			   }
			   else RESULT = new Exp(Type.reference(sn.cs.getType()), sn.cs.getLocT(), sn.cs.getLocN()+"&"); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // postfix_expression ::= postdecrement_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // postfix_expression ::= postincrement_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // postfix_expression ::= name 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   		     RESULT = new Exp(Type.errortype(), "", "");
			   }
			   else { if((parser.second) && (sn.cs.getType() == Type.bool())) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;									    
											    	     		  if(!l.bvalue) parser.code.append("	br i1 "+sn.cs.getLocN()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
											    	     		  RESULT = new Exp(Type.bool(), sn.cs.getLocT(), sn.cs.getLocN(), l);
			   	    }
				    else RESULT = new Exp(sn.cs.getType(), sn.cs.getLocT(), sn.cs.getLocN()); 
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // postfix_expression ::= primary 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // array_access ::= primary_no_new_array LBRACK expression RBRACK 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(!e2.type.isInteger()) { parser.sem_error(""+e2.type, "NOT AN INTEGER");
				    		            RESULT = new Exp(Type.errortype(), "", "");
			   } 
			   else RESULT = e1;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_access",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // array_access ::= name LBRACK expression RBRACK 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) { if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   	      			   	 RESULT = new Exp(Type.errortype(), "", "");
			   			     }
			   			     else { Type t1 = sn.cs.getType();
				    				if(!t1.isArray()) { parser.sem_error(""+t1, "NOT AN ARRAY");
				    		 	   	    			  RESULT = new Exp(Type.errortype(), "", "");
			   	    				}
				   	    			else if(!e.type.isInteger()) { parser.sem_error(""+e.type, "NOT AN INTEGER");
				    		       	   		 			 RESULT = new Exp(Type.errortype(), "", "");
					  	   		     } 
					  	   		     else { parser.code.append("		; array_access\n");
										String locT = sn.cs.getLocT();
										String locN = sn.cs.getLocN();
										if(locT.endsWith("**")) { parser.code.append("	"+Tmp.nv()+" = load "+locT+" "+locN+"\n");
														  locT = locT.replaceFirst("\\*", "");
														  locN = Tmp.lv();
					   	 								  sn.cs.putLocT(locT);
					   	 								  sn.cs.putLocN(locN);
										}
										e.load();
										String index = Tmp.lv();
										if(locT.endsWith("]*")) parser.code.append("	"+Tmp.nv()+" = getelementptr "+locT+" "+locN+", i32 0, i32 "+index+"\n");
										else parser.code.append("	"+Tmp.nv()+" = getelementptr "+locT+" "+locN+", i32 "+index+"\n");
										Type t = ((Array)t1).getBase();
										RESULT = new Exp(t, t.getCode()+"*", Tmp.lv());
								     }
			   			     }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_access",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // method_invocation ::= SUPER DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList e = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_invocation",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // method_invocation ::= primary DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList eL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) if(!e1.type.isReference()) { parser.sem_error(""+e1.type, "NOT A REFERENCE");
				    		 	   			   	  RESULT = new Exp(Type.errortype(), "", "");
			   			   }
			   			   else { Type name = ((Reference)e1.type).getReferred();
			   	   			    if (!name.isName()) { parser.sem_error(""+e1.type, "NOT A CLASS");
				    		       	 			  RESULT = new Exp(Type.errortype(), "", "");
			   	   			    }
			   	   			    else { Name c = (Name)name;
								     Symb sn = Env.get(n, c.getEnv()); 
			   			     		     if(sn == null) { parser.sem_error(n,"UNKNOWN NAME"); 
									       	    RESULT = new Exp(Type.errortype(), "", "");
								     }
			   			     		     else if (!sn.isPublic() && !Name.getCurrentClass().isSubclass(sn.getOwner())) { parser.sem_error(n, "ILLEGAL ACCESS TO PRIVATE ATTRIBUTE");
				    					 				     			     	      		  		 RESULT = new Exp(Type.errortype(), "", "");
						  	     		    }
						  	     		    else { String cName = c.getName(); 
										     ListIterator l = eL.list.listIterator();
								 		     parser.code.append("		; method_invocation\n");
										     parser.code.append("	"+Tmp.nv()+" = load "+e1.locT+" "+e1.locN+"\n");
										     String obj_ptr = Tmp.lv();
										     while (l.hasNext()) { Exp e = (Exp)l.next();
												   		   if(e.locT.contains("*")) if(e.locN.endsWith("&")) e.locN = e.locN.replace('&', ' ').trim(); 
											    				     	    		    else if(e.type.isArray()) { String t = ((Array)e.type).getBase().getCode()+"*";
																				   	  		  parser.code.append("	"+Tmp.nv()+" = bitcast "+e.locT+" "+e.locN+" to "+t+"\n");
 	    																			   	  		  e.locT = t;
																				   	  		  e.locN = Tmp.lv();
																    	   		   }
																    	   		   else if(!e.locT.startsWith("i8* getelementptr")) { if(e.locN.startsWith("getelementptr")) { parser.code.append("	"+Tmp.nv()+" = "+e.locN+"\n");
														   																		   	  		  e.locN = Tmp.lv();
																									    	   		   }
																									  	   		   parser.code.append("	"+Tmp.nv()+" = load "+e.locT+" "+e.locN+"\n");
																			         				     	  	   		   e.locT = e.locT.replaceFirst("\\*", "");
																								     	  	   		   e.locN = Tmp.lv();
											    						   	  	   }
								     		    } 
										    Type t1 = sn.getType();
				    				     		    if(!t1.isMethod()) { parser.sem_error(""+t1, "NOT A METHOD");
				    		             			   	  		 RESULT = new Exp(Type.errortype(), "", "");
			   	    				     		    }
								     		    else { Type t3 = ((Method)t1).getRange();
											     if(t3 == Type.voidtype()) parser.code.append("	call void @"+cName+"_"+n+"("); 
											     else parser.code.append("	"+Tmp.nv()+" = call "+t3.getCode()+" @"+cName+"_"+n+"(");
								     		    	     l = eL.list.listIterator();
								     		 	     parser.code.append("%struct."+cName+"* "+obj_ptr);											
								  			     while(l.hasNext()) { Exp e = (Exp)l.next();
											   			 	  parser.code.append(", "+e.locT+" "+e.locN);
								 			     }
								 		  	     Type t5 = ((Method)t1).getDomain();
										 	     if(t5 != eL.type) { parser.sem_error(""+t5+", "+eL.type, "INCOMPATIBLE ARGUMENT IN METHOD INVOCATION "+n);
				    				             	  				 RESULT = new Exp(Type.errortype(), "", "");
			   	  	   						     }
											     else { parser.code.append(")\n");
											  	      Labels lab = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
									 	  	   	      RESULT = new Exp(t3, t3.getCode(), Tmp.lv(), lab);
								     		  	     }
										    }
									   }								     
			   			          }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_invocation",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // method_invocation ::= name LPAREN argument_list_opt RPAREN 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList eL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second)
					  parse: { if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   	      			   	 RESULT = new Exp(Type.errortype(), "", "");
			   			     }
			   			     else { Name c = sn.cs.getOwner();
								String cName = null;
								if(c != null) cName = c.getName(); 
								ListIterator l = eL.list.listIterator();
								parser.code.append("		; method_invocation\n");
								while (l.hasNext()) { Exp e = (Exp)l.next();
											    if(e.locT.contains("*")) if(e.locN.endsWith("&")) e.locN = e.locN.replace('&', ' ').trim(); 
											    				     else if(e.type.isArray()) { String t = ((Array)e.type).getBase().getCode()+"*";
																				   parser.code.append("	"+Tmp.nv()+" = bitcast "+e.locT+" "+e.locN+" to "+t+"\n");
 	    																			   e.locT = t;
																				   e.locN = Tmp.lv();
																    }
																    else if(!e.locT.startsWith("i8* getelementptr")) { if(e.locN.startsWith("getelementptr")) { parser.code.append("	"+Tmp.nv()+" = "+e.locN+"\n");
														   																		   e.locN = Tmp.lv();
																									    }
																									  parser.code.append("	"+Tmp.nv()+" = load "+e.locT+" "+e.locN+"\n");
																			         				     	  e.locT = e.locT.replaceFirst("\\*", "");
																								     	  e.locN = Tmp.lv();
											    						   }
								}
								if(sn.name.equals("printf")) parser.code.append("	"+Tmp.nv()+" = call i32 (i8*, ...)* @printf(");
						   		else if(sn.name.equals("scanf")) parser.code.append("	"+Tmp.nv()+" = call i32 (i8*, ...)* @scanf(");
							  	     else { Type t1 = sn.cs.getType();
				    						if(!t1.isMethod()) { parser.sem_error(""+t1, "NOT A METHOD");
				    		             			   		   RESULT = new Exp(Type.errortype(), "", "");
													   break parse;
			   	    						}
										else { Type t3 = ((Method)t1).getRange();
											 if(t3 == Type.voidtype()) parser.code.append("	call void @"+cName+"_"+sn.name+"("); 
											 else parser.code.append("	"+Tmp.nv()+" = call "+t3.getCode()+" @"+cName+"_"+sn.name+"(");
 										}
								     }
								l = eL.list.listIterator();
								if(sn.name.equals("scanf") || sn.name.equals("printf")) { Exp e = (Exp)l.next();
											   						    parser.code.append(e.locT+" "+e.locN);
								}
								else { if(sn.cs == Env.get(sn.name)) if(Method.getCurrentName().equals("main")) parser.objLoc = "null";
														 else parser.objLoc = "%this";
									 parser.code.append("%struct."+cName+"* "+parser.objLoc);
								}											
								while(l.hasNext()) { Exp e = (Exp)l.next();
											   parser.code.append(", "+e.locT+" "+e.locN);
								}
			   	    				if(sn.name.equals("printf")||sn.name.equals("scanf")){ parser.code.append(")\n");
																	 RESULT = new Exp(Type.integer(), "", "");										  	 						 
								}
 								else { 
									 Type t1 = sn.cs.getType();
									 Type t5 = ((Method)t1).getDomain();
									 if(t5 != eL.type) { parser.sem_error(""+t5+", "+eL.type, "INCOMPATIBLE ARGUMENT IN METHOD INVOCATION "+sn.name);
				    				             	  	   RESULT = new Exp(Type.errortype(), "", "");
			   	  	   				 }
					   				 else { parser.code.append(")\n");
										  Type t4 = ((Method)t1).getRange();
										  Labels lab = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
									 	  RESULT = new Exp(t4, t4.getCode(), Tmp.lv(), lab);
									 }
								}
			   			     }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_invocation",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // field_access ::= SUPER DOT IDENTIFIER 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { Name c = Name.getCurrentClass();
						     String sn = c.getSuper();						     
 			   			     if(sn == null){ parser.sem_error(""+c,"NOT A SUBCLASS");
				    	     				   RESULT = new Exp(Type.errortype(), "", "");
			   			     }
						     else {	Symb ss = Env.get(sn);
								Name sc = (Name)ss.getType();
						    		Symb s = Env.get(n, sc.getEnv());
			   			     		if(s == null){ parser.sem_error(n,"UNKNOWN NAME");
				    	     				  	   RESULT = new Exp(Type.errortype(), "", "");
			   			     		} 
				  			      else RESULT = new Exp(s.getType(), "", "");
						     }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_access",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // field_access ::= primary DOT IDENTIFIER 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { if(!e.type.isReference()) { parser.sem_error(""+e.type, "NOT A REFERENCE");
				    					 	    	   RESULT = new Exp(Type.errortype(), "", "");
						     }
				  		     else { Type r = ((Reference)e.type).getReferred();
								if(!r.isName()) { parser.sem_error(""+r, "NOT A CLASS");
				    					 	      RESULT = new Exp(Type.errortype(), "", "");
						     		}
								else { Symb s = Env.get(n, ((Name)r).getEnv()); 
			   			     			 if(s == null){ parser.sem_error(n,"UNKNOWN NAME");
				    	     				  		    RESULT = new Exp(Type.errortype(), "", "");
			   			     			 } 
			   			     			 else if(!s.isPublic() && !Name.getCurrentClass().isSubclass(s.getOwner())) { parser.sem_error(n, "ILLEGAL ACCESS TO PRIVATE FIELD");
				    					 				     	     				 	     			RESULT = new Exp(Type.errortype(), "", "");
						  	    			}
				  			    			else RESULT = new Exp(s.getType(), "", "");
						     		}								
						     }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_access",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // dims ::= dims LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dims",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // dims ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dims",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // dims_opt ::= dims 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dims_opt",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // dims_opt ::= 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dims_opt",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // dim_expr ::= LBRACK expression RBRACK 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_expr",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // dim_exprs ::= error NT$21 dim_expr 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_exprs",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // NT$21 ::= 
            {
              Exp RESULT =null;
 parser.report_error("dim_expr","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",125, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // dim_exprs ::= dim_exprs dim_expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_exprs",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // dim_exprs ::= dim_expr 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_exprs",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // array_creation_expression ::= NEW name dim_exprs dims_opt 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) if(!e2.type.isInteger()) { parser.sem_error(""+e2.type, "NOT AN INTEGER");
				    			 			 	RESULT = new Exp(Type.errortype(), "", "");
		   	   			   }
			   			   else { if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   			 			  	RESULT = new Exp(Type.errortype(), "", "");
			   	    			    }
			   	    			    else try { int s = Integer.parseInt(e2.locN);
									   Type t1 = Type.reference(sn.cs.getType());
								  	   parser.code.append("		; array_creation\n");									
  								  	   parser.code.append("	"+Tmp.nv()+" = malloc ["+e2.locN+" x "+t1.getCode()+"]\n");
								  	   Type t = Type.array(s, t1);
								  	   String c = "["+s+" x "+t1.getCode()+"]*";
							    	  	   RESULT = new Exp(t, c, Tmp.lv());
						   	  	   }
							  	   catch (Exception e) { parser.sem_error(""+e2.locN, "NOT AN INTEGER_LITERAL");
				    			 			 		 RESULT = new Exp(Type.errortype(), "", "");
							  	   }
			   			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_creation_expression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // array_creation_expression ::= NEW primitive_type dim_exprs dims_opt 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) if(!e2.type.isInteger()) { parser.sem_error(""+e2.type, "NOT AN INTEGER");
				    			 			 	RESULT = new Exp(Type.errortype(), "", "");
		   				   }
			   			   else try { int s = Integer.parseInt(e2.locN);
								  parser.code.append("		; array_creation\n");									
  								  parser.code.append("	"+Tmp.nv()+" = malloc ["+e2.locN+" x "+t1.getCode()+"]\n");
								  Type t = Type.array(s, t1);
								  String c = "["+s+" x "+t1.getCode()+"]*";
							    	  RESULT = new Exp(t, c, Tmp.lv());
						   	  }
							  catch (Exception e) { parser.sem_error(""+e2.locN, "NOT AN INTEGER_LITERAL");
				    			 			 	RESULT = new Exp(Type.errortype(), "", "");
							  }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_creation_expression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // argument_list ::= error NT$20 expression 
            {
              ParamList RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (ParamList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NT$20 ::= 
            {
              ParamList RESULT =null;
 parser.report_error("argument_list","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",124, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // argument_list ::= argument_list COMMA expression 
            {
              ParamList RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamList eL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { eL.list.add(e);
			   			     eL.type = Type.product(eL.type, e.type);
			   			     RESULT = eL;
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // argument_list ::= expression 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { List l = new ArrayList();
			   			     l.add(e);
			   			     RESULT = new ParamList(e.type, l);
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // argument_list_opt ::= argument_list 
            {
              ParamList RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList eL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) RESULT = eL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list_opt",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // argument_list_opt ::= 
            {
              ParamList RESULT =null;
		 if(parser.second) RESULT = new ParamList(Type.voidtype(), new ArrayList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list_opt",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // class_body_opt ::= class_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_opt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // class_body_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_opt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // class_instance_creation_expression ::= NEW name NT$19 LPAREN argument_list_opt RPAREN class_body_opt 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamList e2 = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(parser.second) { if(sn.rs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   		     			       RESULT = new Exp(Type.errortype(), "", "");
			   			     }
			   			     else { String objptr = Tmp.lv();
								ListIterator l = e2.list.listIterator();
								parser.code.append("		; constructor_invocation\n");
								while (l.hasNext()) { Exp e = (Exp)l.next();
											    if(e.locT.contains("*")) if(e.locN.endsWith("&")) e.locN = e.locN.replace('&', ' ').trim(); 
											    				     else if(e.type.isArray()) { String t = ((Array)e.type).getBase().getCode()+"*";
																				   parser.code.append("	"+Tmp.nv()+" = bitcast "+e.locT+" "+e.locN+" to "+t+"\n");
 	    																			   e.locT = t;
																				   e.locN = Tmp.lv();
																    }
																    else if(!e.locT.startsWith("i8* getelementptr")) { parser.code.append("	"+Tmp.nv()+" = load "+e.locT+" "+e.locN+"\n");
																			         				     	    e.locT = e.locT.replaceFirst("\\*", "");
																								     	    e.locN = Tmp.lv();
											    						   }
								}
								Type t = sn.rs.getType();
				    		     		if (!t.isName()) { parser.sem_error(""+t, "NOT A CLASS");
				    		           				 RESULT = new Exp(Type.errortype(), "", "");
			   	    		     		}
			   	    		     		else { Env e = ((Name)t).getEnv();
			   	    	     		      	 Symb s1 = Env.get(sn.name, e);
					     				 Type t1 = s1.getType();
			   	    	     				 if(!t1.isConstructor()) { parser.sem_error(""+t1, "NOT A CONSTRUCTOR");
				    			    	     		 		  	   RESULT = new Exp(Type.errortype(), "", "");
			   	    	     			       }
			          	     				 else if(((Constructor)t1).getDomain() != e2.type) { parser.sem_error(""+e2.type, "INCOMPATIBLE ARGUMENT IN CONSTRUCTOR INVOCATION "+sn.name);
				    					 				  		     	    RESULT = new Exp(Type.errortype(), "", "");
			   	  	   	    		     		}
					   	    		            else if(!s1.isPublic() && !Name.getCurrentClass().isSubclass(sn.rs.getOwner())) { parser.sem_error(sn.name, "ILLEGAL ACCESS TO PRIVATE CONSTRUCTOR");
				    					 				     			     	      			          RESULT = new Exp(Type.errortype(), "", "");
						  	   		    	     }
						  	   		    	     else { parser.code.append("	call void @"+sn.name+"("+"%struct."+sn.name+"* "+objptr);
										     		l = e2.list.listIterator();
										     		while(l.hasNext()) { Exp pe = (Exp)l.next();
											    		 	 	   parser.code.append(", "+pe.locT+" "+pe.locN);
										     		}
										     		parser.code.append(")\n");
												RESULT = new Exp(((Constructor)t1).getRange(), "%struct."+sn.name+"*", objptr);
									    	    }
			 	    		     		     }
			   			     }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_instance_creation_expression",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$19 ::= 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(parser.second) if(sn.rs != null) { Type t = sn.rs.getType();
				    					     if(t.isName()) { Env e = ((Name)t).getEnv();
			   	    	     		      				    Symb s1 = Env.get(sn.name, e);
					     							    Type t1 = s1.getType();
			   	    	     							    if(t1.isConstructor()) { parser.code.append("		; class_instance_creation_expression\n");																 
																     parser.code.append("	"+Tmp.nv()+" = malloc %struct."+sn.name+"\n");																     
												    } 
									     }
									   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",123, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // primary_no_new_array ::= error NT$18 DOT THIS 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$18 ::= 
            {
              Exp RESULT =null;
 parser.report_error("primary_no_new_array","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",122, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // primary_no_new_array ::= LPAREN M11 error NT$17 RPAREN 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$17 ::= 
            {
              Exp RESULT =null;
 parser.report_error("primary_no_new_array","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",121, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // primary_no_new_array ::= name DOT THIS 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // primary_no_new_array ::= name DOT CLASS 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // primary_no_new_array ::= array_type DOT CLASS 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // primary_no_new_array ::= VOID DOT CLASS 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // primary_no_new_array ::= primitive_type DOT CLASS 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // primary_no_new_array ::= array_access 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // primary_no_new_array ::= method_invocation 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if((parser.second) && (e.type == Type.bool())) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;									    
											    if(!l.bvalue) parser.code.append("	br i1 "+e.locN+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
											    l.bvDone = true;
											    RESULT = new Exp(Type.bool(), e.locT, e.locN, l);
			   }
			   else RESULT = e; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // primary_no_new_array ::= field_access 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // primary_no_new_array ::= class_instance_creation_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // primary_no_new_array ::= LPAREN M11 expression RPAREN 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if((parser.second) && (e.type == Type.bool()) && (l!= null)) RESULT = new Exp(Type.bool(), e.locT, e.locN, l);
			   else RESULT = e; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // primary_no_new_array ::= THIS 
            {
              Exp RESULT =null;
		 RESULT = new Exp(Type.reference(Name.getCurrentClass()), "", ""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // primary_no_new_array ::= literal 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if((parser.second) && (e.type == Type.bool())) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;									    
											    if(!l.bvalue) if (e.locN.equals("true")) parser.code.append("	br label %"+l.lTrue+"\n");
											    			else parser.code.append("	br label %"+l.lFalse+"\n"); 
											    RESULT = new Exp(Type.bool(), e.locT, e.locN, l);
			   }
			   else RESULT = e; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // M11 ::= 
            {
              Labels RESULT =null;
		 if (parser.second) RESULT = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M11",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // primary ::= array_creation_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // primary ::= primary_no_new_array 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // return_statement ::= RETURN M14 expression_opt SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) { Type r = Method.getCurrent().getRange();
						     if(e.type != r) if(e.type.isNumber() && r.isNumber()) { Type mt = Type.max(e.type, r);
																 String t = mt.getCode();
															 	 if(e.type != mt) { parser.code.append("		; return_statement\n");
																			  e.load();
									  						 				  String l = e.widen(mt);
																			  parser.code.append("	store "+t+" "+l+", "+t+"*"+" %tmp\n");
																			  parser.code.append("	"+Tmp.nv()+" = load "+t+"*"+" %tmp\n");
																			  parser.code.append("	store "+t+" "+Tmp.lv()+", "+t+"*"+" %retval\n");
																			  parser.code.append("	br label %return\n");
																 }
							  				 					 else  parser.sem_error(""+r+", "+e.type, "RANGE TYPE SHORTER THAN RETURNED TYPE");
									   }
							  		   else  parser.sem_error(""+r+", "+e.type, "INCOMPATIBLE TYPES");
						     else { String t = e.type.getCode();
								parser.code.append("		; return_statement\n");
								e.load();
								parser.code.append("	store "+e.locT+" "+e.locN+", "+t+"*"+" %tmp\n");
								parser.code.append("	"+Tmp.nv()+" = load "+t+"*"+" %tmp\n");
								parser.code.append("	store "+t+" "+Tmp.lv()+", "+t+"*"+" %retval\n");
								parser.code.append("	br label %return\n");	
						     }
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // M14 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = new Labels();
						     l.bvalue = true;
						     RESULT = l;
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M14",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // while_statement_no_short_if ::= WHILE LPAREN M7 expression M5 RPAREN statement_no_short_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   else { parser.code.append("	br label %"+l.lBegin+"\n");
							    parser.code.append(l.lFalse+":	; lFalse\n");
						   }	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement_no_short_if",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // while_statement ::= WHILE error NT$16 M5 RPAREN statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$16 ::= 
            {
              Object RESULT =null;
 parser.report_error("expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // while_statement ::= WHILE LPAREN M7 expression M5 RPAREN statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   else { parser.code.append("	br label %"+l.lBegin+"\n");
							    parser.code.append(l.lFalse+":	; l_False\n");
						   }	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // statement_expression_list ::= statement_expression_list COMMA statement_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression_list",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // statement_expression_list ::= statement_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression_list",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // for_update ::= statement_expression_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_update",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // for_update_opt ::= for_update 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_update_opt",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // for_update_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_update_opt",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // for_init ::= local_variable_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_init",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // for_init ::= statement_expression_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_init",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // for_init_opt ::= for_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_init_opt",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // for_init_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_init_opt",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // for_statement_no_short_if ::= FOR LPAREN for_init_opt SEMICOLON M7 expression_opt M5 SEMICOLON for_update_opt RPAREN statement_no_short_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement_no_short_if",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // for_statement ::= FOR LPAREN for_init_opt SEMICOLON M7 expression_opt M5 SEMICOLON for_update_opt RPAREN statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   /* else { parser.code.append("	br label %"+l.lBegin+"\n");
							    parser.code.append(l.lFalse+":	; l_False\n");
						   }	*/
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // if_then_else_statement_no_short_if ::= IF LPAREN M4 expression M5 RPAREN statement_no_short_if M6 ELSE statement_no_short_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   else { parser.code.append("	br label %"+l.lNext+"\n");
							    parser.code.append(l.lNext+":	; l_Next\n");
						   }	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_else_statement_no_short_if",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // if_then_else_statement ::= IF LPAREN M4 error NT$15 M5 RPAREN statement_no_short_if ELSE statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_else_statement",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$15 ::= 
            {
              Object RESULT =null;
 parser.report_error("expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",119, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // if_then_else_statement ::= IF LPAREN M4 expression M5 RPAREN statement_no_short_if M6 ELSE statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   else { parser.code.append("	br label %"+l.lNext+"\n");
							    parser.code.append(l.lNext+":	; l_Next\n");
						   }	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_else_statement",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // if_then_statement ::= IF error NT$14 M5 RPAREN statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_statement",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$14 ::= 
            {
              Object RESULT =null;
 parser.report_error("if_then_statement","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // if_then_statement ::= IF LPAREN M4 expression M5 RPAREN statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   else { parser.code.append("	br label %"+l.lFalse+"\n");
							    parser.code.append(l.lFalse+":	; l_False\n");
						   }	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_statement",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // M7 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = new Labels();
			    			     parser.code.append("	br label %"+l.lBegin+"\n");
			    			     parser.code.append(l.lBegin+":	; l_Begin\n");
						     RESULT = l;
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M7",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // M6 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
			    			     parser.code.append("	br label %"+l.lNext+"\n");
			    			     parser.code.append(l.lFalse+":	; l_False\n");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M6",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // M5 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			    			     parser.code.append(l.lTrue+":	; l_True\n");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M5",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // M4 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) RESULT = new Labels(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M4",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // statement_expression ::= class_instance_creation_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // statement_expression ::= method_invocation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // statement_expression ::= postdecrement_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // statement_expression ::= postincrement_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // statement_expression ::= predecrement_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // statement_expression ::= preincrement_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // statement_expression ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression_statement ::= statement_expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // empty_statement ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty_statement",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // statement_without_trailing_substatement ::= return_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_without_trailing_substatement",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // statement_without_trailing_substatement ::= expression_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_without_trailing_substatement",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // statement_without_trailing_substatement ::= empty_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_without_trailing_substatement",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // statement_without_trailing_substatement ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_without_trailing_substatement",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // statement_no_short_if ::= for_statement_no_short_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_short_if",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // statement_no_short_if ::= while_statement_no_short_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_short_if",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // statement_no_short_if ::= if_then_else_statement_no_short_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_short_if",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // statement_no_short_if ::= statement_without_trailing_substatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_short_if",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // statement ::= for_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // statement ::= if_then_else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // statement ::= if_then_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // statement ::= statement_without_trailing_substatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // local_variable_declaration ::= FINAL type variable_declarators 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_variable_declaration",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // local_variable_declaration ::= type variable_declarators 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_variable_declaration",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // local_variable_declaration_statement ::= type error NT$13 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_variable_declaration_statement",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$13 ::= 
            {
              Object RESULT =null;
 parser.report_error("local_variable_declaration_statement","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",117, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // local_variable_declaration_statement ::= type variable_declarators assign_opt SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_variable_declaration_statement",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // block_statement ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // block_statement ::= local_variable_declaration_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // block_statements ::= error NT$12 block_statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statements",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$12 ::= 
            {
              Object RESULT =null;
 parser.report_error("block_statements","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // block_statements ::= block_statements block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statements",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // block_statements ::= block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statements",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // block_statements_opt ::= block_statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statements_opt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // block_statements_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statements_opt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // block ::= LBRACE M2 error NT$11 RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$11 ::= 
            {
              Object RESULT =null;
 parser.report_error("block","WRONG");
			   System.out.println(" BLOCK EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
 			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",115, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // block ::= LBRACE M2 block_statements_opt RBRACE 
            {
              Object RESULT =null;
		 System.out.println(" BLOCK EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // explicit_constructor_invocation ::= primary DOT SUPER LPAREN argument_list_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("explicit_constructor_invocation",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // explicit_constructor_invocation ::= primary DOT THIS LPAREN argument_list_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("explicit_constructor_invocation",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // explicit_constructor_invocation ::= SUPER LPAREN argument_list_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamList e2 = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(parser.second) { Name c = Name.getCurrentClass();
						     String sup = c.getSuper();
						     if(sup == null){ parser.sem_error(c.getName(), "NOT HAVING A SUPERCLASS");
				   		     			    RESULT = new Exp(Type.errortype(), "", "");
			   			     }
						     else { Name sc = Env.get(sup).getOwner();
								Env se = sc.getEnv();
								Symb ss = Env.get(sup, se);
								if(ss == null) { parser.sem_error(sup, "NOT HAVING A CONSTRUCTOR");
				   		     			           RESULT = new Exp(Type.errortype(), "", "");
			   			     		}
								else { Type t1 = ss.getType();
			   	    	     				 if(!t1.isConstructor()) { parser.sem_error(""+t1, "NOT A CONSTRUCTOR");
				    			    	     		 		  	   RESULT = new Exp(Type.errortype(), "", "");
			   	    	     			       } 
									 else { parser.code.append("		; explicit_constructor_invocation_SUPER\n");
										  ListIterator l = e2.list.listIterator();
										  while (l.hasNext()) { Exp e = (Exp)l.next();
											    			if(e.locT.contains("*")) if(e.locN.endsWith("&")) e.locN = e.locN.replace('&', ' ').trim(); 
											    				     			 else if(e.type.isArray()) { String t = ((Array)e.type).getBase().getCode()+"*";
																				   		     parser.code.append("	"+Tmp.nv()+" = bitcast "+e.locT+" "+e.locN+" to "+t+"\n");
 	    																			   		     e.locT = t;
																				    		     e.locN = Tmp.lv();
																    			}
																    			else if(!e.locT.startsWith("i8* getelementptr")) { parser.code.append("	"+Tmp.nv()+" = load "+e.locT+" "+e.locN+"\n");
																			         				     	      		e.locT = e.locT.replaceFirst("\\*", "");
																								     	      		e.locN = Tmp.lv();
											    								     }
										  }
			          	     				 	  if(((Constructor)t1).getDomain() != e2.type) { parser.sem_error(""+e2.type, "INCOMPATIBLE ARGUMENT IN CONSTRUCTOR INVOCATION "+sup);
				    					 				  		     	    		 RESULT = new Exp(Type.errortype(), "", "");
			   	  	   	    		     		  }
					   	    		              else { parser.code.append("	"+Tmp.nv()+" = bitcast %struct."+c.getName()+"* %this to %struct."+sup+"*\n");
											   parser.code.append("	call void @"+sup+"("+"%struct."+sup+"* "+Tmp.lv());
										     	   l = e2.list.listIterator();
										     	   while(l.hasNext()) { Exp pe = (Exp)l.next();
											    		 	 	parser.code.append(", "+pe.locT+" "+pe.locN);
										     	   }
										     	   parser.code.append(")\n");
											   RESULT = new Exp(((Constructor)t1).getRange(), "%struct."+sup+"*", Tmp.lv());
									    	  }
			 	    		     		      }
			   			           }
						    }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("explicit_constructor_invocation",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // explicit_constructor_invocation ::= THIS LPAREN argument_list_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("explicit_constructor_invocation",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // M2 ::= 
            {
              Object RESULT =null;
		 System.out.println(" BLOCK ENTRY");
			   if(parser.first) Env.push(); 
			   if(parser.second) { Env.next();
						     ListIterator l = Env.getVars().listIterator();
						     if(l.hasNext()) parser.code.append("		; M2\n");
						     while(l.hasNext()) { String p = (String)l.next();
										  Symb s = Env.get(p);
			   			     				  Type t = s.getType();						     				 
										  String tc = s.getType().getCode();										  
						     				  parser.code.append("	%"+p+" = alloca "+tc+"\n");						     				  
										  s.putLocT(tc+"*");
										  s.putLocN("%"+p);
						     }
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // constructor_body ::= LBRACE M3 error RBRACE 
            {
              Object RESULT =null;
		 parser.report_error("block","WRONG");
			   System.out.println(" CONSTRUCTOR EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor_body",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // constructor_body ::= LBRACE M3 block_statements_opt RBRACE 
            {
              Object RESULT =null;
		 System.out.println(" CONSTRUCTOR EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor_body",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // constructor_body ::= LBRACE M3 explicit_constructor_invocation block_statements_opt RBRACE 
            {
              Object RESULT =null;
		 System.out.println(" CONSTRUCTOR EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor_body",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // constructor_declarator ::= modifiers_opt IDENTIFIER NT$10 LPAREN formal_parameter_list_opt RPAREN 
            {
              Type RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList pL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.first) { Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(Type.constructor(pL.type, Type.reference(Type.getName(n))), c, m.booleanValue());
			   			    else { if(m.booleanValue()) parser.warning(n, "PUBLIC CONSTRUCTOR DECLARED IN PRIVATE CLASS");
				    		           s = new Symb(Type.constructor(pL.type, Type.reference(Type.getName(n))), c, false);
			   			    }	
			   			    Env.putSymb(n, s);
			   }
			   if(parser.second) { Symb msymb = Env.get(n);
						     Constructor c = (Constructor)msymb.getType();
						     Constructor.putCurrent(n, c);
						     Type t2 = c.getRange();
						     String ptrt = "%struct."+n+"*";
						     parser.code.append(ptrt+" %this");
						     ListIterator l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
									        Symb s = Env.get(p);
						                       	  Type t = s.getType();
									        if(t.isArray()) { String tc = ((Array)t).getBase().getCode()+"*";
												        parser.code.append(", "+tc+" "+s.getLocN());
													  s.putLocT(tc);
									        }
									        else parser.code.append(", "+s.getLoc());
						     } 
						     parser.code.append(") {\nentry:\n");
						     l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
										  Symb s = Env.get(p);
										  Type t = s.getType();
			   			     				  String tc;
										  if(t.isArray()) tc = s.getLocT();
										  else tc = t.getCode();
						     				  parser.code.append("	%"+p+"_addr = alloca "+tc+"\n");
						     				  parser.code.append("	store "+s.getLoc()+", "+tc+"* %"+p+"_addr\n");
										  s.putLocT(tc+"*");
										  s.putLocN("%"+p+"_addr");
						     }
						     RESULT = t2;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor_declarator",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$10 ::= 
            {
              Type RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(parser.first) { if (!Env.put(n, null)) parser.sem_error(n,"DUPLICATE NAME");
						    else { Name c = Name.getCurrentClass();
			   			    	     String cname = c.getName();
						    	     if (!n.equals(cname)) parser.sem_error(n+", "+cname,"CONSTRUCTOR NAME DIFFERENT FROM CLASS NAME");
						    }
						    System.out.println(" CONSTRUCTOR ENTRY: "+n);
		 				    Env.push();
			   }
			   if(parser.second) { System.out.println(" CONSTRUCTOR ENTRY: "+n);
						     Env.next();
						     Symb msymb = Env.get(n);
						     Constructor c = (Constructor)msymb.getType();
						     parser.code.append("		; constructor_declarator\n");
						     parser.code.append("define "+Type.voidtype().getCode()+" @"+n+"(");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",114, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // constructor_declaration ::= constructor_declarator constructor_body 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) { parser.code.append("		; constructor_declaration\n");
					       parser.code.append("	br label %return\n");
					       parser.code.append("return:\n");
					       parser.code.append("	ret void\n");
					       parser.code.append("}\n\n");
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor_declaration",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // M3 ::= 
            {
              Object RESULT =null;
		 if(parser.second) { ListIterator l = Env.getVars().listIterator();
						     if(l.hasNext())parser.code.append("		; M3\n");
						     while(l.hasNext()) { String p = (String)l.next();
										  Symb s = Env.get(p);
			   			     				  Type t = s.getType();
										  if(!t.isArray()) { String tc = s.getType().getCode();										  
						     				  			   parser.code.append("	%"+p+" = alloca "+tc+"\n");						     				  
										  			   s.putLocT(tc+"*");
										  			   s.putLocN("%"+p);
										  }
						     }
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // method_body ::= SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println(" METHOD EXIT");
			   if(parser.first) Env.pop();
			   if(parser.second) Env.next(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_body",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // method_body ::= LBRACE M3 error RBRACE 
            {
              Object RESULT =null;
		 parser.report_error("block","WRONG");
			   System.out.println(" METHOD EXIT");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_body",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // method_body ::= LBRACE M3 block_statements_opt RBRACE 
            {
              Object RESULT =null;
		 System.out.println(" METHOD EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_body",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // formal_parameter ::= type variable_declarator_id 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.first) Env.remVar(n);
			   RESULT = n; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // formal_parameter_list ::= error NT$9 formal_parameter 
            {
              ParamList RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (ParamList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$9 ::= 
            {
              ParamList RESULT =null;
 parser.report_error("formal_parameter_list","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",113, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // formal_parameter_list ::= formal_parameter_list COMMA formal_parameter 
            {
              ParamList RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamList pL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pL.list.add(n);
			   pL.type = Type.product(pL.type, Env.get(n).getType());
			   RESULT = pL; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // formal_parameter_list ::= formal_parameter 
            {
              ParamList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List l = new ArrayList();
			   l.add(n);
			   RESULT = new ParamList(Env.get(n).getType(), l); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // formal_parameter_list_opt ::= formal_parameter_list 
            {
              ParamList RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList pL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list_opt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // formal_parameter_list_opt ::= 
            {
              ParamList RESULT =null;
		 RESULT = new ParamList(Type.voidtype(), new ArrayList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list_opt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // method_header ::= error NT$8 LPAREN formal_parameter_list_opt RPAREN 
            {
              Type RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$8 ::= 
            {
              Type RESULT =null;
 parser.report_error("method_header","WRONG");
			   Env.push();
 			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // method_header ::= modifiers_opt VOID IDENTIFIER NT$7 LPAREN formal_parameter_list_opt RPAREN 
            {
              Type RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList pL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.first) { Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(Type.method(pL.type, Type.voidtype()), c, m.booleanValue());
			   			    else { if(m.booleanValue()) parser.warning(n, "PUBLIC METHOD DECLARED IN PRIVATE CLASS");
				    		           s = new Symb(Type.method(pL.type, Type.voidtype()), c, false);
			   			    }
			   			    Env.putSymb(n, s);
			   }
			   if(parser.second) { Symb msymb = Env.get(n);
						     Method.putCurrent(n, (Method)msymb.getType());
						     String ptrt = "%struct."+Name.getCurrentClass().getName()+"*";
						     if(!n.equals("main")) parser.code.append(ptrt+" %this");
						     ListIterator l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
									        Symb s = Env.get(p);
						                       	  Type t = s.getType();
									        if(t.isArray()) { String tc = ((Array)t).getBase().getCode()+"*";
												        parser.code.append(", "+tc+" "+s.getLocN());
													  s.putLocT(tc);
									        }
									        else parser.code.append(", "+s.getLoc());
						     }  
						     parser.code.append(") {\nentry:\n");
						     l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
										  Symb s = Env.get(p);
										  Type t = s.getType();
			   			     				  String tc;
										  if(t.isArray()) tc = s.getLocT();
										  else tc = t.getCode();
						     				  parser.code.append("	%"+p+"_addr = alloca "+tc+"\n");
						     				  parser.code.append("	store "+s.getLoc()+", "+tc+"* %"+p+"_addr\n");
										  s.putLocT(tc+"*");
										  s.putLocN("%"+p+"_addr");
						     }
						     RESULT = Type.voidtype();
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$7 ::= 
            {
              Type RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(parser.first) { if (!Env.put(n, null)) parser.sem_error(n,"DUPLICATE NAME");
						    System.out.println(" METHOD ENTRY: "+n);
		 				    Env.push();
			   }
			   if(parser.second) { System.out.println(" METHOD ENTRY: "+n);
						     Env.next();
						     parser.code.append("		; method_header\n");
						     if(n.equals("main")) parser.code.append("define void @main(");
					           else parser.code.append("define "+Type.voidtype().getCode()+" @"+Name.getCurrentClass().getName()+"_"+n+"(");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",111, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // method_header ::= modifiers_opt type IDENTIFIER NT$6 LPAREN formal_parameter_list_opt RPAREN 
            {
              Type RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList pL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.first) { Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(Type.method(pL.type, t1), c, m.booleanValue());
			   			    else { if(m.booleanValue()) parser.warning(n, "PUBLIC METHOD DECLARED IN PRIVATE CLASS");
				    		           s = new Symb(Type.method(pL.type, t1), c, false);
			   			    }
			   			    Env.putSymb(n, s); 
			   }
			   if(parser.second) { Name c = Name.getCurrentClass();
						     Symb msymb = Env.get(n, c.getEnv());
						     Method.putCurrent(n, (Method)msymb.getType());
						     String ptrt = "%struct."+c.getName()+"*";
						     parser.code.append(ptrt+" %this");
						     ListIterator l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
									        Symb s = Env.get(p);
						                       	  Type t = s.getType();
									        if(t.isArray()) { String tc = ((Array)t).getBase().getCode()+"*";
												        parser.code.append(", "+tc+" "+s.getLocN());
													  s.putLocT(tc);
									        }
									        else parser.code.append(", "+s.getLoc());
						     } 
						     parser.code.append(") {\nentry:\n");
						     l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
										  Symb s = Env.get(p);
										  Type t = s.getType();
			   			     				  String tc;
										  if(t.isArray()) tc = s.getLocT();
										  else tc = t.getCode();
						     				  parser.code.append("	%"+p+"_addr = alloca "+tc+"\n");
						     				  parser.code.append("	store "+s.getLoc()+", "+tc+"* %"+p+"_addr\n");
										  s.putLocT(tc+"*");
										  s.putLocN("%"+p+"_addr");
						     }
						     parser.code.append("	%retval = alloca "+t1.getCode()+"\n");
						     parser.code.append("	%tmp = alloca "+t1.getCode()+"\n");
						     RESULT = t1;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$6 ::= 
            {
              Type RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(parser.first) { if (!Env.put(n, null)) parser.sem_error(n,"DUPLICATE NAME");
						    System.out.println(" METHOD ENTRY: "+n);
		 			          Env.push();
			   }
			   if(parser.second) { System.out.println(" METHOD ENTRY: "+n);
						     Env.next();
						     parser.code.append("		; method_header\n");
						     parser.code.append("define "+t1.getCode()+" @"+Name.getCurrentClass().getName()+"_"+n+"(");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // method_declaration ::= method_header method_body 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) { parser.code.append("		; method_declaration\n");
						     parser.code.append("	br label %return\n");
						     parser.code.append("return:\n");
						     if(t == Type.voidtype()) parser.code.append("	ret void\n"); 
						     else { parser.code.append("	"+Tmp.nv()+" = load "+t.getCode()+"* %retval\n");
						     	    parser.code.append("	ret "+t.getCode()+" "+Tmp.lv()+"\n");
						     }
						     parser.code.append("}\n\n");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_declaration",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variable_declarator_id ::= variable_declarator_id LBRACK RBRACK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator_id",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variable_declarator_id ::= IDENTIFIER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.first) { Boolean m = (Boolean)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			   			    boolean mod = m == null ? false: m.booleanValue();	
			  			    Type t = (Type)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			   			    Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(t, c, mod, t.getCode(), "%"+n);
			   			    else { if(mod) parser.warning(n, "PUBLIC FIELD DECLARED IN PRIVATE CLASS");
				    			     s = new Symb(t, c, false, t.getCode(), "%"+n);
			   			    }
			   			    if (!Env.putVar(n, s)) parser.sem_error(n,"DUPLICATE NAME");						    	
			   }
			   RESULT = n;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator_id",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // M1 ::= 
            {
              Type RESULT =null;
		 RESULT = (Type)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).value; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable_declarators ::= error NT$5 COMMA variable_declarator_id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarators",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$5 ::= 
            {
              Object RESULT =null;
 parser.report_error("variable_declarator_id","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variable_declarators ::= variable_declarators COMMA M1 variable_declarator_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarators",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variable_declarators ::= variable_declarator_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarators",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assign_opt ::= EQ assignment_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_opt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assign_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_opt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // field_declaration ::= modifiers_opt type error NT$4 method_declaration 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.report_error("field_declaration","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // field_declaration ::= modifiers_opt type error NT$3 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.report_error("variable_declarators","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // field_declaration ::= modifiers_opt type variable_declarators SEMICOLON 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // class_member_declaration ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_member_declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // class_member_declaration ::= method_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_member_declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // class_member_declaration ::= field_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_member_declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // class_body_declaration ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // class_body_declaration ::= constructor_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // class_body_declaration ::= class_member_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // class_body_declarations ::= class_body_declarations class_body_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declarations",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // class_body_declarations ::= class_body_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declarations",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // class_body_declarations_opt ::= class_body_declarations 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declarations_opt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // class_body_declarations_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declarations_opt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // class_body ::= LBRACE class_body_declarations_opt RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // class_declaration ::= modifiers_opt CLASS IDENTIFIER EXTENDS IDENTIFIER NT$2 class_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String n2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("CLASS EXIT: "+n1);
			   if(parser.first) { List e_vars = new ArrayList();
						    Env e = Env.getCurrent();
						    e_vars.add(new Vars(e, e.getEvars()));
 						    Name cl = Env.get(n1).getOwner();
						    String sup = cl.getSuper();
						    while(sup != null){ cl = Env.get(sup).getOwner();
										e = cl.getEnv();
						    				e_vars.add(0, new Vars(e, e.getEvars()));
										sup = cl.getSuper();
						    }					    
					          ListIterator evl = e_vars.listIterator();
						    int n = 0;
						    String global = "%struct."+n1+" = type { ";
						    boolean first = true;
						    while(evl.hasNext()){ Vars ev = (Vars)evl.next();
										  ListIterator l = ev.vl.listIterator();										  
						    				  while(l.hasNext()){ String v = (String)l.next();
									    				    Symb s = Env.get(v, ev.e);
									    				    String c = s.getType().getCode();
									    				    s.putLocT(c + "*");
									    				    s.putLocN("getelementptr %struct."+n1+"* %this, i32 0, i32 "+n);
									    				    n++;
									    				    if(first) { global = global + c;
															    first = false;
													    }
													    else global = global + ", " + c;
										  }
						    }
						    global = global + " }";
						    Env.putGlobal(global, "struct");
						    Env.get(n1).putLocT(global.replace("%struct."+n1+" = ",""));
						    Env.pop();
						    Env.pop();
			   }
			   if(parser.second) { Env.next();
						     Env.next();
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$2 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println("CLASS ENTRY: "+n1);
			   if(parser.first) switch (Env.putClass(n1, m.booleanValue(),n2)){ case 1: parser.sem_error(n1,"DUPLICATE CLASS NAME");
							     								    break;
													        case 2: parser.sem_error(n2,"UNKNOWN CLASS");
					        }
  			   if(parser.second) { Env.next();
						     Env.next();
						     Name c = Env.get(n1).getOwner();
						     Name.putCurrentClass(c);
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // class_declaration ::= modifiers_opt CLASS IDENTIFIER NT$1 class_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("CLASS EXIT: "+n1);
			   if(parser.first) { Env e = Env.getCurrent();
						    List vars = e.getEvars();
					          ListIterator l = vars.listIterator();
						    int n = 0;
						    String global = "%struct."+n1+" = type { ";
						    boolean first = true;
						    while(l.hasNext()) { String v = (String)l.next();
									    	 Symb s = Env.get(v);
									   	 String c = s.getType().getCode();
									   	 s.putLocT(c + "*");
									  	 s.putLocN("getelementptr %struct."+n1+"* %this, i32 0, i32 "+n);
									   	 n++;
									    	 if(first) { global = global + c;
											       first = false;
									   	 }
									   	 else global = global + ", " + c;
						    }
						    global = global + " }";
						    Env.putGlobal(global, "struct");
						    Env.get(n1).putLocT(global.replace("%struct."+n1+" = ",""));	    				
						    Env.pop();
						  }
			   if(parser.second) Env.next();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$1 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println("CLASS ENTRY: "+n1);
			   if(parser.first) if (Env.putClass(n1, m.booleanValue()) != 0) parser.sem_error(n1,"DUPLICATE CLASS NAME");
 			   if(parser.second) { Env.next();
						     Name c = Env.get(n1).getOwner();
						     Name.putCurrentClass(c);
						     System.out.println("second");
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // class_declarations ::= error NT$0 class_declaration 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_declarations",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.report_error("class_declaration","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // class_declarations ::= class_declarations class_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_declarations",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // class_declarations ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_declarations",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // non_access_modifier_opt ::= VOLATILE 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // non_access_modifier_opt ::= TRANSIENT 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // non_access_modifier_opt ::= SYNCHRONIZED 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // non_access_modifier_opt ::= NATIVE 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // non_access_modifier_opt ::= FINAL 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // non_access_modifier_opt ::= ABSTRACT 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // non_access_modifier_opt ::= STATIC 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // non_access_modifier_opt ::= 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // access_modifier ::= PRIVATE 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_modifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // access_modifier ::= PROTECTED 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_modifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // access_modifier ::= PUBLIC 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_modifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // access_modifier ::= 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_modifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // modifiers_opt ::= access_modifier non_access_modifier_opt 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modifiers_opt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // name ::= name DOT IDENTIFIER 
            {
              Sname RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Symb s1 = sn.cs;
			   if(s1 == null) { parser.sem_error(sn.name, "UNKNOWN NAME");
						  RESULT = new Sname(n, null, null);
			   }
			   else { Type t1 = s1.getType();
				    if(!t1.isReference()) { parser.sem_error(""+t1, "NOT A REFERENCE");
								    RESULT = new Sname(n, null, null);
				    }
				    else { Type r = ((Reference)t1).getReferred();
					     if(!r.isName()) { parser.sem_error(""+r, "NOT A CLASS");
								     RESULT = new Sname(n, null, null);
					     }
					     else { Symb s2 = Env.get(n, ((Name)r).getEnv()); 
			   			     	if(s2 == null) { parser.sem_error(n,"UNKNOWN NAME"); 
									     RESULT = new Sname(n, null, null);
							}
			   			     	else if (!s2.isPublic() && !Name.getCurrentClass().isSubclass(s2.getOwner())) { parser.sem_error(n, "ILLEGAL ACCESS TO PRIVATE ATTRIBUTE");
				    					 				     			     	      		  RESULT = new Sname(n, null, null);
						  	     }
						  	     else { if(parser.second) { parser.code.append("		; name\n");
												  parser.code.append("	"+Tmp.nv()+" = load "+s1.getLoc()+"\n");
												  parser.objLoc = Tmp.lv();
									}
									RESULT = new Sname(n, s2, Env.get(n, Env.getRoot()));
							     }
					     }								
				    }
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // name ::= IDENTIFIER 
            {
              Sname RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sname(n, Env.get(n), Env.get(n, Env.getRoot())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // array_type ::= name dims 
            {
              Type RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Symb s = sn.cs; 
			   if(s == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				    		 RESULT = Type.errortype();
			   } 
			   else RESULT = Type.array(0, Type.reference(s.getType()));
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // array_type ::= primitive_type dims 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Type.array(0, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // reference_type ::= array_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reference_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // reference_type ::= name 
            {
              Type RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Symb s = sn.rs; 
			   if(s == null) RESULT = Type.reference(Type.forwardName(sn.name, parser.s.yytext())); 
			   else RESULT = Type.reference(s.getType());
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reference_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // numeric_type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = Type.floating(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // numeric_type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = Type.character(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // numeric_type ::= INT 
            {
              Type RESULT =null;
		 RESULT = Type.integer(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // primitive_type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = Type.bool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // primitive_type ::= numeric_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= reference_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= primitive_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literal ::= NULL_LITERAL 
            {
              Exp RESULT =null;
		 
			   RESULT = new Exp(Type.reference(Type.voidtype()), "", "null"); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literal ::= STRING_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String l = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   if(parser.first) Env.putGlobal(l , Tmp.ns());
			   if(parser.second) { int i = l.length() + 1;
			   			     String ary = "["+i+" x i8]";
			   			     String tmp = Env.getGlobal(l);
			   			     String loc = "i8* getelementptr ("+ary+"* "+tmp+", i32 0, i32 0)";
			   			     Symb s = Env.get("String", Env.getRoot());
			   			     if(s == null) RESULT = new Exp(Type.reference(Type.forwardName("String", parser.s.yytext())), loc, ""); 
			   			     else RESULT = new Exp(Type.reference(s.getType()), loc, ""); 
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literal ::= CHARACTER_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Character l = (java.lang.Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   RESULT = new Exp(Type.character(), "i8", ""+l); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // literal ::= BOOLEAN_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Boolean l = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   RESULT = new Exp(Type.bool(), "i1", ""+l); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // literal ::= FLOATING_POINT_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   RESULT = new Exp(Type.floating(), "double", ""+l); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // literal ::= INTEGER_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   RESULT = new Exp(Type.integer(), "i32", ""+l); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= class_declarations 
            {
              Object RESULT =null;
		 Hashtable forwards;
			   if(parser.first) { forwards = Name.ForwardHashtable();
						    int err = forwards.size();
						    if(err > 0) { parser.errors = parser.errors + err;
     						    	     		System.err.println("Error : Semantic error");
      					    	     		System.err.println("  ==> CANNOT FIND CLASSES ("+err+"): "+forwards+"\n");
						    }
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

