
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 16 17:13:26 BRT 2015
//----------------------------------------------------

package jflexcup;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import symtab.*;
import type.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 16 17:13:26 BRT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\002\002\004\000\002\112\005\000\002\055" +
    "\003\000\002\055\002\000\002\113\003\000\002\113\002" +
    "\000\002\114\003\000\002\114\002\000\002\115\003\000" +
    "\002\115\004\000\002\116\003\000\002\116\004\000\002" +
    "\056\005\000\002\117\003\000\002\117\003\000\002\121" +
    "\005\000\002\122\007\000\002\120\003\000\002\120\003" +
    "\000\002\120\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\003\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\004\000\002\010\004\000\002\011\003\000\002" +
    "\011\005\000\002\033\004\000\002\035\002\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\036\002" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\176\002\000\002\014\007\000\002\177" +
    "\002\000\002\014\011\000\002\016\004\000\002\017\002" +
    "\000\002\017\003\000\002\020\004\000\002\022\002\000" +
    "\002\022\003\000\002\023\003\000\002\023\005\000\002" +
    "\024\005\000\002\027\002\000\002\027\003\000\002\026" +
    "\003\000\002\026\004\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\010\000\002\031\003\000\002" +
    "\031\003\000\002\037\006\000\002\200\002\000\002\037" +
    "\007\000\002\201\002\000\002\037\007\000\002\013\002" +
    "\000\002\013\004\000\002\040\003\000\002\040\006\000" +
    "\002\202\002\000\002\040\006\000\002\012\002\000\002" +
    "\041\003\000\002\041\005\000\002\042\004\000\002\203" +
    "\002\000\002\044\011\000\002\204\002\000\002\044\011" +
    "\000\002\205\002\000\002\044\007\000\002\045\002\000" +
    "\002\045\003\000\002\046\003\000\002\046\005\000\002" +
    "\206\002\000\002\046\005\000\002\047\004\000\002\047" +
    "\005\000\002\050\006\000\002\050\006\000\002\050\003" +
    "\000\002\043\002\000\002\051\004\000\002\207\002\000" +
    "\002\052\010\000\002\053\007\000\002\053\006\000\002" +
    "\053\006\000\002\060\002\000\002\054\007\000\002\054" +
    "\007\000\002\054\011\000\002\054\011\000\002\057\006" +
    "\000\002\210\002\000\002\057\007\000\002\061\002\000" +
    "\002\061\003\000\002\062\003\000\002\062\004\000\002" +
    "\211\002\000\002\062\005\000\002\063\003\000\002\063" +
    "\003\000\002\064\006\000\002\212\002\000\002\064\006" +
    "\000\002\066\005\000\002\065\004\000\002\065\005\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\003\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\071\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\072\003\000\002\073\004\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\074\003\000\002\074" +
    "\003\000\002\074\003\000\002\074\003\000\002\136\002" +
    "\000\002\137\002\000\002\140\002\000\002\141\002\000" +
    "\002\075\011\000\002\213\002\000\002\075\010\000\002" +
    "\076\014\000\002\214\002\000\002\076\014\000\002\077" +
    "\014\000\002\103\015\000\002\104\015\000\002\105\002" +
    "\000\002\105\003\000\002\106\003\000\002\106\003\000" +
    "\002\107\002\000\002\107\003\000\002\110\003\000\002" +
    "\111\003\000\002\111\005\000\002\100\011\000\002\215" +
    "\002\000\002\100\010\000\002\101\011\000\002\150\002" +
    "\000\002\102\006\000\002\124\003\000\002\124\003\000" +
    "\002\145\002\000\002\125\003\000\002\125\003\000\002" +
    "\125\006\000\002\125\003\000\002\125\003\000\002\125" +
    "\003\000\002\125\003\000\002\125\005\000\002\125\005" +
    "\000\002\125\005\000\002\125\005\000\002\125\005\000" +
    "\002\216\002\000\002\125\007\000\002\217\002\000\002" +
    "\125\006\000\002\220\002\000\002\126\011\000\002\025" +
    "\002\000\002\025\003\000\002\127\002\000\002\127\003" +
    "\000\002\130\003\000\002\130\005\000\002\221\002\000" +
    "\002\130\005\000\002\131\006\000\002\131\006\000\002" +
    "\132\003\000\002\132\004\000\002\222\002\000\002\132" +
    "\005\000\002\133\005\000\002\134\002\000\002\134\003" +
    "\000\002\135\004\000\002\135\005\000\002\151\005\000" +
    "\002\151\005\000\002\152\006\000\002\152\010\000\002" +
    "\152\010\000\002\153\006\000\002\153\006\000\002\154" +
    "\003\000\002\154\003\000\002\154\003\000\002\154\003" +
    "\000\002\154\004\000\002\144\002\000\002\174\004\000" +
    "\002\175\004\000\002\155\003\000\002\155\003\000\002" +
    "\155\003\000\002\155\005\000\002\155\004\000\002\155" +
    "\004\000\002\172\004\000\002\173\004\000\002\156\003" +
    "\000\002\156\005\000\002\156\005\000\002\156\005\000" +
    "\002\223\002\000\002\156\006\000\002\224\002\000\002" +
    "\156\006\000\002\225\002\000\002\156\006\000\002\157" +
    "\003\000\002\157\005\000\002\157\005\000\002\160\003" +
    "\000\002\160\005\000\002\160\005\000\002\160\005\000" +
    "\002\160\005\000\002\226\002\000\002\160\006\000\002" +
    "\227\002\000\002\160\006\000\002\230\002\000\002\160" +
    "\006\000\002\231\002\000\002\160\006\000\002\161\003" +
    "\000\002\161\005\000\002\161\005\000\002\232\002\000" +
    "\002\161\006\000\002\233\002\000\002\161\006\000\002" +
    "\142\002\000\002\162\003\000\002\162\006\000\002\234" +
    "\002\000\002\162\006\000\002\143\002\000\002\163\003" +
    "\000\002\163\006\000\002\235\002\000\002\163\006\000" +
    "\002\146\002\000\002\147\002\000\002\164\003\000\002" +
    "\164\011\000\002\236\002\000\002\164\010\000\002\165" +
    "\003\000\002\165\003\000\002\166\006\000\002\237\002" +
    "\000\002\166\006\000\002\167\003\000\002\167\003\000" +
    "\002\167\003\000\002\170\002\000\002\170\003\000\002" +
    "\171\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0238\000\040\002\ufffe\013\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\037\ufffe\074\005\075\ufffe\001\002\000\036\002" +
    "\ufffc\013\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\037\ufffc\075" +
    "\017\001\002\000\004\105\012\001\002\000\036\002\uffff" +
    "\013\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031" +
    "\uffff\032\uffff\033\uffff\034\uffff\035\uffff\037\uffff\075\uffff" +
    "\001\002\000\004\002\010\001\002\000\004\002\001\001" +
    "\002\000\006\012\014\013\013\001\002\000\070\003\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\053\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065" +
    "\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\105\uffdc" +
    "\001\002\000\036\002\ufff5\013\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5" +
    "\035\ufff5\037\ufff5\075\ufff5\001\002\000\004\105\015\001" +
    "\002\000\070\003\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\053" +
    "\uffdb\054\uffdb\055\uffdb\056\uffdb\060\uffdb\061\uffdb\062\uffdb" +
    "\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071" +
    "\uffdb\072\uffdb\105\uffdb\001\002\000\036\002\ufff3\013\ufff3" +
    "\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\037\ufff3\075\ufff3\001\002" +
    "\000\004\105\012\001\002\000\036\002\ufff9\013\ufff9\024" +
    "\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9" +
    "\033\ufff9\034\ufff9\035\ufff9\037\ufff9\075\ufff9\001\002\000" +
    "\036\002\ufffd\013\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\037" +
    "\ufffd\075\017\001\002\000\034\002\ufffa\013\031\024\025" +
    "\025\026\026\030\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\037\uffd9\001\002\000\036\002\ufff4" +
    "\013\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\037\ufff4\075\ufff4" +
    "\001\002\000\034\002\ufffb\013\031\024\025\025\026\026" +
    "\030\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\037\uffd9\001\002\000\036\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\037\uffd8\041\uffd8\105\uffd8\001\002\000" +
    "\036\004\uffd7\005\uffd7\006\uffd7\007\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\037\uffd7\041" +
    "\uffd7\105\uffd7\001\002\000\034\002\ufff7\013\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\035\ufff7\037\ufff7\001\002\000\036\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\037\uffd6\041\uffd6\105\uffd6" +
    "\001\002\000\034\002\uffee\013\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\037\uffee\001\002\000\034\002\uffef\013\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\037\uffef\001\002\000\004\002" +
    "\000\001\002\000\036\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\027\u022e\030\u0232\031\u0233\032\u0231\033\u022f\034\u0230\035" +
    "\u022c\037\uffd5\041\uffd5\105\uffd5\001\002\000\034\002\ufff0" +
    "\013\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0\001\002" +
    "\000\004\037\037\001\002\000\004\105\040\001\002\000" +
    "\006\016\uffcd\040\041\001\002\000\004\105\u0229\001\002" +
    "\000\004\016\043\001\002\000\054\003\057\004\uffd9\005" +
    "\uffd9\006\uffd9\007\uffd9\013\046\016\052\017\uffc0\024\025" +
    "\025\026\026\030\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\037\uffd9\041\uffd9\105\uffd9\001\002" +
    "\000\034\002\uffcc\013\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\037\uffcc\001\002\000\054\003\uffba\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\013\uffba\016\uffba\017\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034" +
    "\uffba\035\uffba\037\uffba\041\uffba\105\uffba\001\002\000\054" +
    "\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\013\uffb4\016" +
    "\uffb4\017\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\037\uffb4\041" +
    "\uffb4\105\uffb4\001\002\000\054\003\uffb7\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\013\uffb7\016\uffb7\017\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\037\uffb7\041\uffb7\105\uffb7\001\002\000" +
    "\004\016\u0208\001\002\000\054\003\uffb9\004\uffb9\005\uffb9" +
    "\006\uffb9\007\uffb9\013\uffb9\016\uffb9\017\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\037\uffb9\041\uffb9\105\uffb9\001\002\000" +
    "\070\003\uff8c\004\uff8c\005\uff8c\006\uff8c\007\uff8c\013\uff8c" +
    "\016\uff8c\017\uff8c\021\uff8c\041\uff8c\042\uff8c\043\uff8c\044" +
    "\uff8c\045\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\054\uff8c" +
    "\055\uff8c\100\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105" +
    "\uff8c\106\uff8c\001\002\000\006\013\213\016\212\001\002" +
    "\000\054\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\013" +
    "\uffbb\016\uffbb\017\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\037" +
    "\uffbb\041\uffbb\105\uffbb\001\002\000\004\017\210\001\002" +
    "\000\054\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\013" +
    "\uffbe\016\uffbe\017\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\037" +
    "\uffbe\041\uffbe\105\uffbe\001\002\000\004\021\uffa0\001\002" +
    "\000\054\003\057\004\uffd9\005\uffd9\006\uffd9\007\uffd9\013" +
    "\046\016\052\017\uffbf\024\025\025\026\026\030\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037" +
    "\uffd9\041\uffd9\105\uffd9\001\002\000\020\004\067\005\065" +
    "\006\100\007\077\037\101\041\070\105\075\001\002\000" +
    "\054\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\013\uffb8" +
    "\016\uffb8\017\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8" +
    "\041\uffb8\105\uffb8\001\002\000\054\003\uffb5\004\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\013\uffb5\016\uffb5\017\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\037\uffb5\041\uffb5\105\uffb5\001\002" +
    "\000\054\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\013" +
    "\uffbc\016\uffbc\017\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\037" +
    "\uffbc\041\uffbc\105\uffbc\001\002\000\012\003\uffe3\010\uffe3" +
    "\012\uffe3\105\uffe3\001\002\000\012\003\uffe0\010\170\012" +
    "\014\105\uffe0\001\002\000\012\003\uffe4\010\uffe4\012\uffe4" +
    "\105\uffe4\001\002\000\004\105\175\001\002\000\010\003" +
    "\uffe7\010\170\105\uffe7\001\002\000\012\003\uffe5\010\uffe5" +
    "\012\uffe5\105\uffe5\001\002\000\006\003\143\105\144\001" +
    "\002\000\006\003\uffe6\105\uffe6\001\002\000\014\003\uffdc" +
    "\010\uffdc\012\uffdc\021\uff91\105\uffdc\001\002\000\006\003" +
    "\uffdf\105\uffdf\001\002\000\012\003\uffe1\010\uffe1\012\uffe1" +
    "\105\uffe1\001\002\000\012\003\uffe2\010\uffe2\012\uffe2\105" +
    "\uffe2\001\002\000\004\105\102\001\002\000\010\016\uffc8" +
    "\040\103\076\uffc8\001\002\000\002\001\002\000\006\016" +
    "\uffc5\076\107\001\002\000\006\016\uffc7\076\uffc7\001\002" +
    "\000\004\016\043\001\002\000\002\001\002\000\004\016" +
    "\uffc4\001\002\000\006\015\113\016\uffc6\001\002\000\006" +
    "\015\uffc3\016\uffc3\001\002\000\002\001\002\000\006\015" +
    "\uffc2\016\uffc2\001\002\000\054\003\uffb6\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\013\uffb6\016\uffb6\017\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\037\uffb6\041\uffb6\105\uffb6\001\002\000" +
    "\006\016\uffc9\076\uffc9\001\002\000\004\021\120\001\002" +
    "\000\022\003\125\004\067\005\065\006\100\007\077\022" +
    "\uff9e\031\126\105\012\001\002\000\004\022\141\001\002" +
    "\000\006\015\137\022\uff9d\001\002\000\006\015\uff9c\022" +
    "\uff9c\001\002\000\004\105\131\001\002\000\016\004\uff9a" +
    "\005\uff9a\006\uff9a\007\uff9a\031\uff9a\105\uff9a\001\002\000" +
    "\014\004\067\005\065\006\100\007\077\105\012\001\002" +
    "\000\004\105\131\001\002\000\010\010\132\015\uff97\022" +
    "\uff97\001\002\000\014\010\uffa7\013\uffa7\015\uffa7\020\uffa7" +
    "\022\uffa7\001\002\000\004\011\133\001\002\000\014\010" +
    "\uffa6\013\uffa6\015\uffa6\020\uffa6\022\uffa6\001\002\000\016" +
    "\004\067\005\065\006\100\007\077\031\126\105\012\001" +
    "\002\000\006\015\uff99\022\uff99\001\002\000\010\010\132" +
    "\015\uff98\022\uff98\001\002\000\016\004\067\005\065\006" +
    "\100\007\077\031\126\105\012\001\002\000\006\015\uff9b" +
    "\022\uff9b\001\002\000\004\016\uff90\001\002\000\012\010" +
    "\132\013\uffac\015\uffac\020\uffac\001\002\000\050\003\uffb0" +
    "\004\uffb0\005\uffb0\006\uffb0\007\uffb0\013\uffb2\015\uffaa\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\041\uffb0\105\uffb0\001\002\000" +
    "\012\010\uffa7\013\uffa7\015\uffa7\021\uffa4\001\002\000\006" +
    "\013\147\015\146\001\002\000\004\105\uffa8\001\002\000" +
    "\054\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\013\uffb3" +
    "\016\uffb3\017\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\037\uffb3" +
    "\041\uffb3\105\uffb3\001\002\000\004\105\131\001\002\000" +
    "\012\010\132\013\uffab\015\uffab\020\uffab\001\002\000\004" +
    "\021\153\001\002\000\022\003\125\004\067\005\065\006" +
    "\100\007\077\022\uff9e\031\126\105\012\001\002\000\004" +
    "\022\155\001\002\000\006\013\uffa3\016\uffa3\001\002\000" +
    "\044\003\057\004\uffd9\005\uffd9\006\uffd9\007\uffd9\024\025" +
    "\025\026\026\030\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\041\uffd9\105\uffd9\001\002\000\004" +
    "\013\163\001\002\000\004\015\161\001\002\000\004\105" +
    "\131\001\002\000\012\010\132\013\uffa9\015\uffa9\020\uffa9" +
    "\001\002\000\054\003\uffb1\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\013\uffb1\016\uffb1\017\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\037\uffb1\041\uffb1\105\uffb1\001\002\000\016\004\067" +
    "\005\065\006\100\007\077\041\070\105\012\001\002\000" +
    "\054\003\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\013\uffaf" +
    "\016\uffaf\017\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\037\uffaf" +
    "\041\uffaf\105\uffaf\001\002\000\004\105\167\001\002\000" +
    "\004\021\uffa4\001\002\000\004\011\174\001\002\000\012" +
    "\003\uffde\010\172\012\uffde\105\uffde\001\002\000\004\011" +
    "\173\001\002\000\064\003\uff1d\010\uff1d\011\uff1d\012\uff1d" +
    "\013\uff1d\014\uff1d\015\uff1d\022\uff1d\023\uff1d\053\uff1d\054" +
    "\uff1d\055\uff1d\056\uff1d\060\uff1d\061\uff1d\062\uff1d\063\uff1d" +
    "\064\uff1d\065\uff1d\066\uff1d\067\uff1d\070\uff1d\071\uff1d\072" +
    "\uff1d\105\uff1d\001\002\000\064\003\uff1e\010\uff1e\011\uff1e" +
    "\012\uff1e\013\uff1e\014\uff1e\015\uff1e\022\uff1e\023\uff1e\053" +
    "\uff1e\054\uff1e\055\uff1e\056\uff1e\060\uff1e\061\uff1e\062\uff1e" +
    "\063\uff1e\064\uff1e\065\uff1e\066\uff1e\067\uff1e\070\uff1e\071" +
    "\uff1e\072\uff1e\105\uff1e\001\002\000\004\021\uffa2\001\002" +
    "\000\004\021\177\001\002\000\022\003\125\004\067\005" +
    "\065\006\100\007\077\022\uff9e\031\126\105\012\001\002" +
    "\000\004\022\201\001\002\000\006\013\uffa1\016\uffa1\001" +
    "\002\000\012\003\uffdd\010\172\012\uffdd\105\uffdd\001\002" +
    "\000\054\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\013" +
    "\uffbd\016\uffbd\017\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\037" +
    "\uffbd\041\uffbd\105\uffbd\001\002\000\004\021\205\001\002" +
    "\000\022\003\125\004\067\005\065\006\100\007\077\022" +
    "\uff9e\031\126\105\012\001\002\000\004\022\207\001\002" +
    "\000\006\013\uff9f\016\uff9f\001\002\000\132\002\uffc1\003" +
    "\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1" +
    "\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\037\uffc1\041" +
    "\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\060\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070" +
    "\uffc1\071\uffc1\072\uffc1\105\uffc1\001\002\000\054\003\uffa5" +
    "\004\uffa5\005\uffa5\006\uffa5\007\uffa5\013\uffa5\016\uffa5\017" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\037\uffa5\041\uffa5\105" +
    "\uffa5\001\002\000\070\003\uff93\004\uff93\005\uff93\006\uff93" +
    "\007\uff93\013\uff93\016\uff93\017\uff93\021\uff93\041\uff93\042" +
    "\uff93\043\uff93\044\uff93\045\uff93\047\uff93\050\uff93\051\uff93" +
    "\052\uff93\054\uff93\055\uff93\100\uff93\101\uff93\102\uff93\103" +
    "\uff93\104\uff93\105\uff93\106\uff93\001\002\000\054\003\uff94" +
    "\004\uff94\005\uff94\006\uff94\007\uff94\013\uff94\016\uff94\017" +
    "\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94" +
    "\032\uff94\033\uff94\034\uff94\035\uff94\037\uff94\041\uff94\105" +
    "\uff94\001\002\000\070\003\255\004\067\005\065\006\100" +
    "\007\077\013\236\016\052\017\uff84\021\224\041\260\042" +
    "\245\043\253\044\276\045\244\047\267\050\231\051\251" +
    "\052\254\054\217\055\250\100\301\101\263\102\233\103" +
    "\235\104\220\105\012\106\243\001\002\000\004\013\u0201" +
    "\001\002\000\062\010\uff3d\011\uff3d\012\uff3d\013\uff3d\014" +
    "\uff3d\015\uff3d\020\ufece\022\uff3d\023\uff3d\053\uff3d\054\uff3d" +
    "\055\uff3d\056\uff3d\060\uff3d\061\uff3d\062\uff3d\063\uff3d\064" +
    "\uff3d\065\uff3d\066\uff3d\067\uff3d\070\uff3d\071\uff3d\072\uff3d" +
    "\001\002\000\060\003\357\004\067\005\065\006\100\007" +
    "\077\021\224\041\260\042\245\043\253\044\276\052\254" +
    "\053\322\054\217\055\250\056\314\057\316\100\301\101" +
    "\263\102\233\103\235\104\220\105\012\106\243\001\002" +
    "\000\060\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\022\uffe9\023\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9" +
    "\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066" +
    "\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\001\002\000\004" +
    "\020\u01fd\001\002\000\070\003\uff75\004\uff75\005\uff75\006" +
    "\uff75\007\uff75\013\uff75\016\uff75\017\uff75\021\uff75\041\uff75" +
    "\042\uff75\043\uff75\044\uff75\045\uff75\047\uff75\050\uff75\051" +
    "\uff75\052\uff75\054\uff75\055\uff75\100\uff75\101\uff75\102\uff75" +
    "\103\uff75\104\uff75\105\uff75\106\uff75\001\002\000\014\013" +
    "\uff64\015\uff64\022\uff64\054\uff13\055\uff13\001\002\000\060" +
    "\003\uff42\004\uff42\005\uff42\006\uff42\007\uff42\021\uff42\041" +
    "\uff42\042\uff42\043\uff42\044\uff42\052\uff42\053\uff42\054\uff42" +
    "\055\uff42\056\uff42\057\uff42\100\uff42\101\uff42\102\uff42\103" +
    "\uff42\104\uff42\105\uff42\106\uff42\001\002\000\010\013\uff65" +
    "\015\uff65\022\uff65\001\002\000\060\010\uff41\011\uff41\012" +
    "\uff41\013\uff41\014\uff41\015\uff41\022\uff41\023\uff41\053\uff41" +
    "\054\uff41\055\uff41\056\uff41\060\uff41\061\uff41\062\uff41\063" +
    "\uff41\064\uff41\065\uff41\066\uff41\067\uff41\070\uff41\071\uff41" +
    "\072\uff41\001\002\000\056\011\uff43\012\uff43\013\uff43\014" +
    "\uff43\015\uff43\022\uff43\023\uff43\053\uff43\054\uff43\055\uff43" +
    "\056\uff43\060\uff43\061\uff43\062\uff43\063\uff43\064\uff43\065" +
    "\uff43\066\uff43\067\uff43\070\uff43\071\uff43\072\uff43\001\002" +
    "\000\072\003\uff6d\004\uff6d\005\uff6d\006\uff6d\007\uff6d\013" +
    "\uff6d\016\uff6d\017\uff6d\021\uff6d\041\uff6d\042\uff6d\043\uff6d" +
    "\044\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052" +
    "\uff6d\054\uff6d\055\uff6d\100\uff6d\101\uff6d\102\uff6d\103\uff6d" +
    "\104\uff6d\105\uff6d\106\uff6d\001\002\000\004\021\u01ee\001" +
    "\002\000\070\003\uff72\004\uff72\005\uff72\006\uff72\007\uff72" +
    "\013\uff72\016\uff72\017\uff72\021\uff72\041\uff72\042\uff72\043" +
    "\uff72\044\uff72\045\uff72\047\uff72\050\uff72\051\uff72\052\uff72" +
    "\054\uff72\055\uff72\100\uff72\101\uff72\102\uff72\103\uff72\104" +
    "\uff72\105\uff72\106\uff72\001\002\000\060\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\022\uffeb\023\uffeb\053" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\060\uffeb\061\uffeb\062\uffeb" +
    "\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071" +
    "\uffeb\072\uffeb\001\002\000\022\003\uffe0\010\366\012\370" +
    "\020\ufecf\021\367\054\uff14\055\uff14\105\uffe0\001\002\000" +
    "\060\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\022\uffea\023\uffea\053\uffea\054\uffea\055\uffea\056\uffea\060" +
    "\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea" +
    "\067\uffea\070\uffea\071\uffea\072\uffea\001\002\000\072\003" +
    "\uff69\004\uff69\005\uff69\006\uff69\007\uff69\013\uff69\016\uff69" +
    "\017\uff69\021\uff69\041\uff69\042\uff69\043\uff69\044\uff69\045" +
    "\uff69\046\uff69\047\uff69\050\uff69\051\uff69\052\uff69\054\uff69" +
    "\055\uff69\100\uff69\101\uff69\102\uff69\103\uff69\104\uff69\105" +
    "\uff69\106\uff69\001\002\000\072\003\uff6c\004\uff6c\005\uff6c" +
    "\006\uff6c\007\uff6c\013\uff6c\016\uff6c\017\uff6c\021\uff6c\041" +
    "\uff6c\042\uff6c\043\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c" +
    "\050\uff6c\051\uff6c\052\uff6c\054\uff6c\055\uff6c\100\uff6c\101" +
    "\uff6c\102\uff6c\103\uff6c\104\uff6c\105\uff6c\106\uff6c\001\002" +
    "\000\010\003\uffdf\012\u014e\105\uffdf\001\002\000\010\013" +
    "\uff67\015\uff67\022\uff67\001\002\000\056\011\uff15\012\u01e9" +
    "\013\uff15\014\uff15\015\uff15\022\uff15\023\uff15\053\uff15\054" +
    "\uff15\055\uff15\056\uff15\060\uff15\061\uff15\062\uff15\063\uff15" +
    "\064\uff15\065\uff15\066\uff15\067\uff15\070\uff15\071\uff15\072" +
    "\uff15\001\002\000\060\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\022\uffe8\023\uffe8\053\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\001" +
    "\002\000\006\003\u018c\021\u018d\001\002\000\060\010\uff40" +
    "\011\uff40\012\uff40\013\uff40\014\uff40\015\uff40\022\uff40\023" +
    "\uff40\053\uff40\054\uff40\055\uff40\056\uff40\060\uff40\061\uff40" +
    "\062\uff40\063\uff40\064\uff40\065\uff40\066\uff40\067\uff40\070" +
    "\uff40\071\uff40\072\uff40\001\002\000\004\017\u018b\001\002" +
    "\000\070\003\uff7d\004\uff7d\005\uff7d\006\uff7d\007\uff7d\013" +
    "\uff7d\016\uff7d\017\uff7d\021\uff7d\041\uff7d\042\uff7d\043\uff7d" +
    "\044\uff7d\045\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\054" +
    "\uff7d\055\uff7d\100\uff7d\101\uff7d\102\uff7d\103\uff7d\104\uff7d" +
    "\105\uff7d\106\uff7d\001\002\000\060\003\357\004\067\005" +
    "\065\006\100\007\077\021\224\041\260\042\245\043\253" +
    "\044\276\052\254\053\322\054\217\055\250\056\314\057" +
    "\316\100\301\101\263\102\233\103\235\104\220\105\012" +
    "\106\243\001\002\000\062\003\uff46\004\uff46\005\uff46\006" +
    "\uff46\007\uff46\013\uff46\021\uff46\041\uff46\042\uff46\043\uff46" +
    "\044\uff46\052\uff46\053\uff46\054\uff46\055\uff46\056\uff46\057" +
    "\uff46\100\uff46\101\uff46\102\uff46\103\uff46\104\uff46\105\uff46" +
    "\106\uff46\001\002\000\014\013\uff63\015\uff63\022\uff63\054" +
    "\uff12\055\uff12\001\002\000\004\012\u0181\001\002\000\014" +
    "\004\067\005\065\006\100\007\077\105\012\001\002\000" +
    "\074\003\uff80\004\uff80\005\uff80\006\uff80\007\uff80\012\uff33" +
    "\013\uff80\016\uff80\017\u0168\020\ufed1\021\uff80\041\uff80\042" +
    "\uff80\043\uff80\044\uff80\045\uff80\047\uff80\050\uff80\051\uff80" +
    "\052\uff80\054\uff80\055\uff80\100\uff80\101\uff80\102\uff80\103" +
    "\uff80\104\uff80\105\uff80\106\uff80\001\002\000\072\003\uff6a" +
    "\004\uff6a\005\uff6a\006\uff6a\007\uff6a\013\uff6a\016\uff6a\017" +
    "\uff6a\021\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a\045\uff6a" +
    "\046\uff6a\047\uff6a\050\uff6a\051\uff6a\052\uff6a\054\uff6a\055" +
    "\uff6a\100\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a\105\uff6a" +
    "\106\uff6a\001\002\000\006\054\u014c\055\u014b\001\002\000" +
    "\004\012\u0166\001\002\000\012\003\uffe7\010\170\012\u0149" +
    "\105\uffe7\001\002\000\020\010\uff3e\012\uff3e\013\uff61\015" +
    "\uff61\022\uff61\054\uff3e\055\uff3e\001\002\000\060\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\022\uffec\023" +
    "\uffec\053\uffec\054\uffec\055\uffec\056\uffec\060\uffec\061\uffec" +
    "\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070" +
    "\uffec\071\uffec\072\uffec\001\002\000\060\010\u0163\011\uff44" +
    "\012\uff44\013\uff44\014\uff44\015\uff44\022\uff44\023\uff44\053" +
    "\uff44\054\uff44\055\uff44\056\uff44\060\uff44\061\uff44\062\uff44" +
    "\063\uff44\064\uff44\065\uff44\066\uff44\067\uff44\070\uff44\071" +
    "\uff44\072\uff44\001\002\000\070\003\uff73\004\uff73\005\uff73" +
    "\006\uff73\007\uff73\013\uff73\016\uff73\017\uff73\021\uff73\041" +
    "\uff73\042\uff73\043\uff73\044\uff73\045\uff73\047\uff73\050\uff73" +
    "\051\uff73\052\uff73\054\uff73\055\uff73\100\uff73\101\uff73\102" +
    "\uff73\103\uff73\104\uff73\105\uff73\106\uff73\001\002\000\020" +
    "\010\uff3c\012\uff3c\013\uff62\015\uff62\022\uff62\054\uff3c\055" +
    "\uff3c\001\002\000\006\003\u0158\021\u0159\001\002\000\070" +
    "\003\uff82\004\uff82\005\uff82\006\uff82\007\uff82\013\uff82\016" +
    "\uff82\017\uff82\021\uff82\041\uff82\042\uff82\043\uff82\044\uff82" +
    "\045\uff82\047\uff82\050\uff82\051\uff82\052\uff82\054\uff82\055" +
    "\uff82\100\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82" +
    "\106\uff82\001\002\000\070\003\uff7e\004\uff7e\005\uff7e\006" +
    "\uff7e\007\uff7e\013\uff7e\016\uff7e\017\uff7e\021\uff7e\041\uff7e" +
    "\042\uff7e\043\uff7e\044\uff7e\045\uff7e\047\uff7e\050\uff7e\051" +
    "\uff7e\052\uff7e\054\uff7e\055\uff7e\100\uff7e\101\uff7e\102\uff7e" +
    "\103\uff7e\104\uff7e\105\uff7e\106\uff7e\001\002\000\070\003" +
    "\uff76\004\uff76\005\uff76\006\uff76\007\uff76\013\uff76\016\uff76" +
    "\017\uff76\021\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045" +
    "\uff76\047\uff76\050\uff76\051\uff76\052\uff76\054\uff76\055\uff76" +
    "\100\uff76\101\uff76\102\uff76\103\uff76\104\uff76\105\uff76\106" +
    "\uff76\001\002\000\010\013\uff66\015\uff66\022\uff66\001\002" +
    "\000\072\003\uff6b\004\uff6b\005\uff6b\006\uff6b\007\uff6b\013" +
    "\uff6b\016\uff6b\017\uff6b\021\uff6b\041\uff6b\042\uff6b\043\uff6b" +
    "\044\uff6b\045\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052" +
    "\uff6b\054\uff6b\055\uff6b\100\uff6b\101\uff6b\102\uff6b\103\uff6b" +
    "\104\uff6b\105\uff6b\106\uff6b\001\002\000\070\003\u0156\004" +
    "\067\005\065\006\100\007\077\013\236\016\052\017\uff83" +
    "\021\224\041\260\042\245\043\253\044\276\045\244\047" +
    "\267\050\231\051\251\052\254\054\217\055\250\100\301" +
    "\101\263\102\233\103\235\104\220\105\012\106\243\001" +
    "\002\000\004\105\012\001\002\000\070\003\uff74\004\uff74" +
    "\005\uff74\006\uff74\007\uff74\013\uff74\016\uff74\017\uff74\021" +
    "\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045\uff74\047\uff74" +
    "\050\uff74\051\uff74\052\uff74\054\uff74\055\uff74\100\uff74\101" +
    "\uff74\102\uff74\103\uff74\104\uff74\105\uff74\106\uff74\001\002" +
    "\000\062\010\uff3b\011\uff3b\012\uff3b\013\uff3b\014\uff3b\015" +
    "\uff3b\020\ufecd\022\uff3b\023\uff3b\053\uff3b\054\uff3b\055\uff3b" +
    "\056\uff3b\060\uff3b\061\uff3b\062\uff3b\063\uff3b\064\uff3b\065" +
    "\uff3b\066\uff3b\067\uff3b\070\uff3b\071\uff3b\072\uff3b\001\002" +
    "\000\060\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\022\uffed\023\uffed\053\uffed\054\uffed\055\uffed\056\uffed" +
    "\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066" +
    "\uffed\067\uffed\070\uffed\071\uffed\072\uffed\001\002\000\006" +
    "\003\303\105\131\001\002\000\006\013\uff7b\015\uffaa\001" +
    "\002\000\010\013\uffae\015\146\020\305\001\002\000\060" +
    "\003\325\004\067\005\065\006\100\007\077\021\224\041" +
    "\260\042\245\043\253\044\276\052\254\053\322\054\217" +
    "\055\250\056\314\057\316\100\301\101\263\102\233\103" +
    "\235\104\220\105\012\106\243\001\002\000\004\013\307" +
    "\001\002\000\070\003\uff7c\004\uff7c\005\uff7c\006\uff7c\007" +
    "\uff7c\013\uff7c\016\uff7c\017\uff7c\021\uff7c\041\uff7c\042\uff7c" +
    "\043\uff7c\044\uff7c\045\uff7c\047\uff7c\050\uff7c\051\uff7c\052" +
    "\uff7c\054\uff7c\055\uff7c\100\uff7c\101\uff7c\102\uff7c\103\uff7c" +
    "\104\uff7c\105\uff7c\106\uff7c\001\002\000\042\011\ufef8\013" +
    "\ufef8\015\ufef8\022\ufef8\023\ufef8\053\u0110\056\u0111\062\ufef8" +
    "\063\ufef8\064\ufef8\065\ufef8\066\ufef8\067\ufef8\070\ufef8\071" +
    "\ufef8\072\ufef8\001\002\000\022\011\ufede\013\ufede\015\ufede" +
    "\022\ufede\023\ufede\070\u012f\071\ufede\072\ufede\001\002\000" +
    "\054\011\uff13\013\uff13\014\uff13\015\uff13\022\uff13\023\uff13" +
    "\053\uff13\054\uff13\055\uff13\056\uff13\060\uff13\061\uff13\062" +
    "\uff13\063\uff13\064\uff13\065\uff13\066\uff13\067\uff13\070\uff13" +
    "\071\uff13\072\uff13\001\002\000\050\011\uff0b\013\uff0b\014" +
    "\uff0b\015\uff0b\022\uff0b\023\uff0b\053\uff0b\056\uff0b\060\uff0b" +
    "\061\uff0b\062\uff0b\063\uff0b\064\uff0b\065\uff0b\066\uff0b\067" +
    "\uff0b\070\uff0b\071\uff0b\072\uff0b\001\002\000\060\003\357" +
    "\004\067\005\065\006\100\007\077\021\224\041\260\042" +
    "\245\043\253\044\276\052\254\053\322\054\217\055\250" +
    "\056\314\057\316\100\301\101\263\102\233\103\235\104" +
    "\220\105\012\106\243\001\002\000\064\010\366\011\uff14" +
    "\012\370\013\uff14\014\uff14\015\uff14\020\ufecf\021\367\022" +
    "\uff14\023\uff14\053\uff14\054\uff14\055\uff14\056\uff14\060\uff14" +
    "\061\uff14\062\uff14\063\uff14\064\uff14\065\uff14\066\uff14\067" +
    "\uff14\070\uff14\071\uff14\072\uff14\001\002\000\060\003\uff10" +
    "\004\uff10\005\uff10\006\uff10\007\uff10\021\uff10\041\uff10\042" +
    "\uff10\043\uff10\044\uff10\052\uff10\053\uff10\054\uff10\055\uff10" +
    "\056\uff10\057\uff10\100\uff10\101\uff10\102\uff10\103\uff10\104" +
    "\uff10\105\uff10\106\uff10\001\002\000\026\011\ufee3\013\ufee3" +
    "\015\ufee3\022\ufee3\023\ufee3\066\u0124\067\u0123\070\ufee3\071" +
    "\ufee3\072\ufee3\001\002\000\004\012\u014e\001\002\000\014" +
    "\011\ufed3\013\ufed3\015\ufed3\022\ufed3\023\ufed3\001\002\000" +
    "\060\003\357\004\067\005\065\006\100\007\077\021\224" +
    "\041\260\042\245\043\253\044\276\052\254\053\322\054" +
    "\217\055\250\056\314\057\316\100\301\101\263\102\233" +
    "\103\235\104\220\105\012\106\243\001\002\000\054\011" +
    "\uff12\013\uff12\014\uff12\015\uff12\022\uff12\023\uff12\053\uff12" +
    "\054\uff12\055\uff12\056\uff12\060\uff12\061\uff12\062\uff12\063" +
    "\uff12\064\uff12\065\uff12\066\uff12\067\uff12\070\uff12\071\uff12" +
    "\072\uff12\001\002\000\050\011\uff05\013\uff05\014\uff05\015" +
    "\uff05\022\uff05\023\uff05\053\uff05\056\uff05\060\uff05\061\uff05" +
    "\062\uff05\063\uff05\064\uff05\065\uff05\066\uff05\067\uff05\070" +
    "\uff05\071\uff05\072\uff05\001\002\000\036\012\uff33\014\uff01" +
    "\020\ufed1\060\ufeff\061\ufefd\062\ufef3\063\ufef1\064\ufeef\065" +
    "\ufeed\066\ufee8\067\ufee6\070\ufee1\071\ufedc\072\ufed6\001\002" +
    "\000\014\011\ufed4\013\ufed4\015\ufed4\022\ufed4\023\ufed4\001" +
    "\002\000\054\011\uff0d\013\uff0d\014\uff0d\015\uff0d\022\uff0d" +
    "\023\uff0d\053\uff0d\054\u014c\055\u014b\056\uff0d\060\uff0d\061" +
    "\uff0d\062\uff0d\063\uff0d\064\uff0d\065\uff0d\066\uff0d\067\uff0d" +
    "\070\uff0d\071\uff0d\072\uff0d\001\002\000\006\010\170\012" +
    "\u0149\001\002\000\020\011\ufed8\013\ufed8\015\ufed8\022\ufed8" +
    "\023\ufed8\071\u0137\072\u0142\001\002\000\060\010\uff3e\011" +
    "\uff3e\012\uff3e\013\uff3e\014\uff3e\015\uff3e\022\uff3e\023\uff3e" +
    "\053\uff3e\054\uff3e\055\uff3e\056\uff3e\060\uff3e\061\uff3e\062" +
    "\uff3e\063\uff3e\064\uff3e\065\uff3e\066\uff3e\067\uff3e\070\uff3e" +
    "\071\uff3e\072\uff3e\001\002\000\004\013\uffad\001\002\000" +
    "\060\010\uff3c\011\uff3c\012\uff3c\013\uff3c\014\uff3c\015\uff3c" +
    "\022\uff3c\023\uff3c\053\uff3c\054\uff3c\055\uff3c\056\uff3c\060" +
    "\uff3c\061\uff3c\062\uff3c\063\uff3c\064\uff3c\065\uff3c\066\uff3c" +
    "\067\uff3c\070\uff3c\071\uff3c\072\uff3c\001\002\000\050\011" +
    "\ufefb\013\ufefb\014\u0114\015\ufefb\022\ufefb\023\ufefb\053\ufefb" +
    "\056\ufefb\060\u0115\061\u0113\062\ufefb\063\ufefb\064\ufefb\065" +
    "\ufefb\066\ufefb\067\ufefb\070\ufefb\071\ufefb\072\ufefb\001\002" +
    "\000\050\011\uff0c\013\uff0c\014\uff0c\015\uff0c\022\uff0c\023" +
    "\uff0c\053\uff0c\056\uff0c\060\uff0c\061\uff0c\062\uff0c\063\uff0c" +
    "\064\uff0c\065\uff0c\066\uff0c\067\uff0c\070\uff0c\071\uff0c\072" +
    "\uff0c\001\002\000\036\011\ufeeb\013\ufeeb\015\ufeeb\022\ufeeb" +
    "\023\ufeeb\062\340\063\341\064\343\065\342\066\ufeeb\067" +
    "\ufeeb\070\ufeeb\071\ufeeb\072\ufeeb\001\002\000\060\003\347" +
    "\004\067\005\065\006\100\007\077\021\224\041\260\042" +
    "\245\043\253\044\276\052\254\053\322\054\217\055\250" +
    "\056\314\057\316\100\301\101\263\102\233\103\235\104" +
    "\220\105\012\106\243\001\002\000\060\003\347\004\067" +
    "\005\065\006\100\007\077\021\224\041\260\042\245\043" +
    "\253\044\276\052\254\053\322\054\217\055\250\056\314" +
    "\057\316\100\301\101\263\102\233\103\235\104\220\105" +
    "\012\106\243\001\002\000\060\003\347\004\067\005\065" +
    "\006\100\007\077\021\224\041\260\042\245\043\253\044" +
    "\276\052\254\053\322\054\217\055\250\056\314\057\316" +
    "\100\301\101\263\102\233\103\235\104\220\105\012\106" +
    "\243\001\002\000\060\003\347\004\067\005\065\006\100" +
    "\007\077\021\224\041\260\042\245\043\253\044\276\052" +
    "\254\053\322\054\217\055\250\056\314\057\316\100\301" +
    "\101\263\102\233\103\235\104\220\105\012\106\243\001" +
    "\002\000\060\010\uff3d\011\uff3d\012\uff3d\013\uff3d\014\uff3d" +
    "\015\uff3d\022\uff3d\023\uff3d\053\uff3d\054\uff3d\055\uff3d\056" +
    "\uff3d\060\uff3d\061\uff3d\062\uff3d\063\uff3d\064\uff3d\065\uff3d" +
    "\066\uff3d\067\uff3d\070\uff3d\071\uff3d\072\uff3d\001\002\000" +
    "\042\011\ufef5\013\ufef5\015\ufef5\022\ufef5\023\ufef5\053\u0110" +
    "\056\u0111\062\ufef5\063\ufef5\064\ufef5\065\ufef5\066\ufef5\067" +
    "\ufef5\070\ufef5\071\ufef5\072\ufef5\001\002\000\062\010\366" +
    "\011\uff14\012\370\013\uff14\014\uff14\015\uff14\021\367\022" +
    "\uff14\023\uff14\053\uff14\054\uff14\055\uff14\056\uff14\060\uff14" +
    "\061\uff14\062\uff14\063\uff14\064\uff14\065\uff14\066\uff14\067" +
    "\uff14\070\uff14\071\uff14\072\uff14\001\002\000\012\012\uff33" +
    "\014\uff01\060\ufeff\061\ufefd\001\002\000\060\010\uff3b\011" +
    "\uff3b\012\uff3b\013\uff3b\014\uff3b\015\uff3b\022\uff3b\023\uff3b" +
    "\053\uff3b\054\uff3b\055\uff3b\056\uff3b\060\uff3b\061\uff3b\062" +
    "\uff3b\063\uff3b\064\uff3b\065\uff3b\066\uff3b\067\uff3b\070\uff3b" +
    "\071\uff3b\072\uff3b\001\002\000\004\060\364\001\002\000" +
    "\004\014\362\001\002\000\004\012\360\001\002\000\004" +
    "\061\355\001\002\000\060\003\357\004\067\005\065\006" +
    "\100\007\077\021\224\041\260\042\245\043\253\044\276" +
    "\052\254\053\322\054\217\055\250\056\314\057\316\100" +
    "\301\101\263\102\233\103\235\104\220\105\012\106\243" +
    "\001\002\000\050\011\ufefc\013\ufefc\014\ufefc\015\ufefc\022" +
    "\ufefc\023\ufefc\053\ufefc\056\ufefc\060\ufefc\061\ufefc\062\ufefc" +
    "\063\ufefc\064\ufefc\065\ufefc\066\ufefc\067\ufefc\070\ufefc\071" +
    "\ufefc\072\ufefc\001\002\000\004\012\uff33\001\002\000\004" +
    "\042\361\001\002\000\060\010\uff32\011\uff32\012\uff32\013" +
    "\uff32\014\uff32\015\uff32\022\uff32\023\uff32\053\uff32\054\uff32" +
    "\055\uff32\056\uff32\060\uff32\061\uff32\062\uff32\063\uff32\064" +
    "\uff32\065\uff32\066\uff32\067\uff32\070\uff32\071\uff32\072\uff32" +
    "\001\002\000\060\003\357\004\067\005\065\006\100\007" +
    "\077\021\224\041\260\042\245\043\253\044\276\052\254" +
    "\053\322\054\217\055\250\056\314\057\316\100\301\101" +
    "\263\102\233\103\235\104\220\105\012\106\243\001\002" +
    "\000\050\011\uff00\013\uff00\014\uff00\015\uff00\022\uff00\023" +
    "\uff00\053\uff00\056\uff00\060\uff00\061\uff00\062\uff00\063\uff00" +
    "\064\uff00\065\uff00\066\uff00\067\uff00\070\uff00\071\uff00\072" +
    "\uff00\001\002\000\060\003\357\004\067\005\065\006\100" +
    "\007\077\021\224\041\260\042\245\043\253\044\276\052" +
    "\254\053\322\054\217\055\250\056\314\057\316\100\301" +
    "\101\263\102\233\103\235\104\220\105\012\106\243\001" +
    "\002\000\050\011\ufefe\013\ufefe\014\ufefe\015\ufefe\022\ufefe" +
    "\023\ufefe\053\ufefe\056\ufefe\060\ufefe\061\ufefe\062\ufefe\063" +
    "\ufefe\064\ufefe\065\ufefe\066\ufefe\067\ufefe\070\ufefe\071\ufefe" +
    "\072\ufefe\001\002\000\062\003\325\004\067\005\065\006" +
    "\100\007\077\011\174\021\224\041\260\042\245\043\253" +
    "\044\276\052\254\053\322\054\217\055\250\056\314\057" +
    "\316\100\301\101\263\102\233\103\235\104\220\105\012" +
    "\106\243\001\002\000\062\003\375\004\067\005\065\006" +
    "\100\007\077\021\224\022\uff2d\041\260\042\245\043\253" +
    "\044\276\052\254\053\322\054\217\055\250\056\314\057" +
    "\316\100\301\101\263\102\233\103\235\104\220\105\012" +
    "\106\243\001\002\000\010\037\372\042\371\105\015\001" +
    "\002\000\060\010\uff36\011\uff36\012\uff36\013\uff36\014\uff36" +
    "\015\uff36\022\uff36\023\uff36\053\uff36\054\uff36\055\uff36\056" +
    "\uff36\060\uff36\061\uff36\062\uff36\063\uff36\064\uff36\065\uff36" +
    "\066\uff36\067\uff36\070\uff36\071\uff36\072\uff36\001\002\000" +
    "\060\010\uff37\011\uff37\012\uff37\013\uff37\014\uff37\015\uff37" +
    "\022\uff37\023\uff37\053\uff37\054\uff37\055\uff37\056\uff37\060" +
    "\uff37\061\uff37\062\uff37\063\uff37\064\uff37\065\uff37\066\uff37" +
    "\067\uff37\070\uff37\071\uff37\072\uff37\001\002\000\004\022" +
    "\u013c\001\002\000\006\015\uff2b\022\uff2b\001\002\000\114" +
    "\003\uff29\004\uff29\005\uff29\006\uff29\007\uff29\012\uff33\014" +
    "\uff01\020\ufed1\021\uff29\041\uff29\042\uff29\043\uff29\044\uff29" +
    "\052\uff29\053\uff29\054\uff29\055\uff29\056\uff29\057\uff29\060" +
    "\ufeff\061\ufefd\062\ufef3\063\ufef1\064\ufeef\065\ufeed\066\ufee8" +
    "\067\ufee6\070\ufee1\071\ufedc\072\ufed6\100\uff29\101\uff29\102" +
    "\uff29\103\uff29\104\uff29\105\uff29\106\uff29\001\002\000\006" +
    "\015\u0100\022\uff2c\001\002\000\014\011\ufeca\013\ufeca\015" +
    "\ufeca\022\ufeca\023\ufeca\001\002\000\060\003\325\004\067" +
    "\005\065\006\100\007\077\021\224\041\260\042\245\043" +
    "\253\044\276\052\254\053\322\054\217\055\250\056\314" +
    "\057\316\100\301\101\263\102\233\103\235\104\220\105" +
    "\012\106\243\001\002\000\006\015\uff2a\022\uff2a\001\002" +
    "\000\004\020\u013a\001\002\000\004\072\u0132\001\002\000" +
    "\004\071\u012c\001\002\000\004\067\u012a\001\002\000\004" +
    "\066\u0128\001\002\000\004\070\u0120\001\002\000\004\065" +
    "\u011e\001\002\000\004\064\u011c\001\002\000\004\063\u011a" +
    "\001\002\000\004\062\u010e\001\002\000\060\003\325\004" +
    "\067\005\065\006\100\007\077\021\224\041\260\042\245" +
    "\043\253\044\276\052\254\053\322\054\217\055\250\056" +
    "\314\057\316\100\301\101\263\102\233\103\235\104\220" +
    "\105\012\106\243\001\002\000\006\015\uff28\022\uff28\001" +
    "\002\000\060\003\347\004\067\005\065\006\100\007\077" +
    "\021\224\041\260\042\245\043\253\044\276\052\254\053" +
    "\322\054\217\055\250\056\314\057\316\100\301\101\263" +
    "\102\233\103\235\104\220\105\012\106\243\001\002\000" +
    "\042\011\ufef2\013\ufef2\015\ufef2\022\ufef2\023\ufef2\053\u0110" +
    "\056\u0111\062\ufef2\063\ufef2\064\ufef2\065\ufef2\066\ufef2\067" +
    "\ufef2\070\ufef2\071\ufef2\072\ufef2\001\002\000\060\003\347" +
    "\004\067\005\065\006\100\007\077\021\224\041\260\042" +
    "\245\043\253\044\276\052\254\053\322\054\217\055\250" +
    "\056\314\057\316\100\301\101\263\102\233\103\235\104" +
    "\220\105\012\106\243\001\002\000\060\003\347\004\067" +
    "\005\065\006\100\007\077\021\224\041\260\042\245\043" +
    "\253\044\276\052\254\053\322\054\217\055\250\056\314" +
    "\057\316\100\301\101\263\102\233\103\235\104\220\105" +
    "\012\106\243\001\002\000\050\011\ufef9\013\ufef9\014\u0114" +
    "\015\ufef9\022\ufef9\023\ufef9\053\ufef9\056\ufef9\060\u0115\061" +
    "\u0113\062\ufef9\063\ufef9\064\ufef9\065\ufef9\066\ufef9\067\ufef9" +
    "\070\ufef9\071\ufef9\072\ufef9\001\002\000\060\003\357\004" +
    "\067\005\065\006\100\007\077\021\224\041\260\042\245" +
    "\043\253\044\276\052\254\053\322\054\217\055\250\056" +
    "\314\057\316\100\301\101\263\102\233\103\235\104\220" +
    "\105\012\106\243\001\002\000\060\003\357\004\067\005" +
    "\065\006\100\007\077\021\224\041\260\042\245\043\253" +
    "\044\276\052\254\053\322\054\217\055\250\056\314\057" +
    "\316\100\301\101\263\102\233\103\235\104\220\105\012" +
    "\106\243\001\002\000\060\003\357\004\067\005\065\006" +
    "\100\007\077\021\224\041\260\042\245\043\253\044\276" +
    "\052\254\053\322\054\217\055\250\056\314\057\316\100" +
    "\301\101\263\102\233\103\235\104\220\105\012\106\243" +
    "\001\002\000\050\011\uff03\013\uff03\014\uff03\015\uff03\022" +
    "\uff03\023\uff03\053\uff03\056\uff03\060\uff03\061\uff03\062\uff03" +
    "\063\uff03\064\uff03\065\uff03\066\uff03\067\uff03\070\uff03\071" +
    "\uff03\072\uff03\001\002\000\050\011\uff04\013\uff04\014\uff04" +
    "\015\uff04\022\uff04\023\uff04\053\uff04\056\uff04\060\uff04\061" +
    "\uff04\062\uff04\063\uff04\064\uff04\065\uff04\066\uff04\067\uff04" +
    "\070\uff04\071\uff04\072\uff04\001\002\000\050\011\uff02\013" +
    "\uff02\014\uff02\015\uff02\022\uff02\023\uff02\053\uff02\056\uff02" +
    "\060\uff02\061\uff02\062\uff02\063\uff02\064\uff02\065\uff02\066" +
    "\uff02\067\uff02\070\uff02\071\uff02\072\uff02\001\002\000\050" +
    "\011\ufefa\013\ufefa\014\u0114\015\ufefa\022\ufefa\023\ufefa\053" +
    "\ufefa\056\ufefa\060\u0115\061\u0113\062\ufefa\063\ufefa\064\ufefa" +
    "\065\ufefa\066\ufefa\067\ufefa\070\ufefa\071\ufefa\072\ufefa\001" +
    "\002\000\060\003\347\004\067\005\065\006\100\007\077" +
    "\021\224\041\260\042\245\043\253\044\276\052\254\053" +
    "\322\054\217\055\250\056\314\057\316\100\301\101\263" +
    "\102\233\103\235\104\220\105\012\106\243\001\002\000" +
    "\042\011\ufef0\013\ufef0\015\ufef0\022\ufef0\023\ufef0\053\u0110" +
    "\056\u0111\062\ufef0\063\ufef0\064\ufef0\065\ufef0\066\ufef0\067" +
    "\ufef0\070\ufef0\071\ufef0\072\ufef0\001\002\000\060\003\347" +
    "\004\067\005\065\006\100\007\077\021\224\041\260\042" +
    "\245\043\253\044\276\052\254\053\322\054\217\055\250" +
    "\056\314\057\316\100\301\101\263\102\233\103\235\104" +
    "\220\105\012\106\243\001\002\000\042\011\ufeee\013\ufeee" +
    "\015\ufeee\022\ufeee\023\ufeee\053\u0110\056\u0111\062\ufeee\063" +
    "\ufeee\064\ufeee\065\ufeee\066\ufeee\067\ufeee\070\ufeee\071\ufeee" +
    "\072\ufeee\001\002\000\060\003\347\004\067\005\065\006" +
    "\100\007\077\021\224\041\260\042\245\043\253\044\276" +
    "\052\254\053\322\054\217\055\250\056\314\057\316\100" +
    "\301\101\263\102\233\103\235\104\220\105\012\106\243" +
    "\001\002\000\042\011\ufeec\013\ufeec\015\ufeec\022\ufeec\023" +
    "\ufeec\053\u0110\056\u0111\062\ufeec\063\ufeec\064\ufeec\065\ufeec" +
    "\066\ufeec\067\ufeec\070\ufeec\071\ufeec\072\ufeec\001\002\000" +
    "\060\003\u0122\004\067\005\065\006\100\007\077\021\224" +
    "\041\260\042\245\043\253\044\276\052\254\053\322\054" +
    "\217\055\250\056\314\057\316\100\301\101\263\102\233" +
    "\103\235\104\220\105\012\106\243\001\002\000\026\011" +
    "\ufee0\013\ufee0\015\ufee0\022\ufee0\023\ufee0\066\u0124\067\u0123" +
    "\070\ufee0\071\ufee0\072\ufee0\001\002\000\026\012\uff33\014" +
    "\uff01\060\ufeff\061\ufefd\062\ufef3\063\ufef1\064\ufeef\065\ufeed" +
    "\066\ufee8\067\ufee6\001\002\000\060\003\u0125\004\067\005" +
    "\065\006\100\007\077\021\224\041\260\042\245\043\253" +
    "\044\276\052\254\053\322\054\217\055\250\056\314\057" +
    "\316\100\301\101\263\102\233\103\235\104\220\105\012" +
    "\106\243\001\002\000\060\003\u0125\004\067\005\065\006" +
    "\100\007\077\021\224\041\260\042\245\043\253\044\276" +
    "\052\254\053\322\054\217\055\250\056\314\057\316\100" +
    "\301\101\263\102\233\103\235\104\220\105\012\106\243" +
    "\001\002\000\022\012\uff33\014\uff01\060\ufeff\061\ufefd\062" +
    "\ufef3\063\ufef1\064\ufeef\065\ufeed\001\002\000\036\011\ufeea" +
    "\013\ufeea\015\ufeea\022\ufeea\023\ufeea\062\340\063\341\064" +
    "\343\065\342\066\ufeea\067\ufeea\070\ufeea\071\ufeea\072\ufeea" +
    "\001\002\000\036\011\ufee9\013\ufee9\015\ufee9\022\ufee9\023" +
    "\ufee9\062\340\063\341\064\343\065\342\066\ufee9\067\ufee9" +
    "\070\ufee9\071\ufee9\072\ufee9\001\002\000\060\003\u0125\004" +
    "\067\005\065\006\100\007\077\021\224\041\260\042\245" +
    "\043\253\044\276\052\254\053\322\054\217\055\250\056" +
    "\314\057\316\100\301\101\263\102\233\103\235\104\220" +
    "\105\012\106\243\001\002\000\036\011\ufee7\013\ufee7\015" +
    "\ufee7\022\ufee7\023\ufee7\062\340\063\341\064\343\065\342" +
    "\066\ufee7\067\ufee7\070\ufee7\071\ufee7\072\ufee7\001\002\000" +
    "\060\003\u0125\004\067\005\065\006\100\007\077\021\224" +
    "\041\260\042\245\043\253\044\276\052\254\053\322\054" +
    "\217\055\250\056\314\057\316\100\301\101\263\102\233" +
    "\103\235\104\220\105\012\106\243\001\002\000\036\011" +
    "\ufee5\013\ufee5\015\ufee5\022\ufee5\023\ufee5\062\340\063\341" +
    "\064\343\065\342\066\ufee5\067\ufee5\070\ufee5\071\ufee5\072" +
    "\ufee5\001\002\000\060\003\u012e\004\067\005\065\006\100" +
    "\007\077\021\224\041\260\042\245\043\253\044\276\052" +
    "\254\053\322\054\217\055\250\056\314\057\316\100\301" +
    "\101\263\102\233\103\235\104\220\105\012\106\243\001" +
    "\002\000\022\011\ufedb\013\ufedb\015\ufedb\022\ufedb\023\ufedb" +
    "\070\u012f\071\ufedb\072\ufedb\001\002\000\030\012\uff33\014" +
    "\uff01\060\ufeff\061\ufefd\062\ufef3\063\ufef1\064\ufeef\065\ufeed" +
    "\066\ufee8\067\ufee6\070\ufee1\001\002\000\060\003\ufee4\004" +
    "\ufee4\005\ufee4\006\ufee4\007\ufee4\021\ufee4\041\ufee4\042\ufee4" +
    "\043\ufee4\044\ufee4\052\ufee4\053\ufee4\054\ufee4\055\ufee4\056" +
    "\ufee4\057\ufee4\100\ufee4\101\ufee4\102\ufee4\103\ufee4\104\ufee4" +
    "\105\ufee4\106\ufee4\001\002\000\060\003\u0122\004\067\005" +
    "\065\006\100\007\077\021\224\041\260\042\245\043\253" +
    "\044\276\052\254\053\322\054\217\055\250\056\314\057" +
    "\316\100\301\101\263\102\233\103\235\104\220\105\012" +
    "\106\243\001\002\000\026\011\ufee2\013\ufee2\015\ufee2\022" +
    "\ufee2\023\ufee2\066\u0124\067\u0123\070\ufee2\071\ufee2\072\ufee2" +
    "\001\002\000\060\003\325\004\067\005\065\006\100\007" +
    "\077\021\224\041\260\042\245\043\253\044\276\052\254" +
    "\053\322\054\217\055\250\056\314\057\316\100\301\101" +
    "\263\102\233\103\235\104\220\105\012\106\243\001\002" +
    "\000\004\023\u0134\001\002\000\060\003\u0135\004\067\005" +
    "\065\006\100\007\077\021\224\041\260\042\245\043\253" +
    "\044\276\052\254\053\322\054\217\055\250\056\314\057" +
    "\316\100\301\101\263\102\233\103\235\104\220\105\012" +
    "\106\243\001\002\000\032\012\uff33\014\uff01\060\ufeff\061" +
    "\ufefd\062\ufef3\063\ufef1\064\ufeef\065\ufeed\066\ufee8\067\ufee6" +
    "\070\ufee1\071\ufedc\001\002\000\016\011\ufed5\013\ufed5\015" +
    "\ufed5\022\ufed5\023\ufed5\071\u0137\001\002\000\060\003\ufedf" +
    "\004\ufedf\005\ufedf\006\ufedf\007\ufedf\021\ufedf\041\ufedf\042" +
    "\ufedf\043\ufedf\044\ufedf\052\ufedf\053\ufedf\054\ufedf\055\ufedf" +
    "\056\ufedf\057\ufedf\100\ufedf\101\ufedf\102\ufedf\103\ufedf\104" +
    "\ufedf\105\ufedf\106\ufedf\001\002\000\060\003\u012e\004\067" +
    "\005\065\006\100\007\077\021\224\041\260\042\245\043" +
    "\253\044\276\052\254\053\322\054\217\055\250\056\314" +
    "\057\316\100\301\101\263\102\233\103\235\104\220\105" +
    "\012\106\243\001\002\000\022\011\ufedd\013\ufedd\015\ufedd" +
    "\022\ufedd\023\ufedd\070\u012f\071\ufedd\072\ufedd\001\002\000" +
    "\060\003\325\004\067\005\065\006\100\007\077\021\224" +
    "\041\260\042\245\043\253\044\276\052\254\053\322\054" +
    "\217\055\250\056\314\057\316\100\301\101\263\102\233" +
    "\103\235\104\220\105\012\106\243\001\002\000\014\011" +
    "\ufed0\013\ufed0\015\ufed0\022\ufed0\023\ufed0\001\002\000\060" +
    "\010\uff1a\011\uff1a\012\uff1a\013\uff1a\014\uff1a\015\uff1a\022" +
    "\uff1a\023\uff1a\053\uff1a\054\uff1a\055\uff1a\056\uff1a\060\uff1a" +
    "\061\uff1a\062\uff1a\063\uff1a\064\uff1a\065\uff1a\066\uff1a\067" +
    "\uff1a\070\uff1a\071\uff1a\072\uff1a\001\002\000\004\011\u013e" +
    "\001\002\000\062\010\uff17\011\uff17\012\uff17\013\uff17\014" +
    "\uff17\015\uff17\020\uff17\022\uff17\023\uff17\053\uff17\054\uff17" +
    "\055\uff17\056\uff17\060\uff17\061\uff17\062\uff17\063\uff17\064" +
    "\uff17\065\uff17\066\uff17\067\uff17\070\uff17\071\uff17\072\uff17" +
    "\001\002\000\042\011\ufef4\013\ufef4\015\ufef4\022\ufef4\023" +
    "\ufef4\053\u0110\056\u0111\062\ufef4\063\ufef4\064\ufef4\065\ufef4" +
    "\066\ufef4\067\ufef4\070\ufef4\071\ufef4\072\ufef4\001\002\000" +
    "\042\011\ufef6\013\ufef6\015\ufef6\022\ufef6\023\ufef6\053\u0110" +
    "\056\u0111\062\ufef6\063\ufef6\064\ufef6\065\ufef6\066\ufef6\067" +
    "\ufef6\070\ufef6\071\ufef6\072\ufef6\001\002\000\042\011\ufef7" +
    "\013\ufef7\015\ufef7\022\ufef7\023\ufef7\053\u0110\056\u0111\062" +
    "\ufef7\063\ufef7\064\ufef7\065\ufef7\066\ufef7\067\ufef7\070\ufef7" +
    "\071\ufef7\072\ufef7\001\002\000\060\003\ufeda\004\ufeda\005" +
    "\ufeda\006\ufeda\007\ufeda\021\ufeda\041\ufeda\042\ufeda\043\ufeda" +
    "\044\ufeda\052\ufeda\053\ufeda\054\ufeda\055\ufeda\056\ufeda\057" +
    "\ufeda\100\ufeda\101\ufeda\102\ufeda\103\ufeda\104\ufeda\105\ufeda" +
    "\106\ufeda\001\002\000\060\003\325\004\067\005\065\006" +
    "\100\007\077\021\224\041\260\042\245\043\253\044\276" +
    "\052\254\053\322\054\217\055\250\056\314\057\316\100" +
    "\301\101\263\102\233\103\235\104\220\105\012\106\243" +
    "\001\002\000\004\023\u0145\001\002\000\060\003\ufed9\004" +
    "\ufed9\005\ufed9\006\ufed9\007\ufed9\021\ufed9\041\ufed9\042\ufed9" +
    "\043\ufed9\044\ufed9\052\ufed9\053\ufed9\054\ufed9\055\ufed9\056" +
    "\ufed9\057\ufed9\100\ufed9\101\ufed9\102\ufed9\103\ufed9\104\ufed9" +
    "\105\ufed9\106\ufed9\001\002\000\060\003\u0147\004\067\005" +
    "\065\006\100\007\077\021\224\041\260\042\245\043\253" +
    "\044\276\052\254\053\322\054\217\055\250\056\314\057" +
    "\316\100\301\101\263\102\233\103\235\104\220\105\012" +
    "\106\243\001\002\000\034\012\uff33\014\uff01\060\ufeff\061" +
    "\ufefd\062\ufef3\063\ufef1\064\ufeef\065\ufeed\066\ufee8\067\ufee6" +
    "\070\ufee1\071\ufedc\072\ufed6\001\002\000\014\011\ufed7\013" +
    "\ufed7\015\ufed7\022\ufed7\023\ufed7\001\002\000\004\037\u014a" +
    "\001\002\000\060\010\uff3a\011\uff3a\012\uff3a\013\uff3a\014" +
    "\uff3a\015\uff3a\022\uff3a\023\uff3a\053\uff3a\054\uff3a\055\uff3a" +
    "\056\uff3a\060\uff3a\061\uff3a\062\uff3a\063\uff3a\064\uff3a\065" +
    "\uff3a\066\uff3a\067\uff3a\070\uff3a\071\uff3a\072\uff3a\001\002" +
    "\000\054\011\uff0e\013\uff0e\014\uff0e\015\uff0e\022\uff0e\023" +
    "\uff0e\053\uff0e\054\uff0e\055\uff0e\056\uff0e\060\uff0e\061\uff0e" +
    "\062\uff0e\063\uff0e\064\uff0e\065\uff0e\066\uff0e\067\uff0e\070" +
    "\uff0e\071\uff0e\072\uff0e\001\002\000\054\011\uff0f\013\uff0f" +
    "\014\uff0f\015\uff0f\022\uff0f\023\uff0f\053\uff0f\054\uff0f\055" +
    "\uff0f\056\uff0f\060\uff0f\061\uff0f\062\uff0f\063\uff0f\064\uff0f" +
    "\065\uff0f\066\uff0f\067\uff0f\070\uff0f\071\uff0f\072\uff0f\001" +
    "\002\000\050\011\uff09\013\uff09\014\uff09\015\uff09\022\uff09" +
    "\023\uff09\053\uff09\056\uff09\060\uff09\061\uff09\062\uff09\063" +
    "\uff09\064\uff09\065\uff09\066\uff09\067\uff09\070\uff09\071\uff09" +
    "\072\uff09\001\002\000\004\037\u014f\001\002\000\060\010" +
    "\uff38\011\uff38\012\uff38\013\uff38\014\uff38\015\uff38\022\uff38" +
    "\023\uff38\053\uff38\054\uff38\055\uff38\056\uff38\060\uff38\061" +
    "\uff38\062\uff38\063\uff38\064\uff38\065\uff38\066\uff38\067\uff38" +
    "\070\uff38\071\uff38\072\uff38\001\002\000\060\003\357\004" +
    "\067\005\065\006\100\007\077\021\224\041\260\042\245" +
    "\043\253\044\276\052\254\053\322\054\217\055\250\056" +
    "\314\057\316\100\301\101\263\102\233\103\235\104\220" +
    "\105\012\106\243\001\002\000\050\011\uff0a\013\uff0a\014" +
    "\uff0a\015\uff0a\022\uff0a\023\uff0a\053\uff0a\056\uff0a\060\uff0a" +
    "\061\uff0a\062\uff0a\063\uff0a\064\uff0a\065\uff0a\066\uff0a\067" +
    "\uff0a\070\uff0a\071\uff0a\072\uff0a\001\002\000\050\011\uff08" +
    "\013\uff08\014\uff08\015\uff08\022\uff08\023\uff08\053\uff08\056" +
    "\uff08\060\uff08\061\uff08\062\uff08\063\uff08\064\uff08\065\uff08" +
    "\066\uff08\067\uff08\070\uff08\071\uff08\072\uff08\001\002\000" +
    "\004\013\u0154\001\002\000\070\003\uff7a\004\uff7a\005\uff7a" +
    "\006\uff7a\007\uff7a\013\uff7a\016\uff7a\017\uff7a\021\uff7a\041" +
    "\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\047\uff7a\050\uff7a" +
    "\051\uff7a\052\uff7a\054\uff7a\055\uff7a\100\uff7a\101\uff7a\102" +
    "\uff7a\103\uff7a\104\uff7a\105\uff7a\106\uff7a\001\002\000\056" +
    "\011\uff11\012\014\013\uff11\014\uff11\015\uff11\022\uff11\023" +
    "\uff11\053\uff11\054\uff11\055\uff11\056\uff11\060\uff11\061\uff11" +
    "\062\uff11\063\uff11\064\uff11\065\uff11\066\uff11\067\uff11\070" +
    "\uff11\071\uff11\072\uff11\001\002\000\006\012\uff33\020\ufed1" +
    "\001\002\000\070\003\uff81\004\uff81\005\uff81\006\uff81\007" +
    "\uff81\013\uff81\016\uff81\017\uff81\021\uff81\041\uff81\042\uff81" +
    "\043\uff81\044\uff81\045\uff81\047\uff81\050\uff81\051\uff81\052" +
    "\uff81\054\uff81\055\uff81\100\uff81\101\uff81\102\uff81\103\uff81" +
    "\104\uff81\105\uff81\106\uff81\001\002\000\004\022\uff49\001" +
    "\002\000\060\003\uff5d\004\uff5d\005\uff5d\006\uff5d\007\uff5d" +
    "\021\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d\052\uff5d\053" +
    "\uff5d\054\uff5d\055\uff5d\056\uff5d\057\uff5d\100\uff5d\101\uff5d" +
    "\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d\001\002\000" +
    "\060\003\325\004\067\005\065\006\100\007\077\021\224" +
    "\041\260\042\245\043\253\044\276\052\254\053\322\054" +
    "\217\055\250\056\314\057\316\100\301\101\263\102\233" +
    "\103\235\104\220\105\012\106\243\001\002\000\004\022" +
    "\uff5f\001\002\000\004\022\u015d\001\002\000\066\003\u0156" +
    "\004\067\005\065\006\100\007\077\013\236\016\052\021" +
    "\224\041\260\042\245\043\253\044\276\045\244\047\267" +
    "\050\231\051\251\052\254\054\217\055\250\100\301\101" +
    "\263\102\233\103\235\104\220\105\012\106\243\001\002" +
    "\000\070\003\uff4a\004\uff4a\005\uff4a\006\uff4a\007\uff4a\013" +
    "\uff4a\016\uff4a\017\uff4a\021\uff4a\041\uff4a\042\uff4a\043\uff4a" +
    "\044\uff4a\045\uff4a\047\uff4a\050\uff4a\051\uff4a\052\uff4a\054" +
    "\uff4a\055\uff4a\100\uff4a\101\uff4a\102\uff4a\103\uff4a\104\uff4a" +
    "\105\uff4a\106\uff4a\001\002\000\004\022\uff5f\001\002\000" +
    "\004\022\u0161\001\002\000\066\003\u0156\004\067\005\065" +
    "\006\100\007\077\013\236\016\052\021\224\041\260\042" +
    "\245\043\253\044\276\045\244\047\267\050\231\051\251" +
    "\052\254\054\217\055\250\100\301\101\263\102\233\103" +
    "\235\104\220\105\012\106\243\001\002\000\070\003\uff48" +
    "\004\uff48\005\uff48\006\uff48\007\uff48\013\uff48\016\uff48\017" +
    "\uff48\021\uff48\041\uff48\042\uff48\043\uff48\044\uff48\045\uff48" +
    "\047\uff48\050\uff48\051\uff48\052\uff48\054\uff48\055\uff48\100" +
    "\uff48\101\uff48\102\uff48\103\uff48\104\uff48\105\uff48\106\uff48" +
    "\001\002\000\060\003\325\004\067\005\065\006\100\007" +
    "\077\021\224\041\260\042\245\043\253\044\276\052\254" +
    "\053\322\054\217\055\250\056\314\057\316\100\301\101" +
    "\263\102\233\103\235\104\220\105\012\106\243\001\002" +
    "\000\004\011\u0165\001\002\000\062\010\uff16\011\uff16\012" +
    "\uff16\013\uff16\014\uff16\015\uff16\020\uff16\022\uff16\023\uff16" +
    "\053\uff16\054\uff16\055\uff16\056\uff16\060\uff16\061\uff16\062" +
    "\uff16\063\uff16\064\uff16\065\uff16\066\uff16\067\uff16\070\uff16" +
    "\071\uff16\072\uff16\001\002\000\004\037\u0167\001\002\000" +
    "\060\010\uff39\011\uff39\012\uff39\013\uff39\014\uff39\015\uff39" +
    "\022\uff39\023\uff39\053\uff39\054\uff39\055\uff39\056\uff39\060" +
    "\uff39\061\uff39\062\uff39\063\uff39\064\uff39\065\uff39\066\uff39" +
    "\067\uff39\070\uff39\071\uff39\072\uff39\001\002\000\054\003" +
    "\uff95\004\uff95\005\uff95\006\uff95\007\uff95\013\uff95\016\uff95" +
    "\017\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031" +
    "\uff95\032\uff95\033\uff95\034\uff95\035\uff95\037\uff95\041\uff95" +
    "\105\uff95\001\002\000\066\003\u0156\004\067\005\065\006" +
    "\100\007\077\013\236\016\052\021\224\041\260\042\245" +
    "\043\253\044\276\045\244\047\267\050\231\051\251\052" +
    "\254\054\217\055\250\100\301\101\263\102\233\103\235" +
    "\104\220\105\012\106\243\001\002\000\070\003\uff7f\004" +
    "\uff7f\005\uff7f\006\uff7f\007\uff7f\013\uff7f\016\uff7f\017\uff7f" +
    "\021\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\047" +
    "\uff7f\050\uff7f\051\uff7f\052\uff7f\054\uff7f\055\uff7f\100\uff7f" +
    "\101\uff7f\102\uff7f\103\uff7f\104\uff7f\105\uff7f\106\uff7f\001" +
    "\002\000\012\003\u016d\010\u0170\012\014\021\uff31\001\002" +
    "\000\006\003\u016d\010\u0170\001\002\000\004\010\uff23\001" +
    "\002\000\060\010\uff25\011\uff25\012\uff25\013\uff25\014\uff25" +
    "\015\uff25\022\uff25\023\uff25\053\uff25\054\uff25\055\uff25\056" +
    "\uff25\060\uff25\061\uff25\062\uff25\063\uff25\064\uff25\065\uff25" +
    "\066\uff25\067\uff25\070\uff25\071\uff25\072\uff25\001\002\000" +
    "\060\010\u0175\011\uff20\012\uff20\013\uff20\014\uff20\015\uff20" +
    "\022\uff20\023\uff20\053\uff20\054\uff20\055\uff20\056\uff20\060" +
    "\uff20\061\uff20\062\uff20\063\uff20\064\uff20\065\uff20\066\uff20" +
    "\067\uff20\070\uff20\071\uff20\072\uff20\001\002\000\060\003" +
    "\325\004\067\005\065\006\100\007\077\021\224\041\260" +
    "\042\245\043\253\044\276\052\254\053\322\054\217\055" +
    "\250\056\314\057\316\100\301\101\263\102\233\103\235" +
    "\104\220\105\012\106\243\001\002\000\004\011\u0172\001" +
    "\002\000\060\010\uff21\011\uff21\012\uff21\013\uff21\014\uff21" +
    "\015\uff21\022\uff21\023\uff21\053\uff21\054\uff21\055\uff21\056" +
    "\uff21\060\uff21\061\uff21\062\uff21\063\uff21\064\uff21\065\uff21" +
    "\066\uff21\067\uff21\070\uff21\071\uff21\072\uff21\001\002\000" +
    "\056\011\uff27\012\uff27\013\uff27\014\uff27\015\uff27\022\uff27" +
    "\023\uff27\053\uff27\054\uff27\055\uff27\056\uff27\060\uff27\061" +
    "\uff27\062\uff27\063\uff27\064\uff27\065\uff27\066\uff27\067\uff27" +
    "\070\uff27\071\uff27\072\uff27\001\002\000\060\010\uff24\011" +
    "\uff24\012\uff24\013\uff24\014\uff24\015\uff24\022\uff24\023\uff24" +
    "\053\uff24\054\uff24\055\uff24\056\uff24\060\uff24\061\uff24\062" +
    "\uff24\063\uff24\064\uff24\065\uff24\066\uff24\067\uff24\070\uff24" +
    "\071\uff24\072\uff24\001\002\000\062\003\325\004\067\005" +
    "\065\006\100\007\077\011\174\021\224\041\260\042\245" +
    "\043\253\044\276\052\254\053\322\054\217\055\250\056" +
    "\314\057\316\100\301\101\263\102\233\103\235\104\220" +
    "\105\012\106\243\001\002\000\060\010\172\011\uff1f\012" +
    "\uff1f\013\uff1f\014\uff1f\015\uff1f\022\uff1f\023\uff1f\053\uff1f" +
    "\054\uff1f\055\uff1f\056\uff1f\060\uff1f\061\uff1f\062\uff1f\063" +
    "\uff1f\064\uff1f\065\uff1f\066\uff1f\067\uff1f\070\uff1f\071\uff1f" +
    "\072\uff1f\001\002\000\004\010\u0170\001\002\000\060\010" +
    "\uff22\011\uff22\012\uff22\013\uff22\014\uff22\015\uff22\022\uff22" +
    "\023\uff22\053\uff22\054\uff22\055\uff22\056\uff22\060\uff22\061" +
    "\uff22\062\uff22\063\uff22\064\uff22\065\uff22\066\uff22\067\uff22" +
    "\070\uff22\071\uff22\072\uff22\001\002\000\004\021\u017c\001" +
    "\002\000\060\010\u0175\011\uff20\012\uff20\013\uff20\014\uff20" +
    "\015\uff20\022\uff20\023\uff20\053\uff20\054\uff20\055\uff20\056" +
    "\uff20\060\uff20\061\uff20\062\uff20\063\uff20\064\uff20\065\uff20" +
    "\066\uff20\067\uff20\070\uff20\071\uff20\072\uff20\001\002\000" +
    "\056\011\uff26\012\uff26\013\uff26\014\uff26\015\uff26\022\uff26" +
    "\023\uff26\053\uff26\054\uff26\055\uff26\056\uff26\060\uff26\061" +
    "\uff26\062\uff26\063\uff26\064\uff26\065\uff26\066\uff26\067\uff26" +
    "\070\uff26\071\uff26\072\uff26\001\002\000\062\003\375\004" +
    "\067\005\065\006\100\007\077\021\224\022\uff2d\041\260" +
    "\042\245\043\253\044\276\052\254\053\322\054\217\055" +
    "\250\056\314\057\316\100\301\101\263\102\233\103\235" +
    "\104\220\105\012\106\243\001\002\000\004\022\u017e\001" +
    "\002\000\062\010\uff2f\011\uff2f\012\uff2f\013\uff2f\014\uff2f" +
    "\015\uff2f\016\043\022\uff2f\023\uff2f\053\uff2f\054\uff2f\055" +
    "\uff2f\056\uff2f\060\uff2f\061\uff2f\062\uff2f\063\uff2f\064\uff2f" +
    "\065\uff2f\066\uff2f\067\uff2f\070\uff2f\071\uff2f\072\uff2f\001" +
    "\002\000\060\010\uff30\011\uff30\012\uff30\013\uff30\014\uff30" +
    "\015\uff30\022\uff30\023\uff30\053\uff30\054\uff30\055\uff30\056" +
    "\uff30\060\uff30\061\uff30\062\uff30\063\uff30\064\uff30\065\uff30" +
    "\066\uff30\067\uff30\070\uff30\071\uff30\072\uff30\001\002\000" +
    "\060\010\uff2e\011\uff2e\012\uff2e\013\uff2e\014\uff2e\015\uff2e" +
    "\022\uff2e\023\uff2e\053\uff2e\054\uff2e\055\uff2e\056\uff2e\060" +
    "\uff2e\061\uff2e\062\uff2e\063\uff2e\064\uff2e\065\uff2e\066\uff2e" +
    "\067\uff2e\070\uff2e\071\uff2e\072\uff2e\001\002\000\004\105" +
    "\u0182\001\002\000\064\010\uff1b\011\uff1b\012\uff1b\013\uff1b" +
    "\014\uff1b\015\uff1b\020\uff1b\021\u0183\022\uff1b\023\uff1b\053" +
    "\uff1b\054\uff1b\055\uff1b\056\uff1b\060\uff1b\061\uff1b\062\uff1b" +
    "\063\uff1b\064\uff1b\065\uff1b\066\uff1b\067\uff1b\070\uff1b\071" +
    "\uff1b\072\uff1b\001\002\000\062\003\375\004\067\005\065" +
    "\006\100\007\077\021\224\022\uff2d\041\260\042\245\043" +
    "\253\044\276\052\254\053\322\054\217\055\250\056\314" +
    "\057\316\100\301\101\263\102\233\103\235\104\220\105" +
    "\012\106\243\001\002\000\004\022\u0185\001\002\000\060" +
    "\010\uff18\011\uff18\012\uff18\013\uff18\014\uff18\015\uff18\022" +
    "\uff18\023\uff18\053\uff18\054\uff18\055\uff18\056\uff18\060\uff18" +
    "\061\uff18\062\uff18\063\uff18\064\uff18\065\uff18\066\uff18\067" +
    "\uff18\070\uff18\071\uff18\072\uff18\001\002\000\062\003\325" +
    "\004\067\005\065\006\100\007\077\013\ufecc\021\224\041" +
    "\260\042\245\043\253\044\276\052\254\053\322\054\217" +
    "\055\250\056\314\057\316\100\301\101\263\102\233\103" +
    "\235\104\220\105\012\106\243\001\002\000\004\013\ufecb" +
    "\001\002\000\004\013\u0189\001\002\000\072\003\uff45\004" +
    "\uff45\005\uff45\006\uff45\007\uff45\013\uff45\016\uff45\017\uff45" +
    "\021\uff45\041\uff45\042\uff45\043\uff45\044\uff45\045\uff45\046" +
    "\uff45\047\uff45\050\uff45\051\uff45\052\uff45\054\uff45\055\uff45" +
    "\100\uff45\101\uff45\102\uff45\103\uff45\104\uff45\105\uff45\106" +
    "\uff45\001\002\000\050\011\uff06\013\uff06\014\uff06\015\uff06" +
    "\022\uff06\023\uff06\053\uff06\056\uff06\060\uff06\061\uff06\062" +
    "\uff06\063\uff06\064\uff06\065\uff06\066\uff06\067\uff06\070\uff06" +
    "\071\uff06\072\uff06\001\002\000\054\003\uff96\004\uff96\005" +
    "\uff96\006\uff96\007\uff96\013\uff96\016\uff96\017\uff96\024\uff96" +
    "\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033" +
    "\uff96\034\uff96\035\uff96\037\uff96\041\uff96\105\uff96\001\002" +
    "\000\004\022\uff5b\001\002\000\060\003\uff60\004\uff60\005" +
    "\uff60\006\uff60\007\uff60\021\uff60\041\uff60\042\uff60\043\uff60" +
    "\044\uff60\052\uff60\053\uff60\054\uff60\055\uff60\056\uff60\057" +
    "\uff60\100\uff60\101\uff60\102\uff60\103\uff60\104\uff60\105\uff60" +
    "\106\uff60\001\002\000\060\003\u0190\004\067\005\065\006" +
    "\100\007\077\021\224\041\260\042\245\043\253\044\276" +
    "\052\254\053\322\054\217\055\250\056\314\057\316\100" +
    "\301\101\263\102\233\103\235\104\220\105\012\106\243" +
    "\001\002\000\004\022\uff5f\001\002\000\040\012\uff33\014" +
    "\uff01\020\ufed1\022\uff58\060\ufeff\061\ufefd\062\ufef3\063\ufef1" +
    "\064\ufeef\065\ufeed\066\ufee8\067\ufee6\070\ufee1\071\ufedc\072" +
    "\ufed6\001\002\000\004\022\uff5f\001\002\000\004\022\u0193" +
    "\001\002\000\066\003\u0156\004\067\005\065\006\100\007" +
    "\077\013\236\016\052\021\224\041\260\042\245\043\253" +
    "\044\276\045\u0197\047\u019a\050\u0196\051\251\052\254\054" +
    "\217\055\250\100\301\101\263\102\233\103\235\104\220" +
    "\105\012\106\243\001\002\000\004\046\uff70\001\002\000" +
    "\004\046\u01c1\001\002\000\004\021\u01ab\001\002\000\004" +
    "\021\u01a2\001\002\000\004\046\uff6e\001\002\000\004\046" +
    "\uff6f\001\002\000\004\021\u019c\001\002\000\004\046\uff71" +
    "\001\002\000\060\003\uff5d\004\uff5d\005\uff5d\006\uff5d\007" +
    "\uff5d\021\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d\052\uff5d" +
    "\053\uff5d\054\uff5d\055\uff5d\056\uff5d\057\uff5d\100\uff5d\101" +
    "\uff5d\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d\001\002" +
    "\000\060\003\325\004\067\005\065\006\100\007\077\021" +
    "\224\041\260\042\245\043\253\044\276\052\254\053\322" +
    "\054\217\055\250\056\314\057\316\100\301\101\263\102" +
    "\233\103\235\104\220\105\012\106\243\001\002\000\004" +
    "\022\uff5f\001\002\000\004\022\u01a0\001\002\000\066\003" +
    "\u0156\004\067\005\065\006\100\007\077\013\236\016\052" +
    "\021\224\041\260\042\245\043\253\044\276\045\u0197\047" +
    "\u019a\050\u0196\051\251\052\254\054\217\055\250\100\301" +
    "\101\263\102\233\103\235\104\220\105\012\106\243\001" +
    "\002\000\004\046\uff47\001\002\000\060\003\uff60\004\uff60" +
    "\005\uff60\006\uff60\007\uff60\021\uff60\041\uff60\042\uff60\043" +
    "\uff60\044\uff60\052\uff60\053\uff60\054\uff60\055\uff60\056\uff60" +
    "\057\uff60\100\uff60\101\uff60\102\uff60\103\uff60\104\uff60\105" +
    "\uff60\106\uff60\001\002\000\060\003\325\004\067\005\065" +
    "\006\100\007\077\021\224\041\260\042\245\043\253\044" +
    "\276\052\254\053\322\054\217\055\250\056\314\057\316" +
    "\100\301\101\263\102\233\103\235\104\220\105\012\106" +
    "\243\001\002\000\004\022\uff5f\001\002\000\004\022\u01a6" +
    "\001\002\000\066\003\u0156\004\067\005\065\006\100\007" +
    "\077\013\236\016\052\021\224\041\260\042\245\043\253" +
    "\044\276\045\u0197\047\u019a\050\u0196\051\251\052\254\054" +
    "\217\055\250\100\301\101\263\102\233\103\235\104\220" +
    "\105\012\106\243\001\002\000\004\046\uff5e\001\002\000" +
    "\004\046\u01a9\001\002\000\066\003\u0156\004\067\005\065" +
    "\006\100\007\077\013\236\016\052\021\224\041\260\042" +
    "\245\043\253\044\276\045\u0197\047\u019a\050\u0196\051\251" +
    "\052\254\054\217\055\250\100\301\101\263\102\233\103" +
    "\235\104\220\105\012\106\243\001\002\000\004\046\uff56" +
    "\001\002\000\054\003\u0156\004\067\005\065\006\100\007" +
    "\077\013\uff53\021\224\041\260\042\245\043\253\044\276" +
    "\052\254\054\217\055\250\100\301\101\263\102\233\103" +
    "\235\104\220\105\012\106\243\001\002\000\010\013\uff4c" +
    "\015\uff4c\022\uff4c\001\002\000\006\013\uff51\015\u01bf\001" +
    "\002\000\004\013\uff50\001\002\000\004\013\u01b5\001\002" +
    "\000\004\013\uff52\001\002\000\006\003\u01b2\105\131\001" +
    "\002\000\004\015\uffaa\001\002\000\010\013\uffae\015\146" +
    "\020\305\001\002\000\004\013\uff79\001\002\000\062\003" +
    "\uff5d\004\uff5d\005\uff5d\006\uff5d\007\uff5d\013\uff5d\021\uff5d" +
    "\041\uff5d\042\uff5d\043\uff5d\044\uff5d\052\uff5d\053\uff5d\054" +
    "\uff5d\055\uff5d\056\uff5d\057\uff5d\100\uff5d\101\uff5d\102\uff5d" +
    "\103\uff5d\104\uff5d\105\uff5d\106\uff5d\001\002\000\062\003" +
    "\325\004\067\005\065\006\100\007\077\013\ufecc\021\224" +
    "\041\260\042\245\043\253\044\276\052\254\053\322\054" +
    "\217\055\250\056\314\057\316\100\301\101\263\102\233" +
    "\103\235\104\220\105\012\106\243\001\002\000\004\013" +
    "\uff5f\001\002\000\004\013\u01b9\001\002\000\054\003\u0156" +
    "\004\067\005\065\006\100\007\077\021\224\022\uff4f\041" +
    "\260\042\245\043\253\044\276\052\254\054\217\055\250" +
    "\100\301\101\263\102\233\103\235\104\220\105\012\106" +
    "\243\001\002\000\004\022\uff4e\001\002\000\006\015\u01bf" +
    "\022\uff4d\001\002\000\004\022\u01bd\001\002\000\066\003" +
    "\u0156\004\067\005\065\006\100\007\077\013\236\016\052" +
    "\021\224\041\260\042\245\043\253\044\276\045\u0197\047" +
    "\u019a\050\u0196\051\251\052\254\054\217\055\250\100\301" +
    "\101\263\102\233\103\235\104\220\105\012\106\243\001" +
    "\002\000\004\046\uff54\001\002\000\052\003\u0156\004\067" +
    "\005\065\006\100\007\077\021\224\041\260\042\245\043" +
    "\253\044\276\052\254\054\217\055\250\100\301\101\263" +
    "\102\233\103\235\104\220\105\012\106\243\001\002\000" +
    "\010\013\uff4b\015\uff4b\022\uff4b\001\002\000\066\003\u0156" +
    "\004\067\005\065\006\100\007\077\013\236\016\052\021" +
    "\224\041\260\042\245\043\253\044\276\045\244\047\267" +
    "\050\231\051\251\052\254\054\217\055\250\100\301\101" +
    "\263\102\233\103\235\104\220\105\012\106\243\001\002" +
    "\000\070\003\uff57\004\uff57\005\uff57\006\uff57\007\uff57\013" +
    "\uff57\016\uff57\017\uff57\021\uff57\041\uff57\042\uff57\043\uff57" +
    "\044\uff57\045\uff57\047\uff57\050\uff57\051\uff57\052\uff57\054" +
    "\uff57\055\uff57\100\uff57\101\uff57\102\uff57\103\uff57\104\uff57" +
    "\105\uff57\106\uff57\001\002\000\004\022\u01c4\001\002\000" +
    "\066\003\u0156\004\067\005\065\006\100\007\077\013\236" +
    "\016\052\021\224\041\260\042\245\043\253\044\276\045" +
    "\u01c7\047\u01c9\050\u01c6\051\251\052\254\054\217\055\250" +
    "\100\301\101\263\102\233\103\235\104\220\105\012\106" +
    "\243\001\002\000\004\046\uff5e\001\002\000\004\021\u01d9" +
    "\001\002\000\006\003\u018c\021\u01d0\001\002\000\070\003" +
    "\uff5c\004\uff5c\005\uff5c\006\uff5c\007\uff5c\013\uff5c\016\uff5c" +
    "\017\uff5c\021\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\045" +
    "\uff5c\047\uff5c\050\uff5c\051\uff5c\052\uff5c\054\uff5c\055\uff5c" +
    "\100\uff5c\101\uff5c\102\uff5c\103\uff5c\104\uff5c\105\uff5c\106" +
    "\uff5c\001\002\000\006\003\u0158\021\u01cb\001\002\000\072" +
    "\003\uff76\004\uff76\005\uff76\006\uff76\007\uff76\013\uff76\016" +
    "\uff76\017\uff76\021\uff76\041\uff76\042\uff76\043\uff76\044\uff76" +
    "\045\uff76\046\uff71\047\uff76\050\uff76\051\uff76\052\uff76\054" +
    "\uff76\055\uff76\100\uff76\101\uff76\102\uff76\103\uff76\104\uff76" +
    "\105\uff76\106\uff76\001\002\000\060\003\uff5d\004\uff5d\005" +
    "\uff5d\006\uff5d\007\uff5d\021\uff5d\041\uff5d\042\uff5d\043\uff5d" +
    "\044\uff5d\052\uff5d\053\uff5d\054\uff5d\055\uff5d\056\uff5d\057" +
    "\uff5d\100\uff5d\101\uff5d\102\uff5d\103\uff5d\104\uff5d\105\uff5d" +
    "\106\uff5d\001\002\000\060\003\325\004\067\005\065\006" +
    "\100\007\077\021\224\041\260\042\245\043\253\044\276" +
    "\052\254\053\322\054\217\055\250\056\314\057\316\100" +
    "\301\101\263\102\233\103\235\104\220\105\012\106\243" +
    "\001\002\000\004\022\uff5f\001\002\000\004\022\u01cf\001" +
    "\002\000\066\003\u0156\004\067\005\065\006\100\007\077" +
    "\013\236\016\052\021\224\041\260\042\245\043\253\044" +
    "\276\045\u01c7\047\u01c9\050\u01c6\051\251\052\254\054\217" +
    "\055\250\100\301\101\263\102\233\103\235\104\220\105" +
    "\012\106\243\001\002\000\060\003\uff60\004\uff60\005\uff60" +
    "\006\uff60\007\uff60\021\uff60\041\uff60\042\uff60\043\uff60\044" +
    "\uff60\052\uff60\053\uff60\054\uff60\055\uff60\056\uff60\057\uff60" +
    "\100\uff60\101\uff60\102\uff60\103\uff60\104\uff60\105\uff60\106" +
    "\uff60\001\002\000\060\003\u0190\004\067\005\065\006\100" +
    "\007\077\021\224\041\260\042\245\043\253\044\276\052" +
    "\254\053\322\054\217\055\250\056\314\057\316\100\301" +
    "\101\263\102\233\103\235\104\220\105\012\106\243\001" +
    "\002\000\004\022\uff5f\001\002\000\004\022\u01d4\001\002" +
    "\000\066\003\u0156\004\067\005\065\006\100\007\077\013" +
    "\236\016\052\021\224\041\260\042\245\043\253\044\276" +
    "\045\u01c7\047\u01c9\050\u01c6\051\251\052\254\054\217\055" +
    "\250\100\301\101\263\102\233\103\235\104\220\105\012" +
    "\106\243\001\002\000\004\046\uff5e\001\002\000\004\046" +
    "\u01d7\001\002\000\066\003\u0156\004\067\005\065\006\100" +
    "\007\077\013\236\016\052\021\224\041\260\042\245\043" +
    "\253\044\276\045\u01c7\047\u01c9\050\u01c6\051\251\052\254" +
    "\054\217\055\250\100\301\101\263\102\233\103\235\104" +
    "\220\105\012\106\243\001\002\000\070\003\uff59\004\uff59" +
    "\005\uff59\006\uff59\007\uff59\013\uff59\016\uff59\017\uff59\021" +
    "\uff59\041\uff59\042\uff59\043\uff59\044\uff59\045\uff59\047\uff59" +
    "\050\uff59\051\uff59\052\uff59\054\uff59\055\uff59\100\uff59\101" +
    "\uff59\102\uff59\103\uff59\104\uff59\105\uff59\106\uff59\001\002" +
    "\000\054\003\u0156\004\067\005\065\006\100\007\077\013" +
    "\uff53\021\224\041\260\042\245\043\253\044\276\052\254" +
    "\054\217\055\250\100\301\101\263\102\233\103\235\104" +
    "\220\105\012\106\243\001\002\000\004\013\u01db\001\002" +
    "\000\062\003\uff5d\004\uff5d\005\uff5d\006\uff5d\007\uff5d\013" +
    "\uff5d\021\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d\052\uff5d" +
    "\053\uff5d\054\uff5d\055\uff5d\056\uff5d\057\uff5d\100\uff5d\101" +
    "\uff5d\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d\001\002" +
    "\000\062\003\325\004\067\005\065\006\100\007\077\013" +
    "\ufecc\021\224\041\260\042\245\043\253\044\276\052\254" +
    "\053\322\054\217\055\250\056\314\057\316\100\301\101" +
    "\263\102\233\103\235\104\220\105\012\106\243\001\002" +
    "\000\004\013\uff5f\001\002\000\004\013\u01df\001\002\000" +
    "\054\003\u0156\004\067\005\065\006\100\007\077\021\224" +
    "\022\uff4f\041\260\042\245\043\253\044\276\052\254\054" +
    "\217\055\250\100\301\101\263\102\233\103\235\104\220" +
    "\105\012\106\243\001\002\000\004\022\u01e1\001\002\000" +
    "\066\003\u0156\004\067\005\065\006\100\007\077\013\236" +
    "\016\052\021\224\041\260\042\245\043\253\044\276\045" +
    "\u01c7\047\u01c9\050\u01c6\051\251\052\254\054\217\055\250" +
    "\100\301\101\263\102\233\103\235\104\220\105\012\106" +
    "\243\001\002\000\070\003\uff55\004\uff55\005\uff55\006\uff55" +
    "\007\uff55\013\uff55\016\uff55\017\uff55\021\uff55\041\uff55\042" +
    "\uff55\043\uff55\044\uff55\045\uff55\047\uff55\050\uff55\051\uff55" +
    "\052\uff55\054\uff55\055\uff55\100\uff55\101\uff55\102\uff55\103" +
    "\uff55\104\uff55\105\uff55\106\uff55\001\002\000\004\046\u01e4" +
    "\001\002\000\066\003\u0156\004\067\005\065\006\100\007" +
    "\077\013\236\016\052\021\224\041\260\042\245\043\253" +
    "\044\276\045\244\047\267\050\231\051\251\052\254\054" +
    "\217\055\250\100\301\101\263\102\233\103\235\104\220" +
    "\105\012\106\243\001\002\000\004\022\uff5f\001\002\000" +
    "\004\022\u01e7\001\002\000\066\003\u0156\004\067\005\065" +
    "\006\100\007\077\013\236\016\052\021\224\041\260\042" +
    "\245\043\253\044\276\045\244\047\267\050\231\051\251" +
    "\052\254\054\217\055\250\100\301\101\263\102\233\103" +
    "\235\104\220\105\012\106\243\001\002\000\070\003\uff5a" +
    "\004\uff5a\005\uff5a\006\uff5a\007\uff5a\013\uff5a\016\uff5a\017" +
    "\uff5a\021\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a\045\uff5a" +
    "\047\uff5a\050\uff5a\051\uff5a\052\uff5a\054\uff5a\055\uff5a\100" +
    "\uff5a\101\uff5a\102\uff5a\103\uff5a\104\uff5a\105\uff5a\106\uff5a" +
    "\001\002\000\004\105\u01ea\001\002\000\064\010\uff1c\011" +
    "\uff1c\012\uff1c\013\uff1c\014\uff1c\015\uff1c\020\uff1c\021\u01eb" +
    "\022\uff1c\023\uff1c\053\uff1c\054\uff1c\055\uff1c\056\uff1c\060" +
    "\uff1c\061\uff1c\062\uff1c\063\uff1c\064\uff1c\065\uff1c\066\uff1c" +
    "\067\uff1c\070\uff1c\071\uff1c\072\uff1c\001\002\000\062\003" +
    "\375\004\067\005\065\006\100\007\077\021\224\022\uff2d" +
    "\041\260\042\245\043\253\044\276\052\254\053\322\054" +
    "\217\055\250\056\314\057\316\100\301\101\263\102\233" +
    "\103\235\104\220\105\012\106\243\001\002\000\004\022" +
    "\u01ed\001\002\000\060\010\uff19\011\uff19\012\uff19\013\uff19" +
    "\014\uff19\015\uff19\022\uff19\023\uff19\053\uff19\054\uff19\055" +
    "\uff19\056\uff19\060\uff19\061\uff19\062\uff19\063\uff19\064\uff19" +
    "\065\uff19\066\uff19\067\uff19\070\uff19\071\uff19\072\uff19\001" +
    "\002\000\054\003\u0156\004\067\005\065\006\100\007\077" +
    "\013\uff53\021\224\041\260\042\245\043\253\044\276\052" +
    "\254\054\217\055\250\100\301\101\263\102\233\103\235" +
    "\104\220\105\012\106\243\001\002\000\004\013\u01f0\001" +
    "\002\000\062\003\uff5d\004\uff5d\005\uff5d\006\uff5d\007\uff5d" +
    "\013\uff5d\021\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d\052" +
    "\uff5d\053\uff5d\054\uff5d\055\uff5d\056\uff5d\057\uff5d\100\uff5d" +
    "\101\uff5d\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d\001" +
    "\002\000\062\003\325\004\067\005\065\006\100\007\077" +
    "\013\ufecc\021\224\041\260\042\245\043\253\044\276\052" +
    "\254\053\322\054\217\055\250\056\314\057\316\100\301" +
    "\101\263\102\233\103\235\104\220\105\012\106\243\001" +
    "\002\000\004\013\uff5f\001\002\000\004\013\u01f4\001\002" +
    "\000\054\003\u0156\004\067\005\065\006\100\007\077\021" +
    "\224\022\uff4f\041\260\042\245\043\253\044\276\052\254" +
    "\054\217\055\250\100\301\101\263\102\233\103\235\104" +
    "\220\105\012\106\243\001\002\000\004\022\u01f6\001\002" +
    "\000\066\003\u0156\004\067\005\065\006\100\007\077\013" +
    "\236\016\052\021\224\041\260\042\245\043\253\044\276" +
    "\045\244\047\267\050\231\051\251\052\254\054\217\055" +
    "\250\100\301\101\263\102\233\103\235\104\220\105\012" +
    "\106\243\001\002\000\060\003\u01f9\004\067\005\065\006" +
    "\100\007\077\021\224\041\260\042\245\043\253\044\276" +
    "\052\254\053\322\054\217\055\250\056\314\057\316\100" +
    "\301\101\263\102\233\103\235\104\220\105\012\106\243" +
    "\001\002\000\004\022\u01fc\001\002\000\040\012\uff33\014" +
    "\uff01\020\ufed1\022\uff35\060\ufeff\061\ufefd\062\ufef3\063\ufef1" +
    "\064\ufeef\065\ufeed\066\ufee8\067\ufee6\070\ufee1\071\ufedc\072" +
    "\ufed6\001\002\000\004\022\u01fb\001\002\000\060\010\uff34" +
    "\011\uff34\012\uff34\013\uff34\014\uff34\015\uff34\022\uff34\023" +
    "\uff34\053\uff34\054\uff34\055\uff34\056\uff34\060\uff34\061\uff34" +
    "\062\uff34\063\uff34\064\uff34\065\uff34\066\uff34\067\uff34\070" +
    "\uff34\071\uff34\072\uff34\001\002\000\060\010\uff3f\011\uff3f" +
    "\012\uff3f\013\uff3f\014\uff3f\015\uff3f\022\uff3f\023\uff3f\053" +
    "\uff3f\054\uff3f\055\uff3f\056\uff3f\060\uff3f\061\uff3f\062\uff3f" +
    "\063\uff3f\064\uff3f\065\uff3f\066\uff3f\067\uff3f\070\uff3f\071" +
    "\uff3f\072\uff3f\001\002\000\060\003\uff46\004\uff46\005\uff46" +
    "\006\uff46\007\uff46\021\uff46\041\uff46\042\uff46\043\uff46\044" +
    "\uff46\052\uff46\053\uff46\054\uff46\055\uff46\056\uff46\057\uff46" +
    "\100\uff46\101\uff46\102\uff46\103\uff46\104\uff46\105\uff46\106" +
    "\uff46\001\002\000\060\003\325\004\067\005\065\006\100" +
    "\007\077\021\224\041\260\042\245\043\253\044\276\052" +
    "\254\053\322\054\217\055\250\056\314\057\316\100\301" +
    "\101\263\102\233\103\235\104\220\105\012\106\243\001" +
    "\002\000\014\011\ufed2\013\ufed2\015\ufed2\022\ufed2\023\ufed2" +
    "\001\002\000\050\011\uff07\013\uff07\014\uff07\015\uff07\022" +
    "\uff07\023\uff07\053\uff07\056\uff07\060\uff07\061\uff07\062\uff07" +
    "\063\uff07\064\uff07\065\uff07\066\uff07\067\uff07\070\uff07\071" +
    "\uff07\072\uff07\001\002\000\072\003\uff68\004\uff68\005\uff68" +
    "\006\uff68\007\uff68\013\uff68\016\uff68\017\uff68\021\uff68\041" +
    "\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046\uff68\047\uff68" +
    "\050\uff68\051\uff68\052\uff68\054\uff68\055\uff68\100\uff68\101" +
    "\uff68\102\uff68\103\uff68\104\uff68\105\uff68\106\uff68\001\002" +
    "\000\070\003\u0204\004\067\005\065\006\100\007\077\013" +
    "\236\016\052\017\uff84\021\224\041\260\042\245\043\253" +
    "\044\276\045\244\047\267\050\231\051\251\052\254\054" +
    "\217\055\250\100\301\101\263\102\233\103\235\104\220" +
    "\105\012\106\243\001\002\000\004\017\u0207\001\002\000" +
    "\074\003\uff80\004\uff80\005\uff80\006\uff80\007\uff80\012\uff33" +
    "\013\uff80\016\uff80\017\uff86\020\ufed1\021\uff80\041\uff80\042" +
    "\uff80\043\uff80\044\uff80\045\uff80\047\uff80\050\uff80\051\uff80" +
    "\052\uff80\054\uff80\055\uff80\100\uff80\101\uff80\102\uff80\103" +
    "\uff80\104\uff80\105\uff80\106\uff80\001\002\000\004\017\u0206" +
    "\001\002\000\120\003\uff85\004\uff85\005\uff85\006\uff85\007" +
    "\uff85\013\uff85\016\uff85\017\uff85\021\uff85\024\uff85\025\uff85" +
    "\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034" +
    "\uff85\035\uff85\037\uff85\041\uff85\042\uff85\043\uff85\044\uff85" +
    "\045\uff85\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\054" +
    "\uff85\055\uff85\100\uff85\101\uff85\102\uff85\103\uff85\104\uff85" +
    "\105\uff85\106\uff85\001\002\000\120\003\uff87\004\uff87\005" +
    "\uff87\006\uff87\007\uff87\013\uff87\016\uff87\017\uff87\021\uff87" +
    "\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032" +
    "\uff87\033\uff87\034\uff87\035\uff87\037\uff87\041\uff87\042\uff87" +
    "\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051" +
    "\uff87\052\uff87\054\uff87\055\uff87\100\uff87\101\uff87\102\uff87" +
    "\103\uff87\104\uff87\105\uff87\106\uff87\001\002\000\070\003" +
    "\uff93\004\uff93\005\uff93\006\uff93\007\uff93\013\uff93\016\uff93" +
    "\017\uff93\021\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045" +
    "\uff93\047\uff93\050\uff93\051\uff93\052\uff93\054\uff93\055\uff93" +
    "\100\uff93\101\uff93\102\uff93\103\uff93\104\uff93\105\uff93\106" +
    "\uff93\001\002\000\054\003\uff92\004\uff92\005\uff92\006\uff92" +
    "\007\uff92\013\uff92\016\uff92\017\uff92\024\uff92\025\uff92\026" +
    "\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92" +
    "\035\uff92\037\uff92\041\uff92\105\uff92\001\002\000\070\003" +
    "\u0210\004\067\005\065\006\100\007\077\013\236\016\052" +
    "\017\uff84\021\224\041\260\042\u020d\043\u020f\044\276\045" +
    "\244\047\267\050\231\051\251\052\254\054\217\055\250" +
    "\100\301\101\263\102\233\103\235\104\220\105\012\106" +
    "\243\001\002\000\070\003\u0227\004\067\005\065\006\100" +
    "\007\077\013\236\016\052\017\uff84\021\224\041\260\042" +
    "\245\043\253\044\276\045\244\047\267\050\231\051\251" +
    "\052\254\054\217\055\250\100\301\101\263\102\233\103" +
    "\235\104\220\105\012\106\243\001\002\000\010\012\u021b" +
    "\054\uff15\055\uff15\001\002\000\014\010\uff40\012\uff40\021" +
    "\u0217\054\uff40\055\uff40\001\002\000\004\017\u0216\001\002" +
    "\000\006\012\u0181\021\u0212\001\002\000\074\003\uff80\004" +
    "\uff80\005\uff80\006\uff80\007\uff80\012\uff33\013\uff80\016\uff80" +
    "\017\u0211\020\ufed1\021\uff80\041\uff80\042\uff80\043\uff80\044" +
    "\uff80\045\uff80\047\uff80\050\uff80\051\uff80\052\uff80\054\uff80" +
    "\055\uff80\100\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105" +
    "\uff80\106\uff80\001\002\000\054\003\uff8d\004\uff8d\005\uff8d" +
    "\006\uff8d\007\uff8d\013\uff8d\016\uff8d\017\uff8d\024\uff8d\025" +
    "\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d" +
    "\034\uff8d\035\uff8d\037\uff8d\041\uff8d\105\uff8d\001\002\000" +
    "\062\003\375\004\067\005\065\006\100\007\077\021\224" +
    "\022\uff2d\041\260\042\245\043\253\044\276\052\254\053" +
    "\322\054\217\055\250\056\314\057\316\100\301\101\263" +
    "\102\233\103\235\104\220\105\012\106\243\001\002\000" +
    "\004\022\u0214\001\002\000\004\013\u0215\001\002\000\070" +
    "\003\uff8a\004\uff8a\005\uff8a\006\uff8a\007\uff8a\013\uff8a\016" +
    "\uff8a\017\uff8a\021\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a" +
    "\045\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\054\uff8a\055" +
    "\uff8a\100\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a" +
    "\106\uff8a\001\002\000\054\003\uff8e\004\uff8e\005\uff8e\006" +
    "\uff8e\007\uff8e\013\uff8e\016\uff8e\017\uff8e\024\uff8e\025\uff8e" +
    "\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034" +
    "\uff8e\035\uff8e\037\uff8e\041\uff8e\105\uff8e\001\002\000\062" +
    "\003\375\004\067\005\065\006\100\007\077\021\224\022" +
    "\uff2d\041\260\042\245\043\253\044\276\052\254\053\322" +
    "\054\217\055\250\056\314\057\316\100\301\101\263\102" +
    "\233\103\235\104\220\105\012\106\243\001\002\000\004" +
    "\022\u0219\001\002\000\004\013\u021a\001\002\000\070\003" +
    "\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b\013\uff8b\016\uff8b" +
    "\017\uff8b\021\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045" +
    "\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\054\uff8b\055\uff8b" +
    "\100\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106" +
    "\uff8b\001\002\000\010\042\u021d\043\u021c\105\u01ea\001\002" +
    "\000\004\021\u0222\001\002\000\004\021\u021e\001\002\000" +
    "\062\003\375\004\067\005\065\006\100\007\077\021\224" +
    "\022\uff2d\041\260\042\245\043\253\044\276\052\254\053" +
    "\322\054\217\055\250\056\314\057\316\100\301\101\263" +
    "\102\233\103\235\104\220\105\012\106\243\001\002\000" +
    "\004\022\u0220\001\002\000\004\013\u0221\001\002\000\070" +
    "\003\uff89\004\uff89\005\uff89\006\uff89\007\uff89\013\uff89\016" +
    "\uff89\017\uff89\021\uff89\041\uff89\042\uff89\043\uff89\044\uff89" +
    "\045\uff89\047\uff89\050\uff89\051\uff89\052\uff89\054\uff89\055" +
    "\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105\uff89" +
    "\106\uff89\001\002\000\062\003\375\004\067\005\065\006" +
    "\100\007\077\021\224\022\uff2d\041\260\042\245\043\253" +
    "\044\276\052\254\053\322\054\217\055\250\056\314\057" +
    "\316\100\301\101\263\102\233\103\235\104\220\105\012" +
    "\106\243\001\002\000\004\022\u0224\001\002\000\004\013" +
    "\u0225\001\002\000\070\003\uff88\004\uff88\005\uff88\006\uff88" +
    "\007\uff88\013\uff88\016\uff88\017\uff88\021\uff88\041\uff88\042" +
    "\uff88\043\uff88\044\uff88\045\uff88\047\uff88\050\uff88\051\uff88" +
    "\052\uff88\054\uff88\055\uff88\100\uff88\101\uff88\102\uff88\103" +
    "\uff88\104\uff88\105\uff88\106\uff88\001\002\000\004\017\u0228" +
    "\001\002\000\072\003\uff80\004\uff80\005\uff80\006\uff80\007" +
    "\uff80\012\uff33\013\uff80\016\uff80\020\ufed1\021\uff80\041\uff80" +
    "\042\uff80\043\uff80\044\uff80\045\uff80\047\uff80\050\uff80\051" +
    "\uff80\052\uff80\054\uff80\055\uff80\100\uff80\101\uff80\102\uff80" +
    "\103\uff80\104\uff80\105\uff80\106\uff80\001\002\000\054\003" +
    "\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f\013\uff8f\016\uff8f" +
    "\017\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031" +
    "\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\037\uff8f\041\uff8f" +
    "\105\uff8f\001\002\000\004\016\uffcb\001\002\000\004\016" +
    "\043\001\002\000\034\002\uffca\013\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\037\uffca\001\002\000\020\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\037\uffce\041\uffce\105\uffce\001\002\000" +
    "\020\004\uffda\005\uffda\006\uffda\007\uffda\037\uffda\041\uffda" +
    "\105\uffda\001\002\000\020\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\037\uffd4\041\uffd4\105\uffd4\001\002\000\020\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\037\uffd0\041\uffd0\105\uffd0\001" +
    "\002\000\020\004\uffcf\005\uffcf\006\uffcf\007\uffcf\037\uffcf" +
    "\041\uffcf\105\uffcf\001\002\000\020\004\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\037\uffd1\041\uffd1\105\uffd1\001\002\000\020" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\037\uffd3\041\uffd3\105" +
    "\uffd3\001\002\000\020\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\037\uffd2\041\uffd2\105\uffd2\001\002\000\034\002\ufff6\013" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\037\ufff6\001\002\000" +
    "\036\002\ufff8\013\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\037" +
    "\ufff8\075\ufff8\001\002\000\006\012\u0238\013\u0237\001\002" +
    "\000\036\002\ufff2\013\ufff2\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2" +
    "\037\ufff2\075\ufff2\001\002\000\006\014\u0239\105\015\001" +
    "\002\000\004\013\u023a\001\002\000\036\002\ufff1\013\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\037\ufff1\075\ufff1\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0238\000\010\055\003\056\005\112\006\001\001\000" +
    "\014\113\021\115\020\117\017\121\022\122\015\001\001" +
    "\000\004\011\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u0235\001\001\000\002\001\001" +
    "\000\010\117\u0234\121\022\122\015\001\001\000\020\014" +
    "\034\033\035\035\033\114\032\116\023\120\026\123\031" +
    "\001\001\000\002\001\001\000\014\014\034\033\035\035" +
    "\033\120\u0233\123\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\u022c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\176\041\001\001\000\002\001\001\000\004" +
    "\024\043\001\001\000\036\026\057\027\054\030\055\031" +
    "\063\032\053\033\060\035\033\037\061\042\046\044\052" +
    "\051\044\052\047\057\050\123\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\u0208\001\001\000\002\001\001\000\004\060" +
    "\u0201\001\001\000\004\050\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\205\203\001" +
    "\001\000\032\030\202\031\063\032\053\033\060\035\033" +
    "\037\061\042\046\044\052\051\044\052\047\057\050\123" +
    "\062\001\001\000\016\004\072\005\070\006\071\007\073" +
    "\010\075\011\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\135\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\135" +
    "\170\001\001\000\002\001\001\000\006\040\144\041\141" +
    "\001\001\000\002\001\001\000\004\207\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\104\017\103\001\001\000\004\015" +
    "\115\001\001\000\006\020\107\022\105\001\001\000\002" +
    "\001\001\000\004\024\114\001\001\000\006\021\111\023" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\123\005\070\006\071\007\073\010\075\011\065\045" +
    "\120\046\121\047\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\135\001\001\000" +
    "\004\206\133\001\001\000\016\004\126\005\070\006\071" +
    "\007\073\010\075\011\065\001\001\000\004\041\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\123\005\070\006\071\007" +
    "\073\010\075\011\065\047\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\123\005\070\006\071\007" +
    "\073\010\075\011\065\047\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\200\156\201" +
    "\155\202\157\001\001\000\004\203\151\001\001\000\002" +
    "\001\001\000\004\012\147\001\001\000\002\001\001\000" +
    "\004\041\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\123\005\070\006\071\007\073\010\075\011" +
    "\065\045\153\046\121\047\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\033\163\035\033\042\164\044" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\165\005\070\006\071\007\073\010\075\011\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\203" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\204" +
    "\175\001\001\000\002\001\001\000\024\004\123\005\070" +
    "\006\071\007\073\010\075\011\065\045\177\046\121\047" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\123\005\070\006\071\007\073\010\075\011\065\045\205" +
    "\046\121\047\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\213" +
    "\001\001\000\002\001\001\000\112\003\225\004\301\005" +
    "\260\006\071\007\073\010\237\011\233\057\227\061\245" +
    "\062\274\063\267\064\270\067\246\071\271\072\236\073" +
    "\273\074\214\075\221\076\276\100\264\102\255\103\231" +
    "\124\241\125\263\126\261\131\226\151\215\152\265\153" +
    "\277\154\256\166\240\167\220\172\272\173\224\174\222" +
    "\175\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\225\005\327\006\071\010\317\011\345\124\241" +
    "\125\263\126\331\131\226\151\343\152\333\153\347\154" +
    "\326\155\u01ff\172\335\173\312\174\311\175\322\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\145\u01f6\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\135\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\225" +
    "\005\327\006\071\010\317\011\345\124\241\125\263\126" +
    "\331\131\226\151\343\152\333\153\347\154\326\155\u0189" +
    "\172\335\173\312\174\311\175\322\001\001\000\004\150" +
    "\u0185\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\u016b\006\071\011\u016a\001\001\000\010\211\u0168\217" +
    "\352\237\u0101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\135\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\106\003\225\004\301\005\260\006\071\007" +
    "\073\010\237\011\233\057\227\063\u0156\064\270\067\246" +
    "\071\271\072\236\073\273\074\214\075\221\076\276\100" +
    "\264\102\255\103\231\124\241\125\263\126\261\131\226" +
    "\151\215\152\265\153\277\154\256\166\240\167\220\172" +
    "\272\173\224\174\222\175\251\001\001\000\004\011\u0154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\303\041\141\001\001\000\006\202\157" +
    "\212\u0152\001\001\000\004\013\305\001\001\000\072\003" +
    "\225\005\327\006\071\010\317\011\314\124\241\125\263" +
    "\126\331\131\226\151\215\152\333\153\277\154\326\155" +
    "\323\156\334\157\307\160\336\161\316\162\310\163\330" +
    "\164\325\165\332\166\320\167\220\172\335\173\312\174" +
    "\311\175\322\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\225\005\327\006\071\010\317" +
    "\011\345\124\241\125\263\126\331\131\226\151\343\152" +
    "\333\153\347\154\326\155\u0151\172\335\173\312\174\311" +
    "\175\322\001\001\000\004\135\201\001\001\000\004\144" +
    "\u014f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\225\005\327\006\071\010\317\011" +
    "\345\124\241\125\263\126\331\131\226\151\343\152\333" +
    "\153\347\154\326\155\u014c\172\335\173\312\174\311\175" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\217\352\223\351\224\350\225\353\226\u010a\227\u0109\230" +
    "\u0108\231\u0107\232\u0105\233\u0104\234\u0106\235\u0103\236\u0102" +
    "\237\u0101\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\135\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\225\005\327" +
    "\006\071\010\317\011\345\124\241\125\263\126\331\131" +
    "\226\151\343\152\333\153\347\154\326\155\323\156\334" +
    "\157\u0140\172\335\173\312\174\311\175\322\001\001\000" +
    "\052\003\225\005\327\006\071\010\317\011\345\124\241" +
    "\125\263\126\331\131\226\151\343\152\333\153\347\154" +
    "\326\155\323\156\334\157\u013f\172\335\173\312\174\311" +
    "\175\322\001\001\000\052\003\225\005\327\006\071\010" +
    "\317\011\345\124\241\125\263\126\331\131\226\151\343" +
    "\152\333\153\347\154\326\155\323\156\334\157\u013e\172" +
    "\335\173\312\174\311\175\322\001\001\000\052\003\225" +
    "\005\327\006\071\010\317\011\345\124\241\125\263\126" +
    "\331\131\226\151\343\152\333\153\347\154\326\155\323" +
    "\156\334\157\344\172\335\173\312\174\311\175\322\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\135\201" +
    "\001\001\000\012\217\352\223\351\224\350\225\353\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\225\005" +
    "\327\006\071\010\317\011\345\124\241\125\263\126\331" +
    "\131\226\151\343\152\333\153\347\154\326\155\355\172" +
    "\335\173\312\174\311\175\322\001\001\000\002\001\001" +
    "\000\004\217\352\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\225\005\327\006\071\010\317\011\345" +
    "\124\241\125\263\126\331\131\226\151\343\152\333\153" +
    "\347\154\326\155\362\172\335\173\312\174\311\175\322" +
    "\001\001\000\002\001\001\000\046\003\225\005\327\006" +
    "\071\010\317\011\345\124\241\125\263\126\331\131\226" +
    "\151\343\152\333\153\347\154\326\155\364\172\335\173" +
    "\312\174\311\175\322\001\001\000\002\001\001\000\074" +
    "\003\225\005\327\006\071\010\317\011\314\124\241\125" +
    "\263\126\331\131\226\151\215\152\333\153\277\154\326" +
    "\155\323\156\334\157\307\160\336\161\316\162\310\163" +
    "\330\164\325\165\376\166\320\167\220\171\u013c\172\335" +
    "\173\312\174\311\175\322\001\001\000\100\003\225\005" +
    "\327\006\071\010\317\011\314\124\241\125\263\126\331" +
    "\127\372\130\375\131\226\151\215\152\333\153\277\154" +
    "\326\155\323\156\334\157\307\160\336\161\316\162\310" +
    "\163\330\164\325\165\376\166\320\167\220\171\373\172" +
    "\335\173\312\174\311\175\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\217\352\221\u010b\223\351\224\350" +
    "\225\353\226\u010a\227\u0109\230\u0108\231\u0107\232\u0105\233" +
    "\u0104\234\u0106\235\u0103\236\u0102\237\u0101\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\003\225\005\327\006" +
    "\071\010\317\011\314\124\241\125\263\126\331\131\226" +
    "\151\215\152\333\153\277\154\326\155\323\156\334\157" +
    "\307\160\336\161\316\162\310\163\330\164\325\165\376" +
    "\166\320\167\220\171\u0100\172\335\173\312\174\311\175" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\074\003\225\005" +
    "\327\006\071\010\317\011\314\124\241\125\263\126\331" +
    "\131\226\151\215\152\333\153\277\154\326\155\323\156" +
    "\334\157\307\160\336\161\316\162\310\163\330\164\325" +
    "\165\376\166\320\167\220\171\u010c\172\335\173\312\174" +
    "\311\175\322\001\001\000\002\001\001\000\052\003\225" +
    "\005\327\006\071\010\317\011\345\124\241\125\263\126" +
    "\331\131\226\151\343\152\333\153\347\154\326\155\323" +
    "\156\334\157\u010e\172\335\173\312\174\311\175\322\001" +
    "\001\000\002\001\001\000\050\003\225\005\327\006\071" +
    "\010\317\011\345\124\241\125\263\126\331\131\226\151" +
    "\343\152\333\153\347\154\326\155\323\156\u0118\172\335" +
    "\173\312\174\311\175\322\001\001\000\050\003\225\005" +
    "\327\006\071\010\317\011\345\124\241\125\263\126\331" +
    "\131\226\151\343\152\333\153\347\154\326\155\323\156" +
    "\u0111\172\335\173\312\174\311\175\322\001\001\000\002" +
    "\001\001\000\046\003\225\005\327\006\071\010\317\011" +
    "\345\124\241\125\263\126\331\131\226\151\343\152\333" +
    "\153\347\154\326\155\u0117\172\335\173\312\174\311\175" +
    "\322\001\001\000\046\003\225\005\327\006\071\010\317" +
    "\011\345\124\241\125\263\126\331\131\226\151\343\152" +
    "\333\153\347\154\326\155\u0116\172\335\173\312\174\311" +
    "\175\322\001\001\000\046\003\225\005\327\006\071\010" +
    "\317\011\345\124\241\125\263\126\331\131\226\151\343" +
    "\152\333\153\347\154\326\155\u0115\172\335\173\312\174" +
    "\311\175\322\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\225\005" +
    "\327\006\071\010\317\011\345\124\241\125\263\126\331" +
    "\131\226\151\343\152\333\153\347\154\326\155\323\156" +
    "\334\157\u011a\172\335\173\312\174\311\175\322\001\001" +
    "\000\002\001\001\000\052\003\225\005\327\006\071\010" +
    "\317\011\345\124\241\125\263\126\331\131\226\151\343" +
    "\152\333\153\347\154\326\155\323\156\334\157\u011c\172" +
    "\335\173\312\174\311\175\322\001\001\000\002\001\001" +
    "\000\052\003\225\005\327\006\071\010\317\011\345\124" +
    "\241\125\263\126\331\131\226\151\343\152\333\153\347" +
    "\154\326\155\323\156\334\157\u011e\172\335\173\312\174" +
    "\311\175\322\001\001\000\002\001\001\000\056\003\225" +
    "\005\327\006\071\010\317\011\345\124\241\125\263\126" +
    "\331\131\226\151\343\152\333\153\347\154\326\155\323" +
    "\156\334\157\307\160\336\161\u0120\172\335\173\312\174" +
    "\311\175\322\001\001\000\002\001\001\000\026\217\352" +
    "\223\351\224\350\225\353\226\u010a\227\u0109\230\u0108\231" +
    "\u0107\232\u0105\233\u0104\001\001\000\054\003\225\005\327" +
    "\006\071\010\317\011\345\124\241\125\263\126\331\131" +
    "\226\151\343\152\333\153\347\154\326\155\323\156\334" +
    "\157\307\160\u0126\172\335\173\312\174\311\175\322\001" +
    "\001\000\054\003\225\005\327\006\071\010\317\011\345" +
    "\124\241\125\263\126\331\131\226\151\343\152\333\153" +
    "\347\154\326\155\323\156\334\157\307\160\u0125\172\335" +
    "\173\312\174\311\175\322\001\001\000\022\217\352\223" +
    "\351\224\350\225\353\226\u010a\227\u0109\230\u0108\231\u0107" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\003" +
    "\225\005\327\006\071\010\317\011\345\124\241\125\263" +
    "\126\331\131\226\151\343\152\333\153\347\154\326\155" +
    "\323\156\334\157\307\160\u0128\172\335\173\312\174\311" +
    "\175\322\001\001\000\002\001\001\000\054\003\225\005" +
    "\327\006\071\010\317\011\345\124\241\125\263\126\331" +
    "\131\226\151\343\152\333\153\347\154\326\155\323\156" +
    "\334\157\307\160\u012a\172\335\173\312\174\311\175\322" +
    "\001\001\000\002\001\001\000\060\003\225\005\327\006" +
    "\071\010\317\011\345\124\241\125\263\126\331\131\226" +
    "\151\343\152\333\153\347\154\326\155\323\156\334\157" +
    "\307\160\336\161\316\162\u012c\172\335\173\312\174\311" +
    "\175\322\001\001\000\002\001\001\000\030\217\352\223" +
    "\351\224\350\225\353\226\u010a\227\u0109\230\u0108\231\u0107" +
    "\232\u0105\233\u0104\234\u0106\001\001\000\004\142\u012f\001" +
    "\001\000\056\003\225\005\327\006\071\010\317\011\345" +
    "\124\241\125\263\126\331\131\226\151\343\152\333\153" +
    "\347\154\326\155\323\156\334\157\307\160\336\161\u0130" +
    "\172\335\173\312\174\311\175\322\001\001\000\002\001" +
    "\001\000\074\003\225\005\327\006\071\010\317\011\314" +
    "\124\241\125\263\126\331\131\226\151\215\152\333\153" +
    "\277\154\326\155\323\156\334\157\307\160\336\161\316" +
    "\162\310\163\330\164\325\165\376\166\320\167\220\171" +
    "\u0132\172\335\173\312\174\311\175\322\001\001\000\002" +
    "\001\001\000\062\003\225\005\327\006\071\010\317\011" +
    "\345\124\241\125\263\126\331\131\226\151\343\152\333" +
    "\153\347\154\326\155\323\156\334\157\307\160\336\161" +
    "\316\162\310\163\u0135\172\335\173\312\174\311\175\322" +
    "\001\001\000\032\217\352\223\351\224\350\225\353\226" +
    "\u010a\227\u0109\230\u0108\231\u0107\232\u0105\233\u0104\234\u0106" +
    "\235\u0103\001\001\000\002\001\001\000\004\143\u0137\001" +
    "\001\000\060\003\225\005\327\006\071\010\317\011\345" +
    "\124\241\125\263\126\331\131\226\151\343\152\333\153" +
    "\347\154\326\155\323\156\334\157\307\160\336\161\316" +
    "\162\u0138\172\335\173\312\174\311\175\322\001\001\000" +
    "\002\001\001\000\072\003\225\005\327\006\071\010\317" +
    "\011\314\124\241\125\263\126\331\131\226\151\215\152" +
    "\333\153\277\154\326\155\323\156\334\157\307\160\336" +
    "\161\316\162\310\163\330\164\325\165\u013a\166\320\167" +
    "\220\172\335\173\312\174\311\175\322\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\146\u0142\001\001\000\074\003\225\005\327\006" +
    "\071\010\317\011\314\124\241\125\263\126\331\131\226" +
    "\151\215\152\333\153\277\154\326\155\323\156\334\157" +
    "\307\160\336\161\316\162\310\163\330\164\325\165\376" +
    "\166\320\167\220\171\u0143\172\335\173\312\174\311\175" +
    "\322\001\001\000\002\001\001\000\004\147\u0145\001\001" +
    "\000\064\003\225\005\327\006\071\010\317\011\345\124" +
    "\241\125\263\126\331\131\226\151\343\152\333\153\347" +
    "\154\326\155\323\156\334\157\307\160\336\161\316\162" +
    "\310\163\330\164\u0147\172\335\173\312\174\311\175\322" +
    "\001\001\000\034\217\352\223\351\224\350\225\353\226" +
    "\u010a\227\u0109\230\u0108\231\u0107\232\u0105\233\u0104\234\u0106" +
    "\235\u0103\236\u0102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\225\005\327\006\071\010\317\011\345\124\241" +
    "\125\263\126\331\131\226\151\343\152\333\153\347\154" +
    "\326\155\u0150\172\335\173\312\174\311\175\322\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\217\352\237\u0101" +
    "\001\001\000\002\001\001\000\004\215\u015e\001\001\000" +
    "\004\141\u0159\001\001\000\074\003\225\005\327\006\071" +
    "\010\317\011\314\124\241\125\263\126\331\131\226\151" +
    "\215\152\333\153\277\154\326\155\323\156\334\157\307" +
    "\160\336\161\316\162\310\163\330\164\325\165\376\166" +
    "\320\167\220\171\u015a\172\335\173\312\174\311\175\322" +
    "\001\001\000\004\137\u015b\001\001\000\002\001\001\000" +
    "\076\003\225\005\327\006\071\010\317\011\314\057\227" +
    "\067\u015d\071\271\072\236\073\273\074\214\075\221\076" +
    "\276\100\264\102\255\103\231\124\241\125\263\126\261" +
    "\131\226\151\215\152\265\153\277\154\256\166\240\167" +
    "\220\172\272\173\224\174\222\175\251\001\001\000\002" +
    "\001\001\000\004\137\u015f\001\001\000\002\001\001\000" +
    "\076\003\225\005\327\006\071\010\317\011\314\057\227" +
    "\067\u0161\071\271\072\236\073\273\074\214\075\221\076" +
    "\276\100\264\102\255\103\231\124\241\125\263\126\261" +
    "\131\226\151\215\152\265\153\277\154\256\166\240\167" +
    "\220\172\272\173\224\174\222\175\251\001\001\000\002" +
    "\001\001\000\074\003\225\005\327\006\071\010\317\011" +
    "\314\124\241\125\263\126\331\131\226\151\215\152\333" +
    "\153\277\154\326\155\323\156\334\157\307\160\336\161" +
    "\316\162\310\163\330\164\325\165\376\166\320\167\220" +
    "\171\u0163\172\335\173\312\174\311\175\322\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\106\003\225\004\301\005" +
    "\260\006\071\007\073\010\237\011\233\057\227\063\u0169" +
    "\064\270\067\246\071\271\072\236\073\273\074\214\075" +
    "\221\076\276\100\264\102\255\103\231\124\241\125\263" +
    "\126\261\131\226\151\215\152\265\153\277\154\256\166" +
    "\240\167\220\172\272\173\224\174\222\175\251\001\001" +
    "\000\002\001\001\000\010\132\u0179\133\u016d\220\u0178\001" +
    "\001\000\006\132\u016e\133\u016d\001\001\000\004\222\u0176" +
    "\001\001\000\002\001\001\000\010\133\u0173\134\u0172\135" +
    "\u0175\001\001\000\074\003\225\005\327\006\071\010\317" +
    "\011\314\124\241\125\263\126\331\131\226\151\215\152" +
    "\333\153\277\154\326\155\323\156\334\157\307\160\336" +
    "\161\316\162\310\163\330\164\325\165\376\166\320\167" +
    "\220\171\u0170\172\335\173\312\174\311\175\322\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\074\003\225\005\327\006\071\010\317" +
    "\011\314\124\241\125\263\126\331\131\226\151\215\152" +
    "\333\153\277\154\326\155\323\156\334\157\307\160\336" +
    "\161\316\162\310\163\330\164\325\165\376\166\320\167" +
    "\220\171\u0170\172\335\173\312\174\311\175\322\001\001" +
    "\000\002\001\001\000\004\133\u0177\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\133\u0173\134\u017a\135\u0175" +
    "\001\001\000\002\001\001\000\100\003\225\005\327\006" +
    "\071\010\317\011\314\124\241\125\263\126\331\127\u017c" +
    "\130\375\131\226\151\215\152\333\153\277\154\326\155" +
    "\323\156\334\157\307\160\336\161\316\162\310\163\330" +
    "\164\325\165\376\166\320\167\220\171\373\172\335\173" +
    "\312\174\311\175\322\001\001\000\002\001\001\000\006" +
    "\024\u017f\025\u017e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\100\003\225" +
    "\005\327\006\071\010\317\011\314\124\241\125\263\126" +
    "\331\127\u0183\130\375\131\226\151\215\152\333\153\277" +
    "\154\326\155\323\156\334\157\307\160\336\161\316\162" +
    "\310\163\330\164\325\165\376\166\320\167\220\171\373" +
    "\172\335\173\312\174\311\175\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\003\225\005\327\006\071" +
    "\010\317\011\314\124\241\125\263\126\331\131\226\151" +
    "\215\152\333\153\277\154\326\155\323\156\334\157\307" +
    "\160\336\161\316\162\310\163\330\164\325\165\376\166" +
    "\320\167\220\170\u0187\171\u0186\172\335\173\312\174\311" +
    "\175\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\213\u01e4\001\001\000\004\136\u018d\001\001\000\074\003" +
    "\225\005\327\006\071\010\317\011\314\124\241\125\263" +
    "\126\331\131\226\151\215\152\333\153\277\154\326\155" +
    "\323\156\334\157\307\160\336\161\316\162\310\163\330" +
    "\164\325\165\376\166\320\167\220\171\u018e\172\335\173" +
    "\312\174\311\175\322\001\001\000\004\137\u01c2\001\001" +
    "\000\040\214\u0190\217\352\223\351\224\350\225\353\226" +
    "\u010a\227\u0109\230\u0108\231\u0107\232\u0105\233\u0104\234\u0106" +
    "\235\u0103\236\u0102\237\u0101\001\001\000\004\137\u0191\001" +
    "\001\000\002\001\001\000\074\003\225\005\327\006\071" +
    "\010\317\011\314\057\227\070\u0194\071\u019a\072\236\073" +
    "\273\074\214\077\u0193\101\u0198\102\255\104\u0197\124\241" +
    "\125\263\126\261\131\226\151\215\152\265\153\277\154" +
    "\256\166\240\167\220\172\272\173\224\174\222\175\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\141\u019c\001" +
    "\001\000\074\003\225\005\327\006\071\010\317\011\314" +
    "\124\241\125\263\126\331\131\226\151\215\152\333\153" +
    "\277\154\326\155\323\156\334\157\307\160\336\161\316" +
    "\162\310\163\330\164\325\165\376\166\320\167\220\171" +
    "\u019d\172\335\173\312\174\311\175\322\001\001\000\004" +
    "\137\u019e\001\001\000\002\001\001\000\074\003\225\005" +
    "\327\006\071\010\317\011\314\057\227\070\u01a0\071\u019a" +
    "\072\236\073\273\074\214\077\u0193\101\u0198\102\255\104" +
    "\u0197\124\241\125\263\126\261\131\226\151\215\152\265" +
    "\153\277\154\256\166\240\167\220\172\272\173\224\174" +
    "\222\175\251\001\001\000\002\001\001\000\004\136\u01a2" +
    "\001\001\000\074\003\225\005\327\006\071\010\317\011" +
    "\314\124\241\125\263\126\331\131\226\151\215\152\333" +
    "\153\277\154\326\155\323\156\334\157\307\160\336\161" +
    "\316\162\310\163\330\164\325\165\376\166\320\167\220" +
    "\171\u01a3\172\335\173\312\174\311\175\322\001\001\000" +
    "\004\137\u01a4\001\001\000\002\001\001\000\074\003\225" +
    "\005\327\006\071\010\317\011\314\057\227\070\u01a6\071" +
    "\u019a\072\236\073\273\074\214\077\u0193\101\u0198\102\255" +
    "\104\u0197\124\241\125\263\126\261\131\226\151\215\152" +
    "\265\153\277\154\256\166\240\167\220\172\272\173\224" +
    "\174\222\175\251\001\001\000\004\140\u01a7\001\001\000" +
    "\002\001\001\000\074\003\225\005\327\006\071\010\317" +
    "\011\314\057\227\070\u01a9\071\u019a\072\236\073\273\074" +
    "\214\077\u0193\101\u0198\102\255\104\u0197\124\241\125\263" +
    "\126\261\131\226\151\215\152\265\153\277\154\256\166" +
    "\240\167\220\172\272\173\224\174\222\175\251\001\001" +
    "\000\002\001\001\000\066\003\225\004\u01b0\005\260\006" +
    "\071\007\073\010\237\011\233\066\u01ad\074\u01ab\105\u01ae" +
    "\106\u01af\111\u01ac\124\241\125\263\126\261\131\226\151" +
    "\215\152\265\153\277\154\256\166\240\167\220\172\272" +
    "\173\224\174\222\175\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\u01b2\041\141\001\001\000\004\202" +
    "\157\001\001\000\004\013\u01b3\001\001\000\002\001\001" +
    "\000\004\141\u01b5\001\001\000\076\003\225\005\327\006" +
    "\071\010\317\011\314\124\241\125\263\126\331\131\226" +
    "\151\215\152\333\153\277\154\326\155\323\156\334\157" +
    "\307\160\336\161\316\162\310\163\330\164\325\165\376" +
    "\166\320\167\220\170\u01b6\171\u0186\172\335\173\312\174" +
    "\311\175\322\001\001\000\004\137\u01b7\001\001\000\002" +
    "\001\001\000\060\003\225\005\327\006\071\010\317\011" +
    "\314\074\u01ab\107\u01bb\110\u01b9\111\u01ba\124\241\125\263" +
    "\126\261\131\226\151\215\152\265\153\277\154\256\166" +
    "\240\167\220\172\272\173\224\174\222\175\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\003\225\005\327\006\071\010\317\011\314\057\227" +
    "\070\u01bd\071\u019a\072\236\073\273\074\214\077\u0193\101" +
    "\u0198\102\255\104\u0197\124\241\125\263\126\261\131\226" +
    "\151\215\152\265\153\277\154\256\166\240\167\220\172" +
    "\272\173\224\174\222\175\251\001\001\000\002\001\001" +
    "\000\052\003\225\005\327\006\071\010\317\011\314\074" +
    "\u01bf\124\241\125\263\126\261\131\226\151\215\152\265" +
    "\153\277\154\256\166\240\167\220\172\272\173\224\174" +
    "\222\175\251\001\001\000\002\001\001\000\076\003\225" +
    "\005\327\006\071\010\317\011\314\057\227\067\u01c1\071" +
    "\271\072\236\073\273\074\214\075\221\076\276\100\264" +
    "\102\255\103\231\124\241\125\263\126\261\131\226\151" +
    "\215\152\265\153\277\154\256\166\240\167\220\172\272" +
    "\173\224\174\222\175\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\106\003\225\005\327\006\071\010\317" +
    "\011\314\057\227\067\u01c7\070\u01c4\071\u01c9\072\236\073" +
    "\273\074\214\075\221\076\276\077\u0193\100\264\101\u0198" +
    "\102\255\103\231\104\u0197\124\241\125\263\126\261\131" +
    "\226\151\215\152\265\153\277\154\256\166\240\167\220" +
    "\172\272\173\224\174\222\175\251\001\001\000\004\140" +
    "\u01e2\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\141" +
    "\u01cb\001\001\000\074\003\225\005\327\006\071\010\317" +
    "\011\314\124\241\125\263\126\331\131\226\151\215\152" +
    "\333\153\277\154\326\155\323\156\334\157\307\160\336" +
    "\161\316\162\310\163\330\164\325\165\376\166\320\167" +
    "\220\171\u01cc\172\335\173\312\174\311\175\322\001\001" +
    "\000\004\137\u01cd\001\001\000\002\001\001\000\106\003" +
    "\225\005\327\006\071\010\317\011\314\057\227\067\u015d" +
    "\070\u01a0\071\u01c9\072\236\073\273\074\214\075\221\076" +
    "\276\077\u0193\100\264\101\u0198\102\255\103\231\104\u0197" +
    "\124\241\125\263\126\261\131\226\151\215\152\265\153" +
    "\277\154\256\166\240\167\220\172\272\173\224\174\222" +
    "\175\251\001\001\000\004\136\u01d0\001\001\000\074\003" +
    "\225\005\327\006\071\010\317\011\314\124\241\125\263" +
    "\126\331\131\226\151\215\152\333\153\277\154\326\155" +
    "\323\156\334\157\307\160\336\161\316\162\310\163\330" +
    "\164\325\165\376\166\320\167\220\171\u01d1\172\335\173" +
    "\312\174\311\175\322\001\001\000\004\137\u01d2\001\001" +
    "\000\002\001\001\000\106\003\225\005\327\006\071\010" +
    "\317\011\314\057\227\067\u01c7\070\u01d4\071\u01c9\072\236" +
    "\073\273\074\214\075\221\076\276\077\u0193\100\264\101" +
    "\u0198\102\255\103\231\104\u0197\124\241\125\263\126\261" +
    "\131\226\151\215\152\265\153\277\154\256\166\240\167" +
    "\220\172\272\173\224\174\222\175\251\001\001\000\004" +
    "\140\u01d5\001\001\000\002\001\001\000\106\003\225\005" +
    "\327\006\071\010\317\011\314\057\227\067\u01d7\070\u01a9" +
    "\071\u01c9\072\236\073\273\074\214\075\221\076\276\077" +
    "\u0193\100\264\101\u0198\102\255\103\231\104\u0197\124\241" +
    "\125\263\126\261\131\226\151\215\152\265\153\277\154" +
    "\256\166\240\167\220\172\272\173\224\174\222\175\251" +
    "\001\001\000\002\001\001\000\066\003\225\004\u01b0\005" +
    "\260\006\071\007\073\010\237\011\233\066\u01ad\074\u01ab" +
    "\105\u01d9\106\u01af\111\u01ac\124\241\125\263\126\261\131" +
    "\226\151\215\152\265\153\277\154\256\166\240\167\220" +
    "\172\272\173\224\174\222\175\251\001\001\000\002\001" +
    "\001\000\004\141\u01db\001\001\000\076\003\225\005\327" +
    "\006\071\010\317\011\314\124\241\125\263\126\331\131" +
    "\226\151\215\152\333\153\277\154\326\155\323\156\334" +
    "\157\307\160\336\161\316\162\310\163\330\164\325\165" +
    "\376\166\320\167\220\170\u01dc\171\u0186\172\335\173\312" +
    "\174\311\175\322\001\001\000\004\137\u01dd\001\001\000" +
    "\002\001\001\000\060\003\225\005\327\006\071\010\317" +
    "\011\314\074\u01ab\107\u01df\110\u01b9\111\u01ba\124\241\125" +
    "\263\126\261\131\226\151\215\152\265\153\277\154\256" +
    "\166\240\167\220\172\272\173\224\174\222\175\251\001" +
    "\001\000\002\001\001\000\106\003\225\005\327\006\071" +
    "\010\317\011\314\057\227\067\u01e1\070\u01bd\071\u01c9\072" +
    "\236\073\273\074\214\075\221\076\276\077\u0193\100\264" +
    "\101\u0198\102\255\103\231\104\u0197\124\241\125\263\126" +
    "\261\131\226\151\215\152\265\153\277\154\256\166\240" +
    "\167\220\172\272\173\224\174\222\175\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\003\225\005\327" +
    "\006\071\010\317\011\314\057\227\067\u01d7\071\271\072" +
    "\236\073\273\074\214\075\221\076\276\100\264\102\255" +
    "\103\231\124\241\125\263\126\261\131\226\151\215\152" +
    "\265\153\277\154\256\166\240\167\220\172\272\173\224" +
    "\174\222\175\251\001\001\000\004\137\u01e5\001\001\000" +
    "\002\001\001\000\076\003\225\005\327\006\071\010\317" +
    "\011\314\057\227\067\u01e7\071\271\072\236\073\273\074" +
    "\214\075\221\076\276\100\264\102\255\103\231\124\241" +
    "\125\263\126\261\131\226\151\215\152\265\153\277\154" +
    "\256\166\240\167\220\172\272\173\224\174\222\175\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\100\003\225\005\327\006\071\010\317\011\314" +
    "\124\241\125\263\126\331\127\u01eb\130\375\131\226\151" +
    "\215\152\333\153\277\154\326\155\323\156\334\157\307" +
    "\160\336\161\316\162\310\163\330\164\325\165\376\166" +
    "\320\167\220\171\373\172\335\173\312\174\311\175\322" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\003" +
    "\225\004\u01b0\005\260\006\071\007\073\010\237\011\233" +
    "\066\u01ad\074\u01ab\105\u01ee\106\u01af\111\u01ac\124\241\125" +
    "\263\126\261\131\226\151\215\152\265\153\277\154\256" +
    "\166\240\167\220\172\272\173\224\174\222\175\251\001" +
    "\001\000\002\001\001\000\004\141\u01f0\001\001\000\076" +
    "\003\225\005\327\006\071\010\317\011\314\124\241\125" +
    "\263\126\331\131\226\151\215\152\333\153\277\154\326" +
    "\155\323\156\334\157\307\160\336\161\316\162\310\163" +
    "\330\164\325\165\376\166\320\167\220\170\u01f1\171\u0186" +
    "\172\335\173\312\174\311\175\322\001\001\000\004\137" +
    "\u01f2\001\001\000\002\001\001\000\060\003\225\005\327" +
    "\006\071\010\317\011\314\074\u01ab\107\u01f4\110\u01b9\111" +
    "\u01ba\124\241\125\263\126\261\131\226\151\215\152\265" +
    "\153\277\154\256\166\240\167\220\172\272\173\224\174" +
    "\222\175\251\001\001\000\002\001\001\000\076\003\225" +
    "\005\327\006\071\010\317\011\314\057\227\067\u01e1\071" +
    "\271\072\236\073\273\074\214\075\221\076\276\100\264" +
    "\102\255\103\231\124\241\125\263\126\261\131\226\151" +
    "\215\152\265\153\277\154\256\166\240\167\220\172\272" +
    "\173\224\174\222\175\251\001\001\000\074\003\225\005" +
    "\327\006\071\010\317\011\314\124\241\125\263\126\331" +
    "\131\226\151\215\152\333\153\277\154\326\155\323\156" +
    "\334\157\307\160\336\161\316\162\310\163\330\164\325" +
    "\165\376\166\320\167\220\171\u01f7\172\335\173\312\174" +
    "\311\175\322\001\001\000\002\001\001\000\040\216\u01f9" +
    "\217\352\223\351\224\350\225\353\226\u010a\227\u0109\230" +
    "\u0108\231\u0107\232\u0105\233\u0104\234\u0106\235\u0103\236\u0102" +
    "\237\u0101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\150\u01fd\001\001\000\072\003\225" +
    "\005\327\006\071\010\317\011\314\124\241\125\263\126" +
    "\331\131\226\151\215\152\333\153\277\154\326\155\323" +
    "\156\334\157\307\160\336\161\316\162\310\163\330\164" +
    "\325\165\u01fe\166\320\167\220\172\335\173\312\174\311" +
    "\175\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\112\003\225\004\301\005\260\006\071" +
    "\007\073\010\237\011\233\057\227\061\u0202\062\274\063" +
    "\267\064\270\067\246\071\271\072\236\073\273\074\214" +
    "\075\221\076\276\100\264\102\255\103\231\124\241\125" +
    "\263\126\261\131\226\151\215\152\265\153\277\154\256" +
    "\166\240\167\220\172\272\173\224\174\222\175\251\001" +
    "\001\000\002\001\001\000\012\210\u0204\211\u0168\217\352" +
    "\237\u0101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\u0209\001\001\000\002\001\001" +
    "\000\114\003\225\004\301\005\260\006\071\007\073\010" +
    "\237\011\233\054\u020a\057\227\061\u020d\062\274\063\267" +
    "\064\270\067\246\071\271\072\236\073\273\074\214\075" +
    "\221\076\276\100\264\102\255\103\231\124\u020b\125\263" +
    "\126\261\131\226\151\215\152\265\153\277\154\256\166" +
    "\240\167\220\172\272\173\224\174\222\175\251\001\001" +
    "\000\112\003\225\004\301\005\260\006\071\007\073\010" +
    "\237\011\233\057\227\061\u0225\062\274\063\267\064\270" +
    "\067\246\071\271\072\236\073\273\074\214\075\221\076" +
    "\276\100\264\102\255\103\231\124\241\125\263\126\261" +
    "\131\226\151\215\152\265\153\277\154\256\166\240\167" +
    "\220\172\272\173\224\174\222\175\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\211\u0168\217\352\237\u0101\001\001\000\002" +
    "\001\001\000\100\003\225\005\327\006\071\010\317\011" +
    "\314\124\241\125\263\126\331\127\u0212\130\375\131\226" +
    "\151\215\152\333\153\277\154\326\155\323\156\334\157" +
    "\307\160\336\161\316\162\310\163\330\164\325\165\376" +
    "\166\320\167\220\171\373\172\335\173\312\174\311\175" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\100\003\225\005\327\006" +
    "\071\010\317\011\314\124\241\125\263\126\331\127\u0217" +
    "\130\375\131\226\151\215\152\333\153\277\154\326\155" +
    "\323\156\334\157\307\160\336\161\316\162\310\163\330" +
    "\164\325\165\376\166\320\167\220\171\373\172\335\173" +
    "\312\174\311\175\322\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\100\003\225\005\327\006\071" +
    "\010\317\011\314\124\241\125\263\126\331\127\u021e\130" +
    "\375\131\226\151\215\152\333\153\277\154\326\155\323" +
    "\156\334\157\307\160\336\161\316\162\310\163\330\164" +
    "\325\165\376\166\320\167\220\171\373\172\335\173\312" +
    "\174\311\175\322\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\100\003\225\005\327\006\071" +
    "\010\317\011\314\124\241\125\263\126\331\127\u0222\130" +
    "\375\131\226\151\215\152\333\153\277\154\326\155\323" +
    "\156\334\157\307\160\336\161\316\162\310\163\330\164" +
    "\325\165\376\166\320\167\220\171\373\172\335\173\312" +
    "\174\311\175\322\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\211\u0168" +
    "\217\352\237\u0101\001\001\000\002\001\001\000\004\177" +
    "\u0229\001\001\000\004\024\u022a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	if(first) {	Type.initTypes();
			Env.initFirst();
	}
	if(second) Env.initSecond();

    }

 

  public static Scanner s;
  public static int errors = 0;
  public static int warnings = 0;
  public static boolean first = true, second = false;
  public static StringBuffer code = new StringBuffer();
  public static String objLoc = "null";

  public static void main(String argv[]) {

    for (int i = 0; i < argv.length; i++) {
      try { System.out.println("\n... Creating Symbol-Table for \""+argv[i]+"\" ...\n");
	  	s = new Scanner(new FileReader(argv[i]));
        	parser p = new parser(s);
        	p.parse();
        	System.out.println("Number of errors = " + errors + ".");
        	System.out.println("Number of warnings = " + warnings + ".");
		Type.printTypes();
	  	first = false;
	  	second = true;
        	System.out.println("\n... Generating intermediate code for \""+argv[i]+"\" ...\n");
		code.append("		; ModuleID = '"+argv[i]+".ll'\n\n");
		code.append("target datalayout = \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-s0:0:64-f80:32:32\"\n");
		code.append("target triple = \"i686-pc-linux-gnu\"\n\n");
		code.append("		; Global values\n");
		Set glob = Env.getGlobals().entrySet();
  		Iterator it = glob.iterator();
		while(it.hasNext()) { Map.Entry entry = (Map.Entry)it.next();
					    String key = (String)entry.getKey();
					    String value = (String)entry.getValue();
					    if (value.equals("struct")) code.append(key+"\n");
					    else { int lth = key.length() + 1;
						     code.append(value+" = internal constant ["+lth+" x i8] "+" c\""+key+"\\00\"\n");
					    }
		}
		code.append("\n");
		code.append("		; External declarations\n");
		code.append("declare i32 @printf(i8*, ...)\n");
		code.append("declare i32 @scanf(i8*, ...)\n\n");
        	s = new Scanner(new FileReader(argv[i]));
	  	p = new parser(s);
        	p.parse();
        	System.out.println("Number of errors = " + errors + ".");
        	System.out.println("Number of warnings = " + warnings + ".");
		Type.printTypes();
	  	if (errors == 0) try { FileOutputStream  fStream;
   					     PrintWriter  myStream;
   			      	     fStream = new FileOutputStream(argv[i]+".ll");
   					     myStream = new PrintWriter(fStream);
   					     myStream.println(code); 
   					     myStream.flush();
   					     myStream.close();
        				     System.out.println("\nCode written to \""+argv[i]+".ll\".");
				     }
				     catch (IOException e) { e.printStackTrace(System.out);
        			    				     System.exit(1);
      			     }
		else System.out.println("\nNo code produced.");
		System.out.println("--------------------------------------- (parser)");
      }
      catch (Exception e) { e.printStackTrace(System.out);
        			    System.exit(1);
      }
    }
  }
  
  public void report_error(String message, Object info) {
    if (info instanceof String){
	errors++; 
      System.err.println("  "+ errors + "==> " + info + " "+ message + 
					"\n       Parsing resumed from 2nd token before" + s.yytext()+"\n");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }

  public void sem_error(String lexeme, String message) {
	errors++;
     	System.err.println("Error "+ s.yytext() + " : Semantic error");
      System.err.println("  "+ errors + "==> " + message + ": "+ lexeme + "\n");
  }

  public void warning(String lexeme, String message) {
	warnings++;
     	System.err.println("Warning "+ s.yytext());
      System.err.println("  "+ warnings + "==> " + message + ": "+ lexeme + "\n");
  } 
  
  public void report_fatal_error(String message, Object info) {
    	report_error(message, info);
    	throw new RuntimeException("Fatal Syntax Error");
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



	class Sname {
	  public String name;
	  public Symb cs;
	  public Symb rs;

	  Sname(String n, Symb c, Symb r) {
		name = n;
		cs = c;
		rs = r;
	  }

	  public String toString(){
		return "Sname["+name+", "+cs+", "+rs+"]";
	  }
	}

	class Exp {
	  public Type type;
	  public String locT;
	  public String locN;
	  public Labels lab;

	  Exp(Type t, String lt, String ln) {
		type = t;
		locT = lt;
		locN = ln;
	  }

	  Exp(Type t, Labels l) {
		type = t;
		lab = l;
	  }

	  Exp(Type t, String lt, String ln, Labels l) {
		type = t;
		locT = lt;
		locN = ln;
		lab = l;
	  }

  	  public void load () {
		if(locN.startsWith("getelementptr")) { parser.code.append("	"+Tmp.nv()+" = "+locN+"\n");
								   locN = Tmp.lv();
		}
		if(locT.endsWith("*") && !locT.startsWith("%struct")) { parser.code.append("	"+Tmp.nv()+" = load "+locT+" "+locN+"\n");
					   	 					  locT = locT.replaceFirst("\\*", "");
					   	 					  locN = Tmp.lv();
		}
  	  }

  	  public String widen(Type w) {
		if(type == w) return locN;
 		if(type.isInteger() && w.isFloating()) parser.code.append("	"+Tmp.nv()+" = sitofp i32 "+locN+" to double\n");
 		if(type.isCharacter() && w.isFloating()) parser.code.append("	"+Tmp.nv()+" = sitofp i8 "+locN+" to double\n");
 		if(type.isCharacter() && w.isInteger()) parser.code.append("	"+Tmp.nv()+" = sext i8 "+locN+" to i32\n");
		return Tmp.lv();
  	  }

	}

	class ParamList {
	  public Type type;
	  public List list;

	  ParamList(Type t, List l) {
		type = t;
		list = l;
	  }
	}

	class Labels {
	  public String lBegin;
	  public String lTrue;
	  public String lFalse;
	  public String lNext;
	  public boolean bvalue;
	  public boolean bvDone;

	  Labels() {
		lBegin = Tmp.nl();
		lTrue = Tmp.nl();
		lFalse = Tmp.nl();
		lNext = Tmp.nl();
		bvalue = false;
		bvDone = false;
	  }
	}

	class Vars {
	  public Env e;
	  public List vl;

	  Vars(Env ee, List l) {
		e = ee;
		vl = l;
	  }
	}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // expression ::= assignment_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",119, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // expression_opt ::= expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_opt",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // expression_opt ::= 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_opt",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // left_hand_side ::= array_access 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("left_hand_side",117, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // left_hand_side ::= field_access 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("left_hand_side",117, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // left_hand_side ::= name 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   		 			   	 RESULT = new Exp(Type.errortype(), "", "");
			   			     }
			   			     else { String locN = sn.cs.getLocN();
								if(locN.startsWith("getelementptr")) { String cn = Name.getCurrentClass().getName();
														   parser.code.append("		; left_hand_side\n");
														   locN = locN.replaceFirst("struct.+\\*", "struct."+cn+"*");
														   parser.code.append("	"+Tmp.nv()+" = "+locN+"\n");
														   locN = Tmp.lv();
					   	 								   RESULT = new Exp(sn.cs.getType(), sn.cs.getLocT(), Tmp.lv());
							      }
								else RESULT = new Exp(sn.cs.getType(), sn.cs.getLocT(), sn.cs.getLocN());
						     }

			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("left_hand_side",117, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // assignment ::= error NT$33 EQ assignment_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // NT$33 ::= 
            {
              Exp RESULT =null;
 parser.report_error("left_hand_side","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",157, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // assignment ::= left_hand_side EQ M14 assignment_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(e1.type.isArray()) { if(e1.type != e2.type) { parser.sem_error(""+e1.type+", "+e2.type, "INCOMPATIBLE TYPES");
				    						    	   			    RESULT = new Exp(Type.errortype(), "", "");
			   			   	  			   }
										   else { Symb s = Env.get(e1.locN.replaceFirst("%", ""));
											    s.putLocT(e2.locT);
											    s.putLocN(e2.locN);
										   }
						   }
						   else if(e1.type != e2.type) if(e1.type.isNumber() && e2.type.isNumber()) { Type t = Type.max(e1.type, e2.type);
															 				if(e2.type != t) { parser.code.append("		; assignment\n");
																						 e2.load();
									  						 							 String l2 = e2.widen(t);
							    	  														 parser.code.append("	store "+t.getCode()+" "+l2+", "+e1.locT+" "+e1.locN+"\n");
							    	  														 RESULT = new Exp(e1.type, e1.locT, e1.locN, l);
																			}
							  				 								else { parser.sem_error(""+e1.type+", "+e2.type, "LEFT-HAND TYPE SHORTER THAN RIGHT-END TYPE");
				    						    	   	  								 RESULT = new Exp(Type.errortype(), "", "");
			   			   	  				 								}
											 }
							  				 else { parser.sem_error(""+e1.type+", "+e2.type, "INCOMPATIBLE TYPES");
				    						    	   	  RESULT = new Exp(Type.errortype(), "", "");
			   			   	  				 }
			   			   	  else { parser.code.append("		; assignment\n");
							    	   if(e2.type.isBool() && !e2.lab.bvDone) { parser.code.append(e2.lab.lTrue+":	; l_True\n");
											   			   	  parser.code.append("	br label %"+e2.lab.lNext+"\n");
											   			   	  parser.code.append(e2.lab.lFalse+":	; l_False\n");
											   			  	  parser.code.append("	br label %"+e2.lab.lNext+"\n");
											   			  	  parser.code.append(e2.lab.lNext+":	; l_Next\n");
											  			   	  parser.code.append("	"+Tmp.nv()+" = phi i1 [true, %"+e2.lab.lTrue+"] ,[false, %"+e2.lab.lFalse+"]\n");
											   			   	  e2.locT = "i1";
											   			  	  e2.locN = Tmp.lv();
							    	   }
								   e2.load();
							    	   parser.code.append("	store "+e2.locT+" "+e2.locN+", "+e1.locT+" "+e1.locN+"\n");
							    	   RESULT = new Exp(e1.type, e1.locT, e1.locN, l);
						   	 }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // assignment_expression ::= assignment 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",115, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // assignment_expression ::= conditional_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",115, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // conditional_expression ::= error NT$32 QUESTION expression COLON conditional_or_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // NT$32 ::= 
            {
              Exp RESULT =null;
 parser.report_error("conditional_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",156, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // conditional_expression ::= conditional_or_expression QUESTION M12 expression COLON M13 conditional_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isBool();
						     if(!b1) { parser.sem_error(""+e1.type, "NOT A BOOLEAN");
								   RESULT = new Exp(Type.errortype(), "", "");
						     }
			   			     else if(e2.type != e3.type) if(e2.type.isNumber() && e3.type.isNumber()) { e2.load();
							    											 	  e3.load();
									  									 	  Type t = Type.max(e2.type, e3.type);
									  									 	  String l2 = e2.widen(t);
									  									 	  String l3 = e3.widen(t);
												  							  parser.code.append("	br label %"+e1.lab.lNext+"\n");
						     						  							  parser.code.append(e1.lab.lNext+": 	; l_Next\n");
												  							  parser.code.append("	"+Tmp.nv()+" = phi "+t.getCode()+" ["+l2+", %"+e1.lab.lTrue+"] ,["+l3+", %"+e1.lab.lFalse+"]\n");
											       							  RESULT = new Exp(t, t.getCode(), Tmp.lv());
						     					   }
							    				   else { parser.sem_error(""+e2.type+", "+e3.type, "INCOMPATIBLE TYPES");
								     				    RESULT = new Exp(Type.errortype(), "", "");
						     	    				   }
				    		          else { e3.load();
								     parser.code.append("	br label %"+e1.lab.lNext+"\n");
						     		     parser.code.append(e1.lab.lNext+": 	; l_Next\n");
								     parser.code.append("	"+Tmp.nv()+" = phi "+e2.locT+" ["+e2.locN+", %"+e1.lab.lTrue+"] ,["+e3.locN+", %"+e1.lab.lFalse+"]\n");
								     RESULT = new Exp(e2.type, e2.type.getCode(), Tmp.lv());
						     	    }	   
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // conditional_expression ::= conditional_or_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",114, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // M13 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Exp e1 = (Exp)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
						     Exp e2 = (Exp)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
						     e2.load();
						     parser.code.append("	br label %"+e1.lab.lNext+"\n");
						     parser.code.append(e1.lab.lFalse+": 	; l_False\n");
						     RESULT = e1.lab;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M13",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // M12 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Exp e = (Exp)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
						     parser.code.append("		; conditional_expression\n");
						     if (e.lab.bvalue) { e.load();
										 parser.code.append("	br i1 "+e.locN+", label %"+e.lab.lTrue+", label %"+e.lab.lFalse+"\n");
						     }
						     parser.code.append(e.lab.lTrue+": 	; l_True\n");
						     RESULT = e.lab; 
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M12",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // conditional_or_expression ::= error NT$31 OROR conditional_and_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // NT$31 ::= 
            {
              Exp RESULT =null;
 parser.report_error("conditional_or_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",155, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // conditional_or_expression ::= conditional_or_expression OROR M9 conditional_and_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isBool();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A BOOLEAN");
			   			     boolean b2 = e2.type.isBool();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A BOOLEAN");
				    		     if(b1 && b2) RESULT = e2;	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // conditional_or_expression ::= conditional_and_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",113, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // M9 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
						     parser.code.append("		; conditional_or_expression\n");
						     parser.code.append(l.lFalse+":	; l_False\n");
						     l.lFalse = Tmp.nl();
			   	    		     RESULT = l;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M9",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // conditional_and_expression ::= error NT$30 ANDAND equality_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // NT$30 ::= 
            {
              Exp RESULT =null;
 parser.report_error("conditional_and_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",154, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // conditional_and_expression ::= conditional_and_expression ANDAND M8 equality_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isBool();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A BOOLEAN");
			   			     boolean b2 = e2.type.isBool();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A BOOLEAN");
				    		     if(b1 && b2) RESULT = e2;	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // conditional_and_expression ::= equality_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // M8 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
						     parser.code.append("		; conditional_and_expression\n");
						     parser.code.append(l.lTrue+":	; l_True\n");
						     l.lTrue = Tmp.nl();
			   	    		     RESULT = l;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M8",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // equality_expression ::= error NT$29 NOTEQ relational_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // NT$29 ::= 
            {
              Exp RESULT =null;
 parser.report_error("equality_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",153, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // equality_expression ::= error NT$28 EQEQ relational_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // NT$28 ::= 
            {
              Exp RESULT =null;
 parser.report_error("equality_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",152, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // equality_expression ::= equality_expression NOTEQ relational_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(e1.type != e2.type) if(e1.type.isNumber() && e2.type.isNumber()) { parser.code.append("		; equality_NOTEQ_expression\n");
							    											 Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
							    											 e1.load();
							    											 e2.load();
									  									 Type t = Type.max(e1.type, e2.type);
									  									 String l1 = e1.widen(t);
									  									 String l2 = e2.widen(t);
							    											 parser.code.append("	"+Tmp.nv()+" = icmp ne "+t.getCode()+" "+l1+", "+l2+"\n");
							    											 parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
							    											 RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
							  			  }
							  			  else { parser.sem_error(""+e1.type+", "+e2.type, "INCOMPATIBLE TYPES");
				    						    	   RESULT = new Exp(Type.errortype(), "", "");
			   			   	  			  }
 						   else { parser.code.append("		; equality_NOTEQ_expression\n");
							    Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
							    e1.load();
							    e2.load(); 
							    parser.code.append("	"+Tmp.nv()+" = icmp ne "+e1.locT+" "+e1.locN+", "+e2.locN+"\n");
							    parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
							    RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						   }	   
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // equality_expression ::= equality_expression EQEQ relational_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(e1.type != e2.type) if(e1.type.isNumber() && e2.type.isNumber()) { parser.code.append("		; equality_EQEQ_expression\n");
							    											 Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
							    											 e1.load();
							    											 e2.load();
									  									 Type t = Type.max(e1.type, e2.type);
									  									 String l1 = e1.widen(t);
									  									 String l2 = e2.widen(t);
							    											 parser.code.append("	"+Tmp.nv()+" = icmp eq "+t.getCode()+" "+l1+", "+l2+"\n");
							    											 parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
							    											 RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
							  			  }
							  			  else { parser.sem_error(""+e1.type+", "+e2.type, "INCOMPATIBLE TYPES");
				    						    	   RESULT = new Exp(Type.errortype(), "", "");
			   			   	  			  }
 						   else { parser.code.append("		; equality_EQEQ_expression\n");
							    Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
							    e1.load();
							    e2.load();
							    parser.code.append("	"+Tmp.nv()+" = icmp eq "+e1.locT+" "+e1.locN+", "+e2.locN+"\n");
							    parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
							    RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						   }	   	   
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // equality_expression ::= relational_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",111, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // relational_expression ::= error NT$27 GTEQ additive_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // NT$27 ::= 
            {
              Exp RESULT =null;
 parser.report_error("relational_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",151, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // relational_expression ::= error NT$26 LTEQ additive_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // NT$26 ::= 
            {
              Exp RESULT =null;
 parser.report_error("relational_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",150, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // relational_expression ::= error NT$25 GT additive_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // NT$25 ::= 
            {
              Exp RESULT =null;
 parser.report_error("relational_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",149, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // relational_expression ::= error NT$24 LT additive_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // NT$24 ::= 
            {
              Exp RESULT =null;
 parser.report_error("relational_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",148, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // relational_expression ::= relational_expression GTEQ additive_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; relational_GTEQ_expression\n");
									  Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
									  e1.load();
									  e2.load();
							  		  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+Tmp.nv()+" = icmp sge "+t.getCode()+" "+l1+", "+l2+"\n");
									  parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
									  RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						     }	   	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // relational_expression ::= relational_expression LTEQ additive_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; relational_LTEQ_expression\n");
									  Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
									  e1.load();
									  e2.load();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+Tmp.nv()+" = icmp sle "+t.getCode()+" "+l1+", "+l2+"\n");
									  parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
									  RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						     }	   	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // relational_expression ::= relational_expression GT additive_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; relational_GT_expression\n");
									  Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
									  e1.load();
									  e2.load();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+Tmp.nv()+" = icmp sgt "+t.getCode()+" "+l1+", "+l2+"\n");
									  parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
									  RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						     }	   	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // relational_expression ::= relational_expression LT additive_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; relational_LT_expression\n");
									  Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
									  e1.load();
									  e2.load();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+Tmp.nv()+" = icmp slt "+t.getCode()+" "+l1+", "+l2+"\n");
									  parser.code.append("	br i1 "+Tmp.lv()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
									  RESULT = new Exp(Type.bool(), "i1", Tmp.lv(), l);
						     }	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // relational_expression ::= additive_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; additive_MINUS_expression\n");
									  e1.load();
									  e2.load();
									  String loc = ""+Tmp.nv();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+loc+" = sub "+t.getCode()+" "+l1+", "+l2+"\n");
									  RESULT = new Exp(t, t.getCode(), loc);
						     }	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; additive_PLUS_expression\n");
									  e1.load();
									  e2.load();
									  String loc = ""+Tmp.nv();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+loc+" = add "+t.getCode()+" "+l1+", "+l2+"\n");
									  RESULT = new Exp(t, t.getCode(), loc);
						     }	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // additive_expression ::= multiplicative_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // multiplicative_expression ::= error NT$23 MOD unary_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // NT$23 ::= 
            {
              Exp RESULT =null;
 parser.report_error("multiplicative_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",147, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // multiplicative_expression ::= error NT$22 DIV unary_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // NT$22 ::= 
            {
              Exp RESULT =null;
 parser.report_error("multiplicative_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",146, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // multiplicative_expression ::= error NT$21 MULT unary_expression 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // NT$21 ::= 
            {
              Exp RESULT =null;
 parser.report_error("multiplicative_expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",145, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // multiplicative_expression ::= multiplicative_expression MOD unary_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isInteger();
						     if(!b1) parser.sem_error(""+e1.type, "NOT AN INTEGER");
			   			     boolean b2 = e2.type.isInteger();
						     if(!b2) parser.sem_error(""+e2.type, "NOT AN INTEGER");
				    		     if(b1 && b2) { parser.code.append("		; multiplicative_MOD_expression\n");
									  e1.load();
									  e2.load();
									  String loc = ""+Tmp.nv();
									  parser.code.append("	"+loc+" = srem i32 "+e1.locN+", "+e2.locN+"\n");					  
									  RESULT = new Exp(e1.type, "i32", loc);
						     }   	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // multiplicative_expression ::= multiplicative_expression DIV unary_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; multiplicative_DIV_expression\n");
									  e1.load();
									  e2.load();
									  String loc = ""+Tmp.nv();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  if(t.isFloating()) parser.code.append("	"+loc+" = fdiv "+t.getCode()+" "+l1+", "+l2+"\n");
									  else parser.code.append("	"+loc+" = sdiv "+t.getCode()+" "+l1+", "+l2+"\n");					  
									  RESULT = new Exp(t, t.getCode(), loc);
						     }   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // multiplicative_expression ::= multiplicative_expression MULT unary_expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { boolean b1 = e1.type.isNumber();
						     if(!b1) parser.sem_error(""+e1.type, "NOT A NUMBER");
			   			     boolean b2 = e2.type.isNumber();
						     if(!b2) parser.sem_error(""+e2.type, "NOT A NUMBER");
				    		     if(b1 && b2) { parser.code.append("		; multiplicative_MULT_expression\n");
									  e1.load();
									  e2.load();
									  String loc = ""+Tmp.nv();
									  Type t = Type.max(e1.type, e2.type);
									  String l1 = e1.widen(t);
									  String l2 = e2.widen(t);
									  parser.code.append("	"+loc+" = mul "+t.getCode()+" "+l1+", "+l2+"\n");						  
									  RESULT = new Exp(t, t.getCode(), loc);
						     }	   
			   			     else  RESULT = new Exp(Type.errortype(), "", "");
						   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // multiplicative_expression ::= unary_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // predecrement_expression ::= MINUSMINUS unary_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(!e.type.isNumber()) { parser.sem_error(""+e.type, "NOT A NUMBER");
				    		   			     	    RESULT = new Exp(Type.errortype(), "", "");
						   }	   
			   			   else  RESULT = e;						    
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predecrement_expression",121, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // preincrement_expression ::= PLUSPLUS unary_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(!e.type.isNumber()) { parser.sem_error(""+e.type, "NOT A NUMBER");
				    		   			     	    RESULT = new Exp(Type.errortype(), "", "");
						   }	   
			   			   else  RESULT = e;						    
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preincrement_expression",120, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // unary_expression ::= MINUS unary_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { if(!e.type.isNumber()) { parser.sem_error(""+e.type, "NOT A NUMBER");
				    		   			     	    RESULT = new Exp(Type.errortype(), "", "");
						   }	   
			   			   parser.code.append("		; unary_minus_expression\n");
						   e.load();
						   String loc = ""+Tmp.nv();
						   parser.code.append("	"+loc+" = sub "+e.locT+" 0"+", "+e.locN+"\n");
						   Type t = e.type;
						   RESULT = new Exp(t, t.getCode(), loc);
			   }						    
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // unary_expression ::= PLUS unary_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(!e.type.isNumber()) { parser.sem_error(""+e.type, "NOT A NUMBER");
				    		   			     	    RESULT = new Exp(Type.errortype(), "", "");
						   }	   
			   			   else  RESULT = e;						    
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // unary_expression ::= NOT M10 unary_expression 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) if(!e.type.isBool()) { parser.sem_error(""+e.type, "NOT A BOOLEAN");
				    		   			   	  RESULT = new Exp(Type.errortype(), "", "");
						   }	   
			   			   else { String s = l.lTrue;
			   			     	    l.lTrue = l.lFalse;
			   			     	    l.lFalse = s;
 							    RESULT = new Exp(Type.bool(), l);
						   }						    
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // unary_expression ::= predecrement_expression 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // unary_expression ::= preincrement_expression 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // unary_expression ::= postfix_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expression",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // postdecrement_expression ::= postfix_expression MINUSMINUS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postdecrement_expression",123, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // postincrement_expression ::= postfix_expression PLUSPLUS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postincrement_expression",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // M10 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { parser.code.append("		; unary_NOT_expression\n");
			   			     RESULT = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M10",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // postfix_expression ::= AT name 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   		     RESULT = new Exp(Type.errortype(), "", "");
			   }
			   else RESULT = new Exp(Type.reference(sn.cs.getType()), sn.cs.getLocT(), sn.cs.getLocN()+"&"); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // postfix_expression ::= postdecrement_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // postfix_expression ::= postincrement_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // postfix_expression ::= name 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   		     RESULT = new Exp(Type.errortype(), "", "");
			   }
			   else { if((parser.second) && (sn.cs.getType() == Type.bool())) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;									    
											    	     		  if(!l.bvalue) parser.code.append("	br i1 "+sn.cs.getLocN()+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
											    	     		  RESULT = new Exp(Type.bool(), sn.cs.getLocT(), sn.cs.getLocN(), l);
			   	    }
				    else RESULT = new Exp(sn.cs.getType(), sn.cs.getLocT(), sn.cs.getLocN()); 
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // postfix_expression ::= primary 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // array_access ::= primary_no_new_array LBRACK expression RBRACK 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(!e2.type.isInteger()) { parser.sem_error(""+e2.type, "NOT AN INTEGER");
				    		            RESULT = new Exp(Type.errortype(), "", "");
			   } 
			   else RESULT = e1;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_access",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // array_access ::= name LBRACK expression RBRACK 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) { if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   	      			   	 RESULT = new Exp(Type.errortype(), "", "");
			   			     }
			   			     else { Type t1 = sn.cs.getType();
				    				if(!t1.isArray()) { parser.sem_error(""+t1, "NOT AN ARRAY");
				    		 	   	    			  RESULT = new Exp(Type.errortype(), "", "");
			   	    				}
				   	    			else if(!e.type.isInteger()) { parser.sem_error(""+e.type, "NOT AN INTEGER");
				    		       	   		 			 RESULT = new Exp(Type.errortype(), "", "");
					  	   		     } 
					  	   		     else { parser.code.append("		; array_access\n");
										String locT = sn.cs.getLocT();
										String locN = sn.cs.getLocN();
										if(locT.endsWith("**")) { parser.code.append("	"+Tmp.nv()+" = load "+locT+" "+locN+"\n");
														  locT = locT.replaceFirst("\\*", "");
														  locN = Tmp.lv();
					   	 								  sn.cs.putLocT(locT);
					   	 								  sn.cs.putLocN(locN);
										}
										e.load();
										String index = Tmp.lv();
										if(locT.endsWith("]*")) parser.code.append("	"+Tmp.nv()+" = getelementptr "+locT+" "+locN+", i32 0, i32 "+index+"\n");
										else parser.code.append("	"+Tmp.nv()+" = getelementptr "+locT+" "+locN+", i32 "+index+"\n");
										Type t = ((Array)t1).getBase();
										RESULT = new Exp(t, t.getCode()+"*", Tmp.lv());
								     }
			   			     }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_access",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // method_invocation ::= SUPER DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList e = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_invocation",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // method_invocation ::= primary DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList eL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) if(!e1.type.isReference()) { parser.sem_error(""+e1.type, "NOT A REFERENCE");
				    		 	   			   	  RESULT = new Exp(Type.errortype(), "", "");
			   			   }
			   			   else { Type name = ((Reference)e1.type).getReferred();
			   	   			    if (!name.isName()) { parser.sem_error(""+e1.type, "NOT A CLASS");
				    		       	 			  RESULT = new Exp(Type.errortype(), "", "");
			   	   			    }
			   	   			    else { Name c = (Name)name;
								     Symb sn = Env.get(n, c.getEnv()); 
			   			     		     if(sn == null) { parser.sem_error(n,"UNKNOWN NAME"); 
									       	    RESULT = new Exp(Type.errortype(), "", "");
								     }
			   			     		     else if (!sn.isPublic() && !Name.getCurrentClass().isSubclass(sn.getOwner())) { parser.sem_error(n, "ILLEGAL ACCESS TO PRIVATE ATTRIBUTE");
				    					 				     			     	      		  		 RESULT = new Exp(Type.errortype(), "", "");
						  	     		    }
						  	     		    else { String cName = c.getName(); 
										     ListIterator l = eL.list.listIterator();
								 		     parser.code.append("		; method_invocation\n");
										     parser.code.append("	"+Tmp.nv()+" = load "+e1.locT+" "+e1.locN+"\n");
										     String obj_ptr = Tmp.lv();
										     while (l.hasNext()) { Exp e = (Exp)l.next();
												   		   if(e.locT.contains("*")) if(e.locN.endsWith("&")) e.locN = e.locN.replace('&', ' ').trim(); 
											    				     	    		    else if(e.type.isArray()) { String t = ((Array)e.type).getBase().getCode()+"*";
																				   	  		  parser.code.append("	"+Tmp.nv()+" = bitcast "+e.locT+" "+e.locN+" to "+t+"\n");
 	    																			   	  		  e.locT = t;
																				   	  		  e.locN = Tmp.lv();
																    	   		   }
																    	   		   else if(!e.locT.startsWith("i8* getelementptr")) { if(e.locN.startsWith("getelementptr")) { parser.code.append("	"+Tmp.nv()+" = "+e.locN+"\n");
														   																		   	  		  e.locN = Tmp.lv();
																									    	   		   }
																									  	   		   parser.code.append("	"+Tmp.nv()+" = load "+e.locT+" "+e.locN+"\n");
																			         				     	  	   		   e.locT = e.locT.replaceFirst("\\*", "");
																								     	  	   		   e.locN = Tmp.lv();
											    						   	  	   }
								     		    } 
										    Type t1 = sn.getType();
				    				     		    if(!t1.isMethod()) { parser.sem_error(""+t1, "NOT A METHOD");
				    		             			   	  		 RESULT = new Exp(Type.errortype(), "", "");
			   	    				     		    }
								     		    else { Type t3 = ((Method)t1).getRange();
											     if(t3 == Type.voidtype()) parser.code.append("	call void @"+cName+"_"+n+"("); 
											     else parser.code.append("	"+Tmp.nv()+" = call "+t3.getCode()+" @"+cName+"_"+n+"(");
								     		    	     l = eL.list.listIterator();
								     		 	     parser.code.append("%struct."+cName+"* "+obj_ptr);											
								  			     while(l.hasNext()) { Exp e = (Exp)l.next();
											   			 	  parser.code.append(", "+e.locT+" "+e.locN);
								 			     }
								 		  	     Type t5 = ((Method)t1).getDomain();
										 	     if(t5 != eL.type) { parser.sem_error(""+t5+", "+eL.type, "INCOMPATIBLE ARGUMENT IN METHOD INVOCATION "+n);
				    				             	  				 RESULT = new Exp(Type.errortype(), "", "");
			   	  	   						     }
											     else { parser.code.append(")\n");
											  	      Labels lab = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
									 	  	   	      RESULT = new Exp(t3, t3.getCode(), Tmp.lv(), lab);
								     		  	     }
										    }
									   }								     
			   			          }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_invocation",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // method_invocation ::= name LPAREN argument_list_opt RPAREN 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList eL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second)
					  parse: { if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   	      			   	 RESULT = new Exp(Type.errortype(), "", "");
			   			     }
			   			     else { Name c = sn.cs.getOwner();
								String cName = null;
								if(c != null) cName = c.getName(); 
								ListIterator l = eL.list.listIterator();
								parser.code.append("		; method_invocation\n");
								while (l.hasNext()) { Exp e = (Exp)l.next();
											    if(e.locT.contains("*")) if(e.locN.endsWith("&")) e.locN = e.locN.replace('&', ' ').trim(); 
											    				     else if(e.type.isArray()) { String t = ((Array)e.type).getBase().getCode()+"*";
																				   parser.code.append("	"+Tmp.nv()+" = bitcast "+e.locT+" "+e.locN+" to "+t+"\n");
 	    																			   e.locT = t;
																				   e.locN = Tmp.lv();
																    }
																    else if(!e.locT.startsWith("i8* getelementptr")) { if(e.locN.startsWith("getelementptr")) { parser.code.append("	"+Tmp.nv()+" = "+e.locN+"\n");
														   																		   e.locN = Tmp.lv();
																									    }
																									  parser.code.append("	"+Tmp.nv()+" = load "+e.locT+" "+e.locN+"\n");
																			         				     	  e.locT = e.locT.replaceFirst("\\*", "");
																								     	  e.locN = Tmp.lv();
											    						   }
								}
								if(sn.name.equals("printf")) parser.code.append("	"+Tmp.nv()+" = call i32 (i8*, ...)* @printf(");
						   		else if(sn.name.equals("scanf")) parser.code.append("	"+Tmp.nv()+" = call i32 (i8*, ...)* @scanf(");
							  	     else { Type t1 = sn.cs.getType();
				    						if(!t1.isMethod()) { parser.sem_error(""+t1, "NOT A METHOD");
				    		             			   		   RESULT = new Exp(Type.errortype(), "", "");
													   break parse;
			   	    						}
										else { Type t3 = ((Method)t1).getRange();
											 if(t3 == Type.voidtype()) parser.code.append("	call void @"+cName+"_"+sn.name+"("); 
											 else parser.code.append("	"+Tmp.nv()+" = call "+t3.getCode()+" @"+cName+"_"+sn.name+"(");
 										}
								     }
								l = eL.list.listIterator();
								if(sn.name.equals("scanf") || sn.name.equals("printf")) { Exp e = (Exp)l.next();
											   						    parser.code.append(e.locT+" "+e.locN);
								}
								else { if(sn.cs == Env.get(sn.name)) if(Method.getCurrentName().equals("main")) parser.objLoc = "null";
														 else parser.objLoc = "%this";
									 parser.code.append("%struct."+cName+"* "+parser.objLoc);
								}											
								while(l.hasNext()) { Exp e = (Exp)l.next();
											   parser.code.append(", "+e.locT+" "+e.locN);
								}
			   	    				if(sn.name.equals("printf")||sn.name.equals("scanf")){ parser.code.append(")\n");
																	 RESULT = new Exp(Type.integer(), "", "");										  	 						 
								}
 								else { 
									 Type t1 = sn.cs.getType();
									 Type t5 = ((Method)t1).getDomain();
									 if(t5 != eL.type) { parser.sem_error(""+t5+", "+eL.type, "INCOMPATIBLE ARGUMENT IN METHOD INVOCATION "+sn.name);
				    				             	  	   RESULT = new Exp(Type.errortype(), "", "");
			   	  	   				 }
					   				 else { parser.code.append(")\n");
										  Type t4 = ((Method)t1).getRange();
										  Labels lab = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
									 	  RESULT = new Exp(t4, t4.getCode(), Tmp.lv(), lab);
									 }
								}
			   			     }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_invocation",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // field_access ::= SUPER DOT IDENTIFIER 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { Name c = Name.getCurrentClass();
						     String sn = c.getSuper();						     
 			   			     if(sn == null){ parser.sem_error(""+c,"NOT A SUBCLASS");
				    	     				   RESULT = new Exp(Type.errortype(), "", "");
			   			     }
						     else {	Symb ss = Env.get(sn);
								Name sc = (Name)ss.getType();
						    		Symb s = Env.get(n, sc.getEnv());
			   			     		if(s == null){ parser.sem_error(n,"UNKNOWN NAME");
				    	     				  	   RESULT = new Exp(Type.errortype(), "", "");
			   			     		} 
				  			      else RESULT = new Exp(s.getType(), "", "");
						     }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_access",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // field_access ::= primary DOT IDENTIFIER 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { if(!e.type.isReference()) { parser.sem_error(""+e.type, "NOT A REFERENCE");
				    					 	    	   RESULT = new Exp(Type.errortype(), "", "");
						     }
				  		     else { Type r = ((Reference)e.type).getReferred();
								if(!r.isName()) { parser.sem_error(""+r, "NOT A CLASS");
				    					 	      RESULT = new Exp(Type.errortype(), "", "");
						     		}
								else { Symb s = Env.get(n, ((Name)r).getEnv()); 
			   			     			 if(s == null){ parser.sem_error(n,"UNKNOWN NAME");
				    	     				  		    RESULT = new Exp(Type.errortype(), "", "");
			   			     			 } 
			   			     			 else if(!s.isPublic() && !Name.getCurrentClass().isSubclass(s.getOwner())) { parser.sem_error(n, "ILLEGAL ACCESS TO PRIVATE FIELD");
				    					 				     	     				 	     			RESULT = new Exp(Type.errortype(), "", "");
						  	    			}
				  			    			else RESULT = new Exp(s.getType(), "", "");
						     		}								
						     }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_access",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // dims ::= dims LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dims",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // dims ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dims",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // dims_opt ::= dims 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dims_opt",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // dims_opt ::= 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dims_opt",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // dim_expr ::= LBRACK expression RBRACK 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_expr",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // dim_exprs ::= error NT$20 dim_expr 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_exprs",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // NT$20 ::= 
            {
              Exp RESULT =null;
 parser.report_error("dim_expr","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",144, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // dim_exprs ::= dim_exprs dim_expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_exprs",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // dim_exprs ::= dim_expr 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_exprs",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // array_creation_expression ::= NEW name dim_exprs dims_opt 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) if(!e2.type.isInteger()) { parser.sem_error(""+e2.type, "NOT AN INTEGER");
				    			 			 	RESULT = new Exp(Type.errortype(), "", "");
		   	   			   }
			   			   else { if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   			 			  	RESULT = new Exp(Type.errortype(), "", "");
			   	    			    }
			   	    			    else try { int s = Integer.parseInt(e2.locN);
									   Type t1 = Type.reference(sn.cs.getType());
								  	   parser.code.append("		; array_creation\n");									
  								  	   parser.code.append("	"+Tmp.nv()+" = malloc ["+e2.locN+" x "+t1.getCode()+"]\n");
								  	   Type t = Type.array(s, t1);
								  	   String c = "["+s+" x "+t1.getCode()+"]*";
							    	  	   RESULT = new Exp(t, c, Tmp.lv());
						   	  	   }
							  	   catch (Exception e) { parser.sem_error(""+e2.locN, "NOT AN INTEGER_LITERAL");
				    			 			 		 RESULT = new Exp(Type.errortype(), "", "");
							  	   }
			   			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_creation_expression",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // array_creation_expression ::= NEW primitive_type dim_exprs dims_opt 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) if(!e2.type.isInteger()) { parser.sem_error(""+e2.type, "NOT AN INTEGER");
				    			 			 	RESULT = new Exp(Type.errortype(), "", "");
		   				   }
			   			   else try { int s = Integer.parseInt(e2.locN);
								  parser.code.append("		; array_creation\n");									
  								  parser.code.append("	"+Tmp.nv()+" = malloc ["+e2.locN+" x "+t1.getCode()+"]\n");
								  Type t = Type.array(s, t1);
								  String c = "["+s+" x "+t1.getCode()+"]*";
							    	  RESULT = new Exp(t, c, Tmp.lv());
						   	  }
							  catch (Exception e) { parser.sem_error(""+e2.locN, "NOT AN INTEGER_LITERAL");
				    			 			 	RESULT = new Exp(Type.errortype(), "", "");
							  }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_creation_expression",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // argument_list ::= error NT$19 expression 
            {
              ParamList RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (ParamList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // NT$19 ::= 
            {
              ParamList RESULT =null;
 parser.report_error("argument_list","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",143, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // argument_list ::= argument_list COMMA expression 
            {
              ParamList RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamList eL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { eL.list.add(e);
			   			     eL.type = Type.product(eL.type, e.type);
			   			     RESULT = eL;
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // argument_list ::= expression 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) { List l = new ArrayList();
			   			     l.add(e);
			   			     RESULT = new ParamList(e.type, l);
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // argument_list_opt ::= argument_list 
            {
              ParamList RESULT =null;
		int eLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList eL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.second) RESULT = eL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list_opt",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // argument_list_opt ::= 
            {
              ParamList RESULT =null;
		 if(parser.second) RESULT = new ParamList(Type.voidtype(), new ArrayList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list_opt",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // class_body_opt ::= class_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_opt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // class_body_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_opt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // class_instance_creation_expression ::= NEW name NT$18 LPAREN argument_list_opt RPAREN class_body_opt 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamList e2 = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(parser.second) { if(sn.rs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   		     			       RESULT = new Exp(Type.errortype(), "", "");
			   			     }
			   			     else { String objptr = Tmp.lv();
								ListIterator l = e2.list.listIterator();
								parser.code.append("		; constructor_invocation\n");
								while (l.hasNext()) { Exp e = (Exp)l.next();
											    if(e.locT.contains("*")) if(e.locN.endsWith("&")) e.locN = e.locN.replace('&', ' ').trim(); 
											    				     else if(e.type.isArray()) { String t = ((Array)e.type).getBase().getCode()+"*";
																				   parser.code.append("	"+Tmp.nv()+" = bitcast "+e.locT+" "+e.locN+" to "+t+"\n");
 	    																			   e.locT = t;
																				   e.locN = Tmp.lv();
																    }
																    else if(!e.locT.startsWith("i8* getelementptr")) { parser.code.append("	"+Tmp.nv()+" = load "+e.locT+" "+e.locN+"\n");
																			         				     	    e.locT = e.locT.replaceFirst("\\*", "");
																								     	    e.locN = Tmp.lv();
											    						   }
								}
								Type t = sn.rs.getType();
				    		     		if (!t.isName()) { parser.sem_error(""+t, "NOT A CLASS");
				    		           				 RESULT = new Exp(Type.errortype(), "", "");
			   	    		     		}
			   	    		     		else { Env e = ((Name)t).getEnv();
			   	    	     		      	 Symb s1 = Env.get(sn.name, e);
					     				 Type t1 = s1.getType();
			   	    	     				 if(!t1.isConstructor()) { parser.sem_error(""+t1, "NOT A CONSTRUCTOR");
				    			    	     		 		  	   RESULT = new Exp(Type.errortype(), "", "");
			   	    	     			       }
			          	     				 else if(((Constructor)t1).getDomain() != e2.type) { parser.sem_error(""+e2.type, "INCOMPATIBLE ARGUMENT IN CONSTRUCTOR INVOCATION "+sn.name);
				    					 				  		     	    RESULT = new Exp(Type.errortype(), "", "");
			   	  	   	    		     		}
					   	    		            else if(!s1.isPublic() && !Name.getCurrentClass().isSubclass(sn.rs.getOwner())) { parser.sem_error(sn.name, "ILLEGAL ACCESS TO PRIVATE CONSTRUCTOR");
				    					 				     			     	      			          RESULT = new Exp(Type.errortype(), "", "");
						  	   		    	     }
						  	   		    	     else { parser.code.append("	call void @"+sn.name+"("+"%struct."+sn.name+"* "+objptr);
										     		l = e2.list.listIterator();
										     		while(l.hasNext()) { Exp pe = (Exp)l.next();
											    		 	 	   parser.code.append(", "+pe.locT+" "+pe.locN);
										     		}
										     		parser.code.append(")\n");
												RESULT = new Exp(((Constructor)t1).getRange(), "%struct."+sn.name+"*", objptr);
									    	    }
			 	    		     		     }
			   			     }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_instance_creation_expression",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$18 ::= 
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(parser.second) if(sn.rs != null) { Type t = sn.rs.getType();
				    					     if(t.isName()) { Env e = ((Name)t).getEnv();
			   	    	     		      				    Symb s1 = Env.get(sn.name, e);
					     							    Type t1 = s1.getType();
			   	    	     							    if(t1.isConstructor()) { parser.code.append("		; class_instance_creation_expression\n");																 
																     parser.code.append("	"+Tmp.nv()+" = malloc %struct."+sn.name+"\n");																     
												    } 
									     }
									   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",142, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // primary_no_new_array ::= error NT$17 DOT THIS 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$17 ::= 
            {
              Exp RESULT =null;
 parser.report_error("primary_no_new_array","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",141, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // primary_no_new_array ::= LPAREN M11 error NT$16 RPAREN 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$16 ::= 
            {
              Exp RESULT =null;
 parser.report_error("primary_no_new_array","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",140, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // primary_no_new_array ::= name DOT THIS 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // primary_no_new_array ::= name DOT CLASS 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // primary_no_new_array ::= array_type DOT CLASS 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // primary_no_new_array ::= VOID DOT CLASS 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // primary_no_new_array ::= primitive_type DOT CLASS 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // primary_no_new_array ::= array_access 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // primary_no_new_array ::= method_invocation 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if((parser.second) && (e.type == Type.bool())) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;									    
											    if(!l.bvalue) parser.code.append("	br i1 "+e.locN+", label %"+l.lTrue+", label %"+l.lFalse+"\n");
											    l.bvDone = true;
											    RESULT = new Exp(Type.bool(), e.locT, e.locN, l);
			   }
			   else RESULT = e; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // primary_no_new_array ::= field_access 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // primary_no_new_array ::= class_instance_creation_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // primary_no_new_array ::= LPAREN M11 expression RPAREN 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if((parser.second) && (e.type == Type.bool()) && (l!= null)) RESULT = new Exp(Type.bool(), e.locT, e.locN, l);
			   else RESULT = e; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // primary_no_new_array ::= THIS 
            {
              Exp RESULT =null;
		 RESULT = new Exp(Type.reference(Name.getCurrentClass()), "", ""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // primary_no_new_array ::= literal 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if((parser.second) && (e.type == Type.bool())) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;									    
											    if(!l.bvalue) if (e.locN.equals("true")) parser.code.append("	br label %"+l.lTrue+"\n");
											    			else parser.code.append("	br label %"+l.lFalse+"\n"); 
											    RESULT = new Exp(Type.bool(), e.locT, e.locN, l);
			   }
			   else RESULT = e; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // M11 ::= 
            {
              Labels RESULT =null;
		 if (parser.second) RESULT = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M11",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // primary ::= array_creation_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // primary ::= primary_no_new_array 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // return_statement ::= RETURN M14 expression_opt SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) { Type r = Method.getCurrent().getRange();
						     if(e.type != r) if(e.type.isNumber() && r.isNumber()) { Type mt = Type.max(e.type, r);
																 String t = mt.getCode();
															 	 if(e.type != mt) { parser.code.append("		; return_statement\n");
																			  e.load();
									  						 				  String l = e.widen(mt);
																			  parser.code.append("	store "+t+" "+l+", "+t+"*"+" %tmp\n");
																			  parser.code.append("	"+Tmp.nv()+" = load "+t+"*"+" %tmp\n");
																			  parser.code.append("	store "+t+" "+Tmp.lv()+", "+t+"*"+" %retval\n");
																			  parser.code.append("	br label %return\n");
																 }
							  				 					 else  parser.sem_error(""+r+", "+e.type, "RANGE TYPE SHORTER THAN RETURNED TYPE");
									   }
							  		   else  parser.sem_error(""+r+", "+e.type, "INCOMPATIBLE TYPES");
						     else { String t = e.type.getCode();
								parser.code.append("		; return_statement\n");
								e.load();
								parser.code.append("	store "+e.locT+" "+e.locN+", "+t+"*"+" %tmp\n");
								parser.code.append("	"+Tmp.nv()+" = load "+t+"*"+" %tmp\n");
								parser.code.append("	store "+t+" "+Tmp.lv()+", "+t+"*"+" %retval\n");
								parser.code.append("	br label %return\n");	
						     }
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // M14 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = new Labels();
						     l.bvalue = true;
						     RESULT = l;
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M14",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // while_statement_no_short_if ::= WHILE LPAREN M7 expression M5 RPAREN statement_no_short_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   else { parser.code.append("	br label %"+l.lBegin+"\n");
							    parser.code.append(l.lFalse+":	; lFalse\n");
						   }	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement_no_short_if",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // while_statement ::= WHILE error NT$15 M5 RPAREN statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NT$15 ::= 
            {
              Object RESULT =null;
 parser.report_error("expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",139, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // while_statement ::= WHILE LPAREN M7 expression M5 RPAREN statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   else { parser.code.append("	br label %"+l.lBegin+"\n");
							    parser.code.append(l.lFalse+":	; l_False\n");
						   }	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // statement_expression_list ::= statement_expression_list COMMA statement_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression_list",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // statement_expression_list ::= statement_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression_list",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // for_update ::= statement_expression_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_update",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // for_update_opt ::= for_update 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_update_opt",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // for_update_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_update_opt",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // for_init ::= for_variable_declaration_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_init",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // for_init ::= statement_expression_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_init",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // for_init_opt ::= for_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_init_opt",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // for_init_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_init_opt",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // for_statement_no_short_if ::= FOR LPAREN for_init_opt SEMICOLON M7 expression_opt M5 SEMICOLON for_update_opt RPAREN statement_no_short_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement_no_short_if",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // for_statement ::= FOR LPAREN for_init_opt SEMICOLON M7 expression_opt M5 SEMICOLON for_update_opt RPAREN statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   /* else { parser.code.append("	br label %"+l.lBegin+"\n");
							    parser.code.append(l.lFalse+":	; l_False\n");
						   }	*/
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // if_then_else_statement_no_short_if ::= IF LPAREN M4 expression M5 RPAREN statement_no_short_if M6 ELSE statement_no_short_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   else { parser.code.append("	br label %"+l.lNext+"\n");
							    parser.code.append(l.lNext+":	; l_Next\n");
						   }	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_else_statement_no_short_if",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // if_then_else_statement ::= IF LPAREN M4 error NT$14 M5 RPAREN statement_no_short_if ELSE statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_else_statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$14 ::= 
            {
              Object RESULT =null;
 parser.report_error("expression","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",138, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // if_then_else_statement ::= IF LPAREN M4 expression M5 RPAREN statement_no_short_if M6 ELSE statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   else { parser.code.append("	br label %"+l.lNext+"\n");
							    parser.code.append(l.lNext+":	; l_Next\n");
						   }	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_else_statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // if_then_statement ::= IF error NT$13 M5 RPAREN statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_statement",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$13 ::= 
            {
              Object RESULT =null;
 parser.report_error("if_then_statement","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",137, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // if_then_statement ::= IF LPAREN M4 expression M5 RPAREN statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Labels l = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if(parser.second) if(!e.type.isBool()) parser.sem_error(""+e.type, "NOT A BOOLEAN");
						   else { parser.code.append("	br label %"+l.lFalse+"\n");
							    parser.code.append(l.lFalse+":	; l_False\n");
						   }	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_statement",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // M7 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = new Labels();
			    			     parser.code.append("	br label %"+l.lBegin+"\n");
			    			     parser.code.append(l.lBegin+":	; l_Begin\n");
						     RESULT = l;
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M7",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // M6 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
			    			     parser.code.append("	br label %"+l.lNext+"\n");
			    			     parser.code.append(l.lFalse+":	; l_False\n");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M6",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // M5 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) { Labels l = (Labels)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			    			     parser.code.append(l.lTrue+":	; l_True\n");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M5",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // M4 ::= 
            {
              Labels RESULT =null;
		 if(parser.second) RESULT = new Labels(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M4",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // statement_expression ::= class_instance_creation_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // statement_expression ::= method_invocation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // statement_expression ::= postdecrement_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // statement_expression ::= postincrement_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // statement_expression ::= predecrement_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // statement_expression ::= preincrement_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // statement_expression ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_expression",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expression_statement ::= statement_expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_statement",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // empty_statement ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty_statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // statement_without_trailing_substatement ::= return_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_without_trailing_substatement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // statement_without_trailing_substatement ::= expression_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_without_trailing_substatement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // statement_without_trailing_substatement ::= empty_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_without_trailing_substatement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // statement_without_trailing_substatement ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_without_trailing_substatement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // statement_no_short_if ::= for_statement_no_short_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_short_if",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // statement_no_short_if ::= while_statement_no_short_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_short_if",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // statement_no_short_if ::= if_then_else_statement_no_short_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_short_if",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // statement_no_short_if ::= statement_without_trailing_substatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_short_if",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // statement ::= for_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // statement ::= if_then_else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // statement ::= if_then_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // statement ::= statement_without_trailing_substatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // local_variable_declaration ::= FINAL type variable_declarators 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_variable_declaration",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // local_variable_declaration ::= type variable_declarators 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_variable_declaration",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // for_variable_declaration_statement ::= type variable_declarators assign_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_variable_declaration_statement",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // local_variable_declaration_statement ::= type error NT$12 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_variable_declaration_statement",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$12 ::= 
            {
              Object RESULT =null;
 parser.report_error("local_variable_declaration_statement","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",136, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // local_variable_declaration_statement ::= type variable_declarators assign_opt SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_variable_declaration_statement",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // block_statement ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // block_statement ::= local_variable_declaration_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // block_statements ::= error NT$11 block_statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statements",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$11 ::= 
            {
              Object RESULT =null;
 parser.report_error("block_statements","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",135, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // block_statements ::= block_statements block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statements",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // block_statements ::= block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statements",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // block_statements_opt ::= block_statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statements_opt",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // block_statements_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statements_opt",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // block ::= LBRACE M2 error NT$10 RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$10 ::= 
            {
              Object RESULT =null;
 parser.report_error("block","WRONG");
			   System.out.println(" BLOCK EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
 			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",134, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // block ::= LBRACE M2 block_statements_opt RBRACE 
            {
              Object RESULT =null;
		 System.out.println(" BLOCK EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // explicit_constructor_invocation ::= primary DOT SUPER LPAREN argument_list_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("explicit_constructor_invocation",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // explicit_constructor_invocation ::= primary DOT THIS LPAREN argument_list_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("explicit_constructor_invocation",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // explicit_constructor_invocation ::= SUPER LPAREN argument_list_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamList e2 = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(parser.second) { Name c = Name.getCurrentClass();
						     String sup = c.getSuper();
						     if(sup == null){ parser.sem_error(c.getName(), "NOT HAVING A SUPERCLASS");
				   		     			    RESULT = new Exp(Type.errortype(), "", "");
			   			     }
						     else { Name sc = Env.get(sup).getOwner();
								Env se = sc.getEnv();
								Symb ss = Env.get(sup, se);
								if(ss == null) { parser.sem_error(sup, "NOT HAVING A CONSTRUCTOR");
				   		     			           RESULT = new Exp(Type.errortype(), "", "");
			   			     		}
								else { Type t1 = ss.getType();
			   	    	     				 if(!t1.isConstructor()) { parser.sem_error(""+t1, "NOT A CONSTRUCTOR");
				    			    	     		 		  	   RESULT = new Exp(Type.errortype(), "", "");
			   	    	     			       } 
									 else { parser.code.append("		; explicit_constructor_invocation_SUPER\n");
										  ListIterator l = e2.list.listIterator();
										  while (l.hasNext()) { Exp e = (Exp)l.next();
											    			if(e.locT.contains("*")) if(e.locN.endsWith("&")) e.locN = e.locN.replace('&', ' ').trim(); 
											    				     			 else if(e.type.isArray()) { String t = ((Array)e.type).getBase().getCode()+"*";
																				   		     parser.code.append("	"+Tmp.nv()+" = bitcast "+e.locT+" "+e.locN+" to "+t+"\n");
 	    																			   		     e.locT = t;
																				    		     e.locN = Tmp.lv();
																    			}
																    			else if(!e.locT.startsWith("i8* getelementptr")) { parser.code.append("	"+Tmp.nv()+" = load "+e.locT+" "+e.locN+"\n");
																			         				     	      		e.locT = e.locT.replaceFirst("\\*", "");
																								     	      		e.locN = Tmp.lv();
											    								     }
										  }
			          	     				 	  if(((Constructor)t1).getDomain() != e2.type) { parser.sem_error(""+e2.type, "INCOMPATIBLE ARGUMENT IN CONSTRUCTOR INVOCATION "+sup);
				    					 				  		     	    		 RESULT = new Exp(Type.errortype(), "", "");
			   	  	   	    		     		  }
					   	    		              else { parser.code.append("	"+Tmp.nv()+" = bitcast %struct."+c.getName()+"* %this to %struct."+sup+"*\n");
											   parser.code.append("	call void @"+sup+"("+"%struct."+sup+"* "+Tmp.lv());
										     	   l = e2.list.listIterator();
										     	   while(l.hasNext()) { Exp pe = (Exp)l.next();
											    		 	 	parser.code.append(", "+pe.locT+" "+pe.locN);
										     	   }
										     	   parser.code.append(")\n");
											   RESULT = new Exp(((Constructor)t1).getRange(), "%struct."+sup+"*", Tmp.lv());
									    	  }
			 	    		     		      }
			   			           }
						    }
			   }
			   else RESULT = new Exp(Type.voidtype(), "", "");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("explicit_constructor_invocation",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // explicit_constructor_invocation ::= THIS LPAREN argument_list_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("explicit_constructor_invocation",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // M2 ::= 
            {
              Object RESULT =null;
		 System.out.println(" BLOCK ENTRY");
			   if(parser.first) Env.push(); 
			   if(parser.second) { Env.next();
						     ListIterator l = Env.getVars().listIterator();
						     if(l.hasNext()) parser.code.append("		; M2\n");
						     while(l.hasNext()) { String p = (String)l.next();
										  Symb s = Env.get(p);
			   			     				  Type t = s.getType();						     				 
										  String tc = s.getType().getCode();										  
						     				  parser.code.append("	%"+p+" = alloca "+tc+"\n");						     				  
										  s.putLocT(tc+"*");
										  s.putLocN("%"+p);
						     }
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M2",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // constructor_body ::= LBRACE M3 error RBRACE 
            {
              Object RESULT =null;
		 parser.report_error("block","WRONG");
			   System.out.println(" CONSTRUCTOR EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor_body",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // constructor_body ::= LBRACE M3 block_statements_opt RBRACE 
            {
              Object RESULT =null;
		 System.out.println(" CONSTRUCTOR EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor_body",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // constructor_body ::= LBRACE M3 explicit_constructor_invocation block_statements_opt RBRACE 
            {
              Object RESULT =null;
		 System.out.println(" CONSTRUCTOR EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor_body",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // constructor_declarator ::= modifiers_opt IDENTIFIER NT$9 LPAREN formal_parameter_list_opt RPAREN 
            {
              Type RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList pL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.first) { Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(Type.constructor(pL.type, Type.reference(Type.getName(n))), c, m.booleanValue());
			   			    else { if(m.booleanValue()) parser.warning(n, "PUBLIC CONSTRUCTOR DECLARED IN PRIVATE CLASS");
				    		           s = new Symb(Type.constructor(pL.type, Type.reference(Type.getName(n))), c, false);
			   			    }	
			   			    Env.putSymb(n, s);
			   }
			   if(parser.second) { Symb msymb = Env.get(n);
						     Constructor c = (Constructor)msymb.getType();
						     Constructor.putCurrent(n, c);
						     Type t2 = c.getRange();
						     String ptrt = "%struct."+n+"*";
						     parser.code.append(ptrt+" %this");
						     ListIterator l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
									        Symb s = Env.get(p);
						                       	  Type t = s.getType();
									        if(t.isArray()) { String tc = ((Array)t).getBase().getCode()+"*";
												        parser.code.append(", "+tc+" "+s.getLocN());
													  s.putLocT(tc);
									        }
									        else parser.code.append(", "+s.getLoc());
						     } 
						     parser.code.append(") {\nentry:\n");
						     l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
										  Symb s = Env.get(p);
										  Type t = s.getType();
			   			     				  String tc;
										  if(t.isArray()) tc = s.getLocT();
										  else tc = t.getCode();
						     				  parser.code.append("	%"+p+"_addr = alloca "+tc+"\n");
						     				  parser.code.append("	store "+s.getLoc()+", "+tc+"* %"+p+"_addr\n");
										  s.putLocT(tc+"*");
										  s.putLocN("%"+p+"_addr");
						     }
						     RESULT = t2;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor_declarator",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$9 ::= 
            {
              Type RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(parser.first) { if (!Env.put(n, null)) parser.sem_error(n,"DUPLICATE NAME");
						    else { Name c = Name.getCurrentClass();
			   			    	     String cname = c.getName();
						    	     if (!n.equals(cname)) parser.sem_error(n+", "+cname,"CONSTRUCTOR NAME DIFFERENT FROM CLASS NAME");
						    }
						    System.out.println(" CONSTRUCTOR ENTRY: "+n);
		 				    Env.push();
			   }
			   if(parser.second) { System.out.println(" CONSTRUCTOR ENTRY: "+n);
						     Env.next();
						     Symb msymb = Env.get(n);
						     Constructor c = (Constructor)msymb.getType();
						     parser.code.append("		; constructor_declarator\n");
						     parser.code.append("define "+Type.voidtype().getCode()+" @"+n+"(");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",133, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // constructor_declaration ::= constructor_declarator constructor_body 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) { parser.code.append("		; constructor_declaration\n");
					       parser.code.append("	br label %return\n");
					       parser.code.append("return:\n");
					       parser.code.append("	ret void\n");
					       parser.code.append("}\n\n");
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor_declaration",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // M3 ::= 
            {
              Object RESULT =null;
		 if(parser.second) { ListIterator l = Env.getVars().listIterator();
						     if(l.hasNext())parser.code.append("		; M3\n");
						     while(l.hasNext()) { String p = (String)l.next();
										  Symb s = Env.get(p);
			   			     				  Type t = s.getType();
										  if(!t.isArray()) { String tc = s.getType().getCode();										  
						     				  			   parser.code.append("	%"+p+" = alloca "+tc+"\n");						     				  
										  			   s.putLocT(tc+"*");
										  			   s.putLocN("%"+p);
										  }
						     }
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M3",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // method_body ::= SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println(" METHOD EXIT");
			   if(parser.first) Env.pop();
			   if(parser.second) Env.next(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_body",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // method_body ::= LBRACE M3 error RBRACE 
            {
              Object RESULT =null;
		 parser.report_error("block","WRONG");
			   System.out.println(" METHOD EXIT");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_body",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // method_body ::= LBRACE M3 block_statements_opt RBRACE 
            {
              Object RESULT =null;
		 System.out.println(" METHOD EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_body",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // formal_parameter ::= FINAL type variable_declarator_id 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // formal_parameter ::= type variable_declarator_id 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.first) Env.remVar(n);
			   RESULT = n; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // formal_parameter_list ::= error NT$8 formal_parameter 
            {
              ParamList RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (ParamList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$8 ::= 
            {
              ParamList RESULT =null;
 parser.report_error("formal_parameter_list","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",132, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // formal_parameter_list ::= formal_parameter_list COMMA formal_parameter 
            {
              ParamList RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamList pL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pL.list.add(n);
			   pL.type = Type.product(pL.type, Env.get(n).getType());
			   RESULT = pL; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // formal_parameter_list ::= formal_parameter 
            {
              ParamList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List l = new ArrayList();
			   l.add(n);
			   RESULT = new ParamList(Env.get(n).getType(), l); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // formal_parameter_list_opt ::= formal_parameter_list 
            {
              ParamList RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList pL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list_opt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // formal_parameter_list_opt ::= 
            {
              ParamList RESULT =null;
		 RESULT = new ParamList(Type.voidtype(), new ArrayList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list_opt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // method_header ::= error NT$7 LPAREN formal_parameter_list_opt RPAREN 
            {
              Type RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_header",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$7 ::= 
            {
              Type RESULT =null;
 parser.report_error("method_header","WRONG");
			   Env.push();
 			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",131, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // method_header ::= modifiers_opt VOID IDENTIFIER NT$6 LPAREN formal_parameter_list_opt RPAREN 
            {
              Type RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList pL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.first) { Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(Type.method(pL.type, Type.voidtype()), c, m.booleanValue());
			   			    else { if(m.booleanValue()) parser.warning(n, "PUBLIC METHOD DECLARED IN PRIVATE CLASS");
				    		           s = new Symb(Type.method(pL.type, Type.voidtype()), c, false);
			   			    }
			   			    Env.putSymb(n, s);
			   }
			   if(parser.second) { Symb msymb = Env.get(n);
						     Method.putCurrent(n, (Method)msymb.getType());
						     String ptrt = "%struct."+Name.getCurrentClass().getName()+"*";
						     if(!n.equals("main")) parser.code.append(ptrt+" %this");
						     ListIterator l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
									        Symb s = Env.get(p);
						                       	  Type t = s.getType();
									        if(t.isArray()) { String tc = ((Array)t).getBase().getCode()+"*";
												        parser.code.append(", "+tc+" "+s.getLocN());
													  s.putLocT(tc);
									        }
									        else parser.code.append(", "+s.getLoc());
						     }  
						     parser.code.append(") {\nentry:\n");
						     l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
										  Symb s = Env.get(p);
										  Type t = s.getType();
			   			     				  String tc;
										  if(t.isArray()) tc = s.getLocT();
										  else tc = t.getCode();
						     				  parser.code.append("	%"+p+"_addr = alloca "+tc+"\n");
						     				  parser.code.append("	store "+s.getLoc()+", "+tc+"* %"+p+"_addr\n");
										  s.putLocT(tc+"*");
										  s.putLocN("%"+p+"_addr");
						     }
						     RESULT = Type.voidtype();
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_header",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$6 ::= 
            {
              Type RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(parser.first) { if (!Env.put(n, null)) parser.sem_error(n,"DUPLICATE NAME");
						    System.out.println(" METHOD ENTRY: "+n);
		 				    Env.push();
			   }
			   if(parser.second) { System.out.println(" METHOD ENTRY: "+n);
						     Env.next();
						     parser.code.append("		; method_header\n");
						     if(n.equals("main")) parser.code.append("define void @main(");
					           else parser.code.append("define "+Type.voidtype().getCode()+" @"+Name.getCurrentClass().getName()+"_"+n+"(");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",130, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // method_header ::= modifiers_opt type IDENTIFIER NT$5 LPAREN formal_parameter_list_opt RPAREN 
            {
              Type RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList pL = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.first) { Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(Type.method(pL.type, t1), c, m.booleanValue());
			   			    else { if(m.booleanValue()) parser.warning(n, "PUBLIC METHOD DECLARED IN PRIVATE CLASS");
				    		           s = new Symb(Type.method(pL.type, t1), c, false);
			   			    }
			   			    Env.putSymb(n, s); 
			   }
			   if(parser.second) { Name c = Name.getCurrentClass();
						     Symb msymb = Env.get(n, c.getEnv());
						     Method.putCurrent(n, (Method)msymb.getType());
						     String ptrt = "%struct."+c.getName()+"*";
						     parser.code.append(ptrt+" %this");
						     ListIterator l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
									        Symb s = Env.get(p);
						                       	  Type t = s.getType();
									        if(t.isArray()) { String tc = ((Array)t).getBase().getCode()+"*";
												        parser.code.append(", "+tc+" "+s.getLocN());
													  s.putLocT(tc);
									        }
									        else parser.code.append(", "+s.getLoc());
						     } 
						     parser.code.append(") {\nentry:\n");
						     l = pL.list.listIterator();
						     while(l.hasNext()) { String p = (String)l.next();
										  Symb s = Env.get(p);
										  Type t = s.getType();
			   			     				  String tc;
										  if(t.isArray()) tc = s.getLocT();
										  else tc = t.getCode();
						     				  parser.code.append("	%"+p+"_addr = alloca "+tc+"\n");
						     				  parser.code.append("	store "+s.getLoc()+", "+tc+"* %"+p+"_addr\n");
										  s.putLocT(tc+"*");
										  s.putLocN("%"+p+"_addr");
						     }
						     parser.code.append("	%retval = alloca "+t1.getCode()+"\n");
						     parser.code.append("	%tmp = alloca "+t1.getCode()+"\n");
						     RESULT = t1;
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_header",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$5 ::= 
            {
              Type RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(parser.first) { if (!Env.put(n, null)) parser.sem_error(n,"DUPLICATE NAME");
						    System.out.println(" METHOD ENTRY: "+n);
		 			          Env.push();
			   }
			   if(parser.second) { System.out.println(" METHOD ENTRY: "+n);
						     Env.next();
						     parser.code.append("		; method_header\n");
						     parser.code.append("define "+t1.getCode()+" @"+Name.getCurrentClass().getName()+"_"+n+"(");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",129, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // method_declaration ::= method_header method_body 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.second) { parser.code.append("		; method_declaration\n");
						     parser.code.append("	br label %return\n");
						     parser.code.append("return:\n");
						     if(t == Type.voidtype()) parser.code.append("	ret void\n"); 
						     else { parser.code.append("	"+Tmp.nv()+" = load "+t.getCode()+"* %retval\n");
						     	    parser.code.append("	ret "+t.getCode()+" "+Tmp.lv()+"\n");
						     }
						     parser.code.append("}\n\n");
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_declaration",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // variable_declarator_id ::= variable_declarator_id LBRACK RBRACK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator_id",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // variable_declarator_id ::= IDENTIFIER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.first) { Boolean m = (Boolean)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			   			    boolean mod = m == null ? false: m.booleanValue();	
			  			    Type t = (Type)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			   			    Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(t, c, mod, t.getCode(), "%"+n);
			   			    else { if(mod) parser.warning(n, "PUBLIC FIELD DECLARED IN PRIVATE CLASS");
				    			     s = new Symb(t, c, false, t.getCode(), "%"+n);
			   			    }
			   			    if (!Env.putVar(n, s)) parser.sem_error(n,"DUPLICATE NAME");						    	
			   }
			   RESULT = n;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator_id",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // M1 ::= 
            {
              Type RESULT =null;
		 RESULT = (Type)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).value; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // variable_declarators ::= error NT$4 COMMA variable_declarator_id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarators",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.report_error("variable_declarator_id","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",128, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // variable_declarators ::= variable_declarators COMMA M1 variable_declarator_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarators",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // variable_declarators ::= variable_declarator_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarators",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assign_opt ::= EQ assignment_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_opt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assign_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_opt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // field_declaration ::= modifiers_opt type error NT$3 method_declaration 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_declaration",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.report_error("field_declaration","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",127, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // field_declaration ::= modifiers_opt type error NT$2 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_declaration",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.report_error("variable_declarators","WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",126, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // field_declaration ::= modifiers_opt type variable_declarators SEMICOLON 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_declaration",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // class_member_declaration ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_member_declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // class_member_declaration ::= interface_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_member_declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // class_member_declaration ::= modifiers_opt CLASS IDENTIFIER super_opt interfaces_opt class_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_member_declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // class_member_declaration ::= method_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_member_declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // class_member_declaration ::= field_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_member_declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // class_body_declaration ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // class_body_declaration ::= constructor_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // class_body_declaration ::= static_initializer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // class_body_declaration ::= class_member_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // class_body_declarations ::= class_body_declarations class_body_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declarations",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // class_body_declarations ::= class_body_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declarations",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // class_body_declarations_opt ::= class_body_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declarations_opt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // class_body_declarations_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body_declarations_opt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // class_body ::= LBRACE class_body_declarations_opt RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_body",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // interface_type_list ::= interface_type_list COMMA interface_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("interface_type_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // interface_type_list ::= interface_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("interface_type_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // interfaces_opt ::= interfaces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("interfaces_opt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // interfaces_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("interfaces_opt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // interfaces ::= IMPLEMENTS interface_type_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("interfaces",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // super_opt ::= super_cl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("super_opt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // super_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("super_opt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // super_cl ::= EXTENDS class_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("super_cl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // class_declaration ::= modifiers_opt CLASS IDENTIFIER EXTENDS IDENTIFIER NT$1 class_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String n2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("CLASS EXIT: "+n1);
			   if(parser.first) { List e_vars = new ArrayList();
						    Env e = Env.getCurrent();
						    e_vars.add(new Vars(e, e.getEvars()));
 						    Name cl = Env.get(n1).getOwner();
						    String sup = cl.getSuper();
						    while(sup != null){ cl = Env.get(sup).getOwner();
										e = cl.getEnv();
						    				e_vars.add(0, new Vars(e, e.getEvars()));
										sup = cl.getSuper();
						    }					    
					          ListIterator evl = e_vars.listIterator();
						    int n = 0;
						    String global = "%struct."+n1+" = type { ";
						    boolean first = true;
						    while(evl.hasNext()){ Vars ev = (Vars)evl.next();
										  ListIterator l = ev.vl.listIterator();										  
						    				  while(l.hasNext()){ String v = (String)l.next();
									    				    Symb s = Env.get(v, ev.e);
									    				    String c = s.getType().getCode();
									    				    s.putLocT(c + "*");
									    				    s.putLocN("getelementptr %struct."+n1+"* %this, i32 0, i32 "+n);
									    				    n++;
									    				    if(first) { global = global + c;
															    first = false;
													    }
													    else global = global + ", " + c;
										  }
						    }
						    global = global + " }";
						    Env.putGlobal(global, "struct");
						    Env.get(n1).putLocT(global.replace("%struct."+n1+" = ",""));
						    Env.pop();
						    Env.pop();
			   }
			   if(parser.second) { Env.next();
						     Env.next();
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$1 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println("CLASS ENTRY: "+n1);
			   if(parser.first) switch (Env.putClass(n1, m.booleanValue(),n2)){ case 1: parser.sem_error(n1,"DUPLICATE CLASS NAME");
							     								    break;
													        case 2: parser.sem_error(n2,"UNKNOWN CLASS");
					        }
  			   if(parser.second) { Env.next();
						     Env.next();
						     Name c = Env.get(n1).getOwner();
						     Name.putCurrentClass(c);
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",125, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // class_declaration ::= modifiers_opt CLASS IDENTIFIER NT$0 class_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("CLASS EXIT: "+n1);
			   if(parser.first) { Env e = Env.getCurrent();
						    List vars = e.getEvars();
					          ListIterator l = vars.listIterator();
						    int n = 0;
						    String global = "%struct."+n1+" = type { ";
						    boolean first = true;
						    while(l.hasNext()) { String v = (String)l.next();
									    	 Symb s = Env.get(v);
									   	 String c = s.getType().getCode();
									   	 s.putLocT(c + "*");
									  	 s.putLocN("getelementptr %struct."+n1+"* %this, i32 0, i32 "+n);
									   	 n++;
									    	 if(first) { global = global + c;
											       first = false;
									   	 }
									   	 else global = global + ", " + c;
						    }
						    global = global + " }";
						    Env.putGlobal(global, "struct");
						    Env.get(n1).putLocT(global.replace("%struct."+n1+" = ",""));	    				
						    Env.pop();
						  }
			   if(parser.second) Env.next();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$0 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println("CLASS ENTRY: "+n1);
			   if(parser.first) if (Env.putClass(n1, m.booleanValue()) != 0) parser.sem_error(n1,"DUPLICATE CLASS NAME");
 			   if(parser.second) { Env.next();
						     Name c = Env.get(n1).getOwner();
						     Name.putCurrentClass(c);
						     System.out.println("second");
			   } 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",124, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // non_access_modifier_opt ::= VOLATILE 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // non_access_modifier_opt ::= TRANSIENT 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // non_access_modifier_opt ::= SYNCHRONIZED 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // non_access_modifier_opt ::= NATIVE 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // non_access_modifier_opt ::= FINAL 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // non_access_modifier_opt ::= ABSTRACT 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // non_access_modifier_opt ::= STATIC 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // non_access_modifier_opt ::= 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_access_modifier_opt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // access_modifier ::= PRIVATE 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_modifier",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // access_modifier ::= PROTECTED 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_modifier",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // access_modifier ::= PUBLIC 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_modifier",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // access_modifier ::= 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("access_modifier",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // modifiers_opt ::= access_modifier non_access_modifier_opt 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modifiers_opt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // name ::= name DOT IDENTIFIER 
            {
              Sname RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Symb s1 = sn.cs;
			   if(s1 == null) { parser.sem_error(sn.name, "UNKNOWN NAME");
						  RESULT = new Sname(n, null, null);
			   }
			   else { Type t1 = s1.getType();
				    if(!t1.isReference()) { parser.sem_error(""+t1, "NOT A REFERENCE");
								    RESULT = new Sname(n, null, null);
				    }
				    else { Type r = ((Reference)t1).getReferred();
					     if(!r.isName()) { parser.sem_error(""+r, "NOT A CLASS");
								     RESULT = new Sname(n, null, null);
					     }
					     else { Symb s2 = Env.get(n, ((Name)r).getEnv()); 
			   			     	if(s2 == null) { parser.sem_error(n,"UNKNOWN NAME"); 
									     RESULT = new Sname(n, null, null);
							}
			   			     	else if (!s2.isPublic() && !Name.getCurrentClass().isSubclass(s2.getOwner())) { parser.sem_error(n, "ILLEGAL ACCESS TO PRIVATE ATTRIBUTE");
				    					 				     			     	      		  RESULT = new Sname(n, null, null);
						  	     }
						  	     else { if(parser.second) { parser.code.append("		; name\n");
												  parser.code.append("	"+Tmp.nv()+" = load "+s1.getLoc()+"\n");
												  parser.objLoc = Tmp.lv();
									}
									RESULT = new Sname(n, s2, Env.get(n, Env.getRoot()));
							     }
					     }								
				    }
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // name ::= IDENTIFIER 
            {
              Sname RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sname(n, Env.get(n), Env.get(n, Env.getRoot())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // array_type ::= name dims 
            {
              Type RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Symb s = sn.cs; 
			   if(s == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				    		 RESULT = Type.errortype();
			   } 
			   else RESULT = Type.array(0, Type.reference(s.getType()));
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // array_type ::= primitive_type dims 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Type.array(0, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // reference_type ::= array_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reference_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // reference_type ::= name 
            {
              Type RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Symb s = sn.rs; 
			   if(s == null) RESULT = Type.reference(Type.forwardName(sn.name, parser.s.yytext())); 
			   else RESULT = Type.reference(s.getType());
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reference_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // numeric_type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = Type.floating(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // numeric_type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = Type.character(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // numeric_type ::= INT 
            {
              Type RESULT =null;
		 RESULT = Type.integer(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // primitive_type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = Type.bool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // primitive_type ::= numeric_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= reference_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= primitive_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // literal ::= NULL_LITERAL 
            {
              Exp RESULT =null;
		 
			   RESULT = new Exp(Type.reference(Type.voidtype()), "", "null"); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // literal ::= STRING_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String l = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   if(parser.first) Env.putGlobal(l , Tmp.ns());
			   if(parser.second) { int i = l.length() + 1;
			   			     String ary = "["+i+" x i8]";
			   			     String tmp = Env.getGlobal(l);
			   			     String loc = "i8* getelementptr ("+ary+"* "+tmp+", i32 0, i32 0)";
			   			     Symb s = Env.get("String", Env.getRoot());
			   			     if(s == null) RESULT = new Exp(Type.reference(Type.forwardName("String", parser.s.yytext())), loc, ""); 
			   			     else RESULT = new Exp(Type.reference(s.getType()), loc, ""); 
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // literal ::= CHARACTER_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Character l = (java.lang.Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   RESULT = new Exp(Type.character(), "i8", ""+l); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // literal ::= BOOLEAN_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Boolean l = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   RESULT = new Exp(Type.bool(), "i1", ""+l); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= FLOATING_POINT_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   RESULT = new Exp(Type.floating(), "double", ""+l); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= INTEGER_LITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   RESULT = new Exp(Type.integer(), "i32", ""+l); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_declaration ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_declaration ::= interface_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type_declaration ::= class_declaration 
            {
              Object RESULT =null;
		 Hashtable forwards;
			   if(parser.first) { forwards = Name.ForwardHashtable();
						    int err = forwards.size();
						    if(err > 0) { parser.errors = parser.errors + err;
     						    	     		System.err.println("Error : Semantic error");
      					    	     		System.err.println("  ==> CANNOT FIND CLASSES ("+err+"): "+forwards+"\n");
						    }
			   }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_import_on_demand_declaration ::= IMPORT name DOT MULT SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_import_on_demand_declaration",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // single_type_import_declaration ::= IMPORT name SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_type_import_declaration",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // import_declaration ::= type_import_on_demand_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_declaration",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // import_declaration ::= single_type_import_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_declaration",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // package_declaration ::= PACKAGE name SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_declaration",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_declarations ::= type_declarations type_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declarations",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_declarations ::= type_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declarations",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_declarations ::= import_declarations import_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_declarations",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_declarations ::= import_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_declarations",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type_declarations_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declarations_opt",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type_declarations_opt ::= type_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declarations_opt",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // import_declarations_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_declarations_opt",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // import_declarations_opt ::= import_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_declarations_opt",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // package_declaration_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_declaration_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // package_declaration_opt ::= package_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_declaration_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // compilation_unit ::= package_declaration_opt import_declarations_opt type_declarations_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compilation_unit",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= compilation_unit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

